{"version":3,"sources":["node_modules/browser-pack/_prelude.js","Source/Core/ArrowGeometry.js","Source/Core/BasicGeometry.js","Source/Core/BasicMeshMaterial.js","Source/Core/FramebufferTexture.js","Source/Core/GeometryUtils.js","Source/Core/LOD.js","Source/Core/MaterialUtils.js","Source/Core/Mesh.js","Source/Core/MeshMaterial.js","Source/Core/MeshPhongMaterial.js","Source/Core/MeshUtils.js","Source/Core/MeshVisualizer.js","Source/Core/PlaneBufferGeometry.js","Source/Core/PlaneGeometry.js","Source/Core/ReferenceMesh.js","Source/Core/RendererUtils.js","Source/Core/Rotation.js","Source/Core/ShaderUtils.js","Source/Core/Shaders/ShaderChunk.js","Source/Core/Shaders/ShaderLib.js","Source/Core/Shaders/texture_frag.js","Source/Core/Shaders/texture_vert.js","Source/Main.js","Source/ThirdParty/csg/csg.js","Source/ThirdParty/tiff-js/tiff.js","Source/Util/CSG.js","Source/Util/Path.js","Source/Util/defineProperty.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","CesiumMeshVisualizer","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","ArrowGeometry","options","Cesium","defaultValue","width","headLength","headWidth","reverse","_GeometryUtils","createGeometry","arrowGeometry","arrow","line","CylinderGeometry","topRadius","bottomRadius","_GeometryUtils2","default","translate","mergeGeometries","BasicGeometry","positions","normals","uvs","indices","basicGeometry","Int32Array","attributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","Float32Array","normal","FLOAT","uv","bs","BoundingSphere","fromVertices","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BasicMeshMaterial","uniforms","ambientColor","emissionColor","diffuseColor","specularColor","specularShininess","alpha","undefined","ambientColorMap","emissionColorMap","diffuseColorMap","specularColorMap","specularShininessMap","normalMap","alphaMap","side","_MeshMaterial2","Sides","FRONT","apply","blendEnable","withTexture","withNormals","depthTest","depthMask","blending","toLowerCase","extension","_Path2","GetExtension","translucent","slice","HTMLCanvasElement","HTMLVideoElement","defined","flipY","sampler","magnificationFilter","WebGLConstants","LINEAR","minificationFilter","NEAREST_MIPMAP_LINEAR","wrapS","REPEAT","wrapT","vertexShaderUri","fragmentShaderUri","_ShaderChunk2","texture_normals_vert","texture_normals_frag","texture_vert","texture_frag","normals_vert","normals_frag","none_vert","none_frag","vertexShader","fragmentShader","_MeshMaterial","_ShaderChunk","_Path","prototype","Object","create","FramebufferTexture","mesh","renderTarget","depthTexture","texture","framebuffer","ready","readyPromise","when","defer","Framebuffer","_colorTextures","_depthTexture","resolve","destroyAttachments","destroy","GeometryUtils","getAttrs","geo","attrNames","name","hasOwnProperty","push","initConstants","constantsHasInit","scratchPosition","Cartesian3","scratchMatrix4","Matrix4","scratchRotation","Matrix3","scratchOffset","normalizeNormals","geometry","x","y","z","Math","sqrt","geometries","valueArrs","valueTypes","valueConstructors","valueComponents","valueNormalizes","valueOffsets","indexOffst","componentCounts","_attrName","attr","constructor","normalize","_geometry","j","_attrName2","_j","_i","_geometry2","ai","attrName","valueArr","attrValues","set","_j2","index","_i2","Uint16Array","Uint32Array","_CSG","rotateX","angle","fromRotationX","fromRotationTranslation","ZERO","multiplyByPoint","rotateY","fromRotationY","rotateZ","fromRotationZ","computeVertexNormals","il","array","vA","vB","vC","pA","pB","pC","cb","ab","fromArray","subtract","cross","needsUpdate","geometriesAttrs","lengthChanged","primitiveTypeChanged","lastGeoAttrs","offset","Array","isArray","clone","getAttributeComponentType","attributeComponentType","SHORT","Int8Array","BYTE","Uint8Array","Uint8ClampedArray","UNSIGNED_BYTE","Int16Array","UNSIGNED_SHORT","INT","UNSIGNED_INT","Float64Array","isGeometry3js","THREE","BufferGeometry","vertices","faces","parseBufferGeometry3js","computeFaceNormals","getAttribute","itemSize","normalized","groups","forEach","group","count","start","fromGeometry3js","geometry3js","fromGeometry","GeometryPipeline","computeNormal","toGeometry3js","positionIdx","Vector3","idx1","idx2","idx3","Face3","toCSG","_toCSG3js","_CSG2","polygons","normalIdx","Vertex","Polygon","fromPolygons","fromCSG","csg_model","_fromCSG3js","toPolygons","getGeometryVertice","pos","plane","pop","three_model","rotation","rotation_matrix","Mesh","Euler","makeRotationFromEuler","add","applyMatrix4","b","Face4","d","face","three_geometry","_getGeometryVertice3js","copy","faceVertexUvs","Vector2","computeBoundingBox","vertice_position","LOD","uuid","createGuid","show","maxAvailableDistance","Number","MAX_VALUE","_position","_scale","scale","_rotation","axis","_Rotation2","_boundingSphere","_needsUpdate","_modelMatrixNeedsUpdate","_modelMatrix","IDENTITY","_onNeedUpdateChanged","paramChanged","removeEventListener","_children","_parent","type","defineProperties","levels","enumerable","value","removeByValue","arr","val","splice","_Rotation","_RendererUtils","setPosition","changed","arguments","setScale","addLevel","object","distance","abs","l","parent","radius","update","parentModelMatrix","frameState","_RendererUtils2","computeModelMatrix","modelMatrix","getTranslation","center","max","camera","positionWC","cullingVolume","computeVisibility","Intersect","OUTSIDE","getObjectForDistance","get","children","_needUpdate","addEventListener","MaterialUtils","cloneUniforms","uniforms3js","bindUniformValue","refreshUniformsCommon","material","opacity","diffuse","color","emissive","val3js","multiplyScalar","emissiveIntensity","map","specularMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","uvScaleMap","displacementMap","bumpMap","roughnessMap","metalnessMap","emissiveMap","isWebGLRenderTarget","repeat","offsetRepeat","envMap","flipEnvMap","isCubeTexture","reflectivity","refractionRatio","refreshUniformsLine","refreshUniformsDash","dashSize","totalSize","gapSize","refreshUniformsPoints","size","_pixelRatio","_height","refreshUniformsLambert","refreshUniformsPhong","specular","shininess","bumpScale","normalScale","displacementScale","displacementBias","refreshUniformsToon","gradientMap","refreshUniformsStandard","roughness","metalness","envMapIntensity","refreshUniformsPhysical","clearCoat","clearCoatRoughness","refreshUniformsNormal","valCesium","_typeof","Cartesian2","Vector4","Cartesian4","Color","Texture","image","console","log","shaderIDs","MeshDepthMaterial","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","fromMaterial3js","material3js","shaderID","shader","ShaderLib","updateMaterialFrom3js","materialWidth3js","transparent","wireframe","m_uniforms","isMeshBasicMaterial","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isMeshNormalMaterial","isMeshDepthMaterial","isLineBasicMaterial","isLineDashedMaterial","isPointsMaterial","isMeshToonMaterial","isMeshPhysicalMaterial","ambientLightColor","isMaterial3js","Material","isGeometrySupported","instances","instancedAttributes","_material","quaternion","modelMatrixNeedsUpdate","_drawCommand","_instances","_center","instance","addInstance","userData","_MeshPhongMaterial2","addReference","_MeshPhongMaterial","primitive","id","instanceId","traverse","node","callback","child","removeReference","MeshMaterial","initUniform","srcUniforms","_uniforms","item","_disposeCallbacks","onDispose","disposeCallback","indexOf","_defineProperty2","owner","onPropertyChanged","that","referenceCount","_uuid","_defaultColor","defaultColor","WHITE","fromCssColorString","_pickedColor","pickedColor","YELLOW","_picked","picked","uniformStateUsed","uniformStateName","glslVarName","_vertexShader","_fragmentShader","allowPick","pickColorQualifier","_defineProperty","BACK","key","emission","_phong_vert2","_phong_frag2","_phong_frag","_phong_vert","MeshUtils","_MaterialUtils","_Mesh","fromMesh3js","mesh3js","isMesh3js","_MaterialUtils2","_Mesh2","DrawCommand","BufferUsage","BlendingState","VertexArray","ShaderProgram","DepthFunction","CullFace","RenderState","PixelFormat","CesiumMath","Buffer","loadArrayBuffer","Resource","fetchArrayBuffer","loadImage","fetchImage","src","Quaternion","w","scratchMatrix","world2localMatrix","surfacePointLocal","rayDir","rayOriginLocal","scratchRay","Ray","getVertexBufferTypedArray","collection","_availableInstances","instancesLength","collectionCenter","bufferData","_vertexBufferTypedArray","instanceMatrix","getPickIdBufferTypedArray","context","pickIdBuffer","_pickIdBufferTypedArray","pickId","_pickIds","createPickId","pickColor","floatToByte","red","green","blue","getInstancedAttribTypedArray","instancedAttribute","isColorValue","createInstancedAttributes","vertexArrayAttributes","attributeLocations","maxAttribLocation","buffer","createVertexBuffer","typedArray","usage","STATIC_DRAW","_buffer","attribute","vertexBuffer","offsetInBytes","strideInBytes","instanceDivisor","_pickIdBuffer","vertexBufferTypedArray","_vertexBuffer","copyFromBufferView","arrayView","gl","_gl","target","_bufferTarget","bindBuffer","DYNAMIC_DRAW","updateVertexBuffer","pickIdBufferTypedArray","bufferTypedArray","createPickIds","pickIds","MeshVisualizer","_actualModelMatrix","_ready","_isWireframe","_up","up","onModelMatrixNeedUpdate","_chidren","_debug","_show","_framebufferTextures","_uniformValueCache","_textureCache","_uniformMaps","referenceMesh","_ReferenceMesh2","axisParameter","referenceAxisParameter","showReference","beforeUpdate","Event","_scene","scene","_FramebufferTexture","_LOD","_ReferenceMesh","_tiff","_MeshUtils","_ShaderUtils","remove","_actualMesh","actualMesh","destroyObject","pickPosition","windowPosition","result","worldCoordinatesToLocal","getPickRay","direction","origin","worldCoordinates","inverseTransformation","localToWorldCoordinates","localCoordinates","toWireframe","TRIANGLE_FAN","TRIANGLE_STRIP","triangleIndices","restoreFromWireframe","POINTS","createBoundingSphere","points","fromPoints","createDrawCommand","pickObject","command","cull","instanceCount","pass","Pass","TRANSLUCENT","OPAQUE","createAttributeLocations","location","componentSizeInBytes","getSizeInBytes","czm_modelMatrixRow0","czm_modelMatrixRow1","czm_modelMatrixRow2","a_pickColor","vertexArray","bufferUsage","_cacehVertexArrayAttributes","_attributeLocations","getFragmentShaderSource","getVertexShaderSource","_ShaderUtils2","processShader3js","vs","ShaderSource","replaceMain","sources","fs","fragmentDepth","defines","_sp","fromCache","fragmentShaderSource","vertexShaderSource","shaderProgram","renderState","getRenderState","_renderStateOptions","uniformMap","getUniformMap","czm_pickColor","czm_instanced_modifiedModelView","getModifiedModelViewCallback","pickCommand","pickOnly","cullFrustum","_pickSP","replaceCache","executeInClosestFrustum","_pickCommand","_rtcTransform","_rtcModelView","multiplyByTranslation","multiply","uniformState","view","getRenderState_old","ALPHA_BLEND","DISABLED","enabled","func","GREATER","depthRange","near","far","colorMask","renderStateOpts","LESS","getCubeTextureCallback","mtl","allLoaded","isLoading","promises","HTMLImageElement","deferred","requestAnimationFrame","all","images","CubeMap","source","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","defaultCubeMap","defaultTextureImage","document","createElement","height","createTexture","TextureMinificationFilter","TextureWrap","mipmap","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","requiresNpot","MIRRORED_REPEAT","npot","isPowerOfTwo","canvas","nextPowerOfTwo","getContext","drawImage","tx","TEXTURE_2D","pixelFormat","internalFormat","pixelDatatype","generateMipmap","onTextureImageLoaded","tex","arrayBufferView","bufferView","format","RGB","toLocaleLowerCase","RGBA","Sampler","getTextureCallback","cacheKey","url","then","imageArrayBuffer","tiffParser","_tiff2","tiffCanvas","parseTIFF","otherwise","err","defaultTexture","cameraPosition","u_cameraPosition","u_normalMatrix","u_projectionMatrix","projection","u_modelViewMatrix","modelView","normalMatrix","projectionMatrix","modelViewMatrix","model","u_modelMatrix","u_viewMatrix","viewMatrix","logDepthBufFC","frustum","LN2","isImageUrl","isCssColorString","itemLowerCase","endsWith","startsWith","Matrix2","isColor","isCartesian2","isCartesian3","isCartesian4","_FramebufferTexture2","_renderToTextureCommands","innerUniforms","userDefine","glsl","attrs","parseIncludes","_computeModelMatrix","_LOD2","raiseEvent","wireframeChanged","sysWireframe","_globe","_surface","tileProvider","debug","yUp2Zup","_oldScale","_oldPosition","_MeshUtils2","pn","attrLocation","vb","_attributes","indexNeedsUpdate","indexBuffer","boundingVolume","passes","pick","commandList","_geometryChanged","initFrameBufferTexture","frameBufferTexture","viewport","drawCommands","getIndex","_textureCommand","vaNeedsUpdate","_sizeInBytes","BYTES_PER_ELEMENT","createIndexBuffer","indexDatatype","IndexDatatype","_indexBuffer","drawingBufferWidth","drawingBufferHeight","fbNeedsUpdate","notFullScreen","_notFullScreen","DEPTH_COMPONENT","updateFrameBufferTexture","renderToTexture","getPixels","readState","pixels","_canvas","_computeTexture","PixelDatatype","getExtension","DeveloperError","traverseFunc","visibleOnly","scratchTraverseArgs","cancelCurrent","cancelAll","visible","widthSegments","heightSegments","planeBufferGeometry","width_half","gridY","floor","gridX1","gridX","gridY1","segment_width","iy","segment_height","height_half","ix","PlaneGeometry","planeGeometry","positionsVal","_axisParameter","_ArrowGeometry2","_axisParameterY","materialX","axisLine","axisLineY","meshY","materialY","meshX","meshZ","defineProperty","_ArrowGeometry","_interopRequireDefault","ReferenceMesh","RendererUtils","validateFramebuffer","status","checkFramebufferStatus","FRAMEBUFFER","FRAMEBUFFER_COMPLETE","message","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_UNSUPPORTED","_currentFramebuffer","WebGLRenderingContext","scratchBackBufferArray","_bind","buffers","_getActiveColorAttachments","drawCommand","outputTexture","outputDepthTexture","colorTextures","clearCommandScratch","ClearCommand","clearCommand","renderToPixels","execute","readPixels","assign","bindFramebuffer","ALPHA","scratchPixelFormat","scratchPixelDatatype","multiplyTransformation","srcMatrix","yUpToZUp","dstMatrix","srcModelMatrix","translation","outModelMatrix","scratchTranslation","scratchQuaternion","scratchScale","scratchTranslationQuaternionRotationScale","fromAxisAngle","Rotation","_axis","_angle","18","ShaderUtils","WebGLProgram","ShaderChunk","BackSide","DoubleSide","FlatShading","CubeUVRefractionMapping","CubeUVReflectionMapping","GammaEncoding","LinearEncoding","NoToneMapping","AddOperation","MixOperation","MultiplyOperation","EquirectangularRefractionMapping","CubeRefractionMapping","SphericalReflectionMapping","EquirectangularReflectionMapping","CubeReflectionMapping","PCFShadowMap","Uncharted2ToneMapping","RGBDEncoding","RGBM16Encoding","obj","__esModule","_none_frag","_none_vert","_normals_frag","_normals_vert","_texture_frag","_texture_vert2","_texture_vert","_texture_normals_frag","_texture_normals_frag2","_texture_normals_vert","_texture_normals_vert2","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_vert","_none_frag2","_normals_frag2","_texture_frag2","replace","match","include","UniformsLib","aomap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fog","fogDensity","fogFar","lights","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMatrix","spotLights","coneCos","decay","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","UniformsUtils","merge","merged","uniforms_src","uniforms_dst","parameter_src","basic","lightmap","lambert","emissivemap","meshlambert_frag","phong","standard","depth","equirect","tEquirect","tFlip","lightPos","29","CSG","PlaneBufferGeometry","_MeshVisualizer2","_MeshVisualizer","_PlaneGeometry2","_PlaneGeometry","_BasicMeshMaterial","_BasicMeshMaterial2","_BasicGeometry","_BasicGeometry2","_ShaderLib","_ShaderLib2","_PlaneBufferGeometry","_PlaneBufferGeometry2","MeshVisualizerVERSION","./Core/BasicGeometry.js","./Core/BasicMeshMaterial.js","./Core/FramebufferTexture.js","./Core/GeometryUtils.js","./Core/LOD.js","./Core/MaterialUtils.js","./Core/Mesh.js","./Core/MeshMaterial.js","./Core/MeshPhongMaterial.js","./Core/MeshVisualizer.js","./Core/PlaneBufferGeometry.js","./Core/PlaneGeometry.js","./Core/ReferenceMesh.js","./Core/RendererUtils.js","./Core/Rotation.js","./Core/ShaderUtils.js","./Core/Shaders/ShaderChunk.js","./Core/Shaders/ShaderLib.js","./Util/CSG.js","./Util/defineProperty.js","32","csg","union","Node","clipTo","invert","build","allPolygons","intersect","inverse","flip","cube","Vector","info","sphere","vertex","theta","phi","PI","dir","cos","sin","plus","times","slices","stacks","cylinder","point","stack","normalBlend","out","axisX","axisY","s","ray","end","minus","axisZ","unit","isY","negated","t0","t1","dividedBy","dot","lerp","interpolate","other","Plane","splitPolygon","polygon","coplanarFront","coplanarBack","front","back","polygonType","types","EPSILON","ti","tj","vi","vj","v","shared","temp","clipPolygons","concat","bsp","33","TIFFParser","tiffDataView","littleEndian","fileDirectories","isLittleEndian","BOM","getBytes","TypeError","hasTowel","RangeError","getFieldTagName","fieldTag","315","258","265","264","320","259","33432","306","338","266","289","288","291","290","316","270","257","256","271","281","280","272","254","274","262","284","296","278","277","305","279","273","255","263","283","326","327","343","328","433","434","269","336","321","346","347","285","297","317","532","339","330","292","325","323","322","301","318","286","529","531","345","37378","40961","36868","36867","36864","33434","37385","40960","33437","42016","37384","37500","37377","37510","33723","34675","700","42112","42113","34377","fieldTagNames","getFieldTypeName","fieldType","fieldTypeName","fieldTypeNames","2","3","4","5","6","7","9","10","11","12","getFieldTypeLength","fieldTypeLength","getBits","numBits","byteOffset","bitOffset","extraBytes","newByteOffset","totalBits","shiftRight","shiftLeft","bits","rawBits","numBytes","getUint8","getUint16","getUint32","getFieldValues","fieldTagName","typeCount","valueOffset","fieldValues","fieldValueSize","indexOffset","clampColorSample","colorSample","bitsPerSample","multiplier","pow","makeRGBAFillValue","parseFileDirectory","numDirEntries","tiffFields","nextIFDByteOffset","tiffArrayBuffer","DataView","firstIFDByteOffset","fileDirectory","imageWidth","ImageWidth","imageLength","strips","compression","Compression","samplesPerPixel","SamplesPerPixel","sampleProperties","bitsPerPixel","BitsPerSample","bitsPerSampleValues","bytesPerSample","hasBytesPerSample","hasBytesPerPixel","stripOffsetValues","StripOffsets","StripByteCounts","stripByteCountValues","ceil","numStripOffsetValues","stripOffset","stripByteCount","jIncrement","getHeader","pixel","sample","currentSample","m","sampleInfo","sampleOffset","bytesPerPixel","blockLength","header","getInt8","iterations","currentByte","ctx","rowsPerStrip","RowsPerStrip","imageLengthModRowsPerStrip","rowsInLastStrip","numRowsInPreviousStrip","photometricInterpretation","PhotometricInterpretation","extraSamplesValues","ExtraSamples","numExtraSamples","ColorMap","colorMapValues","colorMapSampleSize","numStrips","numRowsInStrip","numPixels","yPadding","pixelSamples","k","samples","colorMapIndex","fillStyle","_csg2","plane_normal","idx","Path","fname","lastIndexOf","substring","GetDirectoryName","Combine","ChangeExtension","newExt","36"],"mappings":"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","file":"CesiumMeshVisualizer.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿ \r\nimport GeometryUtils from './GeometryUtils.js'\r\n/**\r\n*\r\n  <pre><code>  \r\n          +            ——\r\n        +   +           |\r\n      +       +     headLength\r\n    +           +       |\r\n  ++++headWidth++++   ——\r\n        +  +            |\r\n        +  +            |\r\n        +  +            |\r\n        +  +          length\r\n        +  +            |\r\n        +  +            |\r\n        +  +            |\r\n        ++++           ——\r\n        width\r\n\r\n    </code> </pre>\r\n*@param {Object}[options] \r\n*@param {Number}[options.length=50000]   \r\n*@param {Number}[options.width=250]   \r\n*@param {Number}[options.headLength=5000]   \r\n*@param {Number}[options.headWidth=1000]    \r\n*@param {Boolean}[options.reverse=false]   \r\n* \r\n*@property {Number}length   \r\n*@property {Number}width   \r\n*@property {Number}headLength   \r\n*@property {Number}headWidth   \r\n*@property {Boolean}reverse  \r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction ArrowGeometry(options) {\r\n    options = Cesium.defaultValue(options, {});\r\n    this.length = Cesium.defaultValue(options.length, 50000);\r\n    this.width = Cesium.defaultValue(options.width, 125);\r\n    this.headLength = Cesium.defaultValue(options.headLength, 5000);\r\n    this.headWidth = Cesium.defaultValue(options.headWidth, 1000);\r\n    this.reverse = Cesium.defaultValue(options.reverse, false);\r\n}\r\n\r\n/**\r\n*\r\n*@param {Cesium.ArrowGeometry}\r\n*@return {Cesium.Geometry}\r\n*/\r\nArrowGeometry.createGeometry = function (arrowGeometry) {\r\n    var length = arrowGeometry.length;\r\n    var width = arrowGeometry.width;\r\n    var headLength = arrowGeometry.headLength;\r\n    var headWidth = arrowGeometry.headWidth;\r\n    var reverse = arrowGeometry.reverse;\r\n\r\n    var line = Cesium.CylinderGeometry.createGeometry(new Cesium.CylinderGeometry({\r\n        length: length,\r\n        topRadius: width,\r\n        bottomRadius: width,\r\n    }));\r\n    var arrow;\r\n    if (reverse) {\r\n        arrow = Cesium.CylinderGeometry.createGeometry(new Cesium.CylinderGeometry({\r\n            length: headLength,\r\n            topRadius: headWidth,\r\n            bottomRadius: 0,\r\n        }));\r\n        GeometryUtils.translate(arrow, [0, 0, -(length + headLength) / 2]);\r\n    } else {\r\n        arrow = Cesium.CylinderGeometry.createGeometry(new Cesium.CylinderGeometry({\r\n            length: headLength,\r\n            topRadius: 0,\r\n            bottomRadius: headWidth,\r\n        }));\r\n        GeometryUtils.translate(arrow, [0, 0, (length + headLength) / 2]);\r\n    }\r\n\r\n    var lineWithArrow = GeometryUtils.mergeGeometries([line, arrow]);\r\n\r\n    return lineWithArrow;\r\n}\r\nexport default ArrowGeometry;","﻿ \r\n/**\r\n*\r\n*@param {Object}options\r\n*@param {Array<Number>|Float32Array}options.positions\r\n*@param {Array<Number>|Int32Array}options.indices\r\n*@param {Array<Number>|Float32Array}[options.normals]\r\n*@param {Array<Number>|Float32Array}[options.uvs]\r\n*\r\n*@memberof Cesium\r\n*@constructor\r\n*/\r\nfunction BasicGeometry(options) {\r\n    this.positions = options.positions;\r\n    this.normals = options.normals;\r\n    this.uvs = options.uvs;\r\n    this.indices = options.indices;\r\n}\r\n/**\r\n*\r\n*@param {Cesium.BasicGeometry}basicGeometry\r\n*@return {Cesiumm.Geometry} \r\n*/\r\nBasicGeometry.createGeometry = function (basicGeometry) {\r\n    if (!basicGeometry.positions) {\r\n        throw new Error(\"缺少positions参数\");\r\n    }\r\n    if (!basicGeometry.indices) {\r\n        throw new Error(\"缺少indices参数\");\r\n    }\r\n    var positions = basicGeometry.positions;\r\n    var normals = basicGeometry.normals;\r\n    var uvs = basicGeometry.uvs;\r\n    var indices = basicGeometry.indices instanceof Int32Array ? basicGeometry.indices : new Int32Array(basicGeometry.indices);\r\n\r\n    var attributes = {\r\n        position: new Cesium.GeometryAttribute({\r\n            componentDatatype: Cesium.ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: positions instanceof Float32Array ? positions : new Float32Array(basicGeometry.positions)\r\n        })\r\n    };\r\n    if (normals) {\r\n        attributes.normal = new Cesium.GeometryAttribute({\r\n            componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: normals instanceof Float32Array ? normals : new Float32Array(normals)\r\n        })\r\n    }\r\n    if (uvs) {\r\n        attributes.uv = new Cesium.GeometryAttribute({\r\n            componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: uvs instanceof Float32Array ? uvs : new Float32Array(uvs)\r\n        })\r\n    }\r\n\r\n\r\n    var bs = Cesium.BoundingSphere.fromVertices(positions);\r\n    var geo = new Cesium.Geometry({\r\n        attributes: attributes,\r\n        indices: new Int32Array(indices),\r\n        primitiveType: Cesium.PrimitiveType.TRIANGLES,\r\n        boundingSphere: bs\r\n    });\r\n    return geo;\r\n}\r\nexport default BasicGeometry;","﻿\r\nimport MeshMaterial from './MeshMaterial.js';\r\nimport ShaderChunk from './Shaders/ShaderChunk.js';\r\nimport Path from '../Util/Path.js';\r\n\r\nfunction BasicMeshMaterial(options) {\r\n    options = options ? options : {};\r\n\r\n    options.uniforms = options.uniforms ? options.uniforms : {\r\n        ambientColor: [0, 0, 0, 1.0],               // Ka\r\n        emissionColor: [0, 0, 0, 1.0],              // Ke\r\n        diffuseColor: [0, 0, 0, 1.0],               // Kd\r\n        specularColor: [0, 0, 0, 1.0],              // Ks\r\n        specularShininess: 0,          // Ns\r\n        alpha: undefined,                      // d / Tr\r\n        ambientColorMap: undefined,            // map_Ka\r\n        emissionColorMap: undefined,           // map_Ke\r\n        diffuseColorMap: undefined,            // map_Kd\r\n        specularColorMap: undefined,           // map_Ks\r\n        specularShininessMap: undefined,       // map_Ns\r\n        normalMap: undefined,                  // map_Bump\r\n        alphaMap: undefined                    // map_d\r\n    };\r\n    options.uniforms.ambientColor = Cesium.defaultValue(options.uniforms.ambientColor, [0, 0, 0, 1.0]);\r\n    options.uniforms.emissionColor = Cesium.defaultValue(options.uniforms.emissionColor, [0, 0, 0, 1.0]);\r\n    options.uniforms.diffuseColor = Cesium.defaultValue(options.uniforms.diffuseColor, [0, 0, 0, 1.0]);\r\n    options.uniforms.specularColor = Cesium.defaultValue(options.uniforms.specularColor, [0, 0, 0, 1.0]);\r\n    options.uniforms.alpha = Cesium.defaultValue(options.uniforms.alpha, 1);\r\n    options.uniforms.specularShininess = Cesium.defaultValue(options.uniforms.specularShininess, 0);\r\n    options.side = Cesium.defaultValue(options.side, MeshMaterial.Sides.FRONT)\r\n\r\n    MeshMaterial.apply(this, [options]);\r\n    this.blendEnable = false;\r\n    var withTexture = options.withTexture;\r\n    var withNormals = options.withNormals;\r\n    this.depthTest = true;\r\n    this.depthMask = true;\r\n    this.blending = true;\r\n    if (options.uniforms.diffuseColorMap) {//&& options.uniforms.diffuseColorMap.toLowerCase().indexOf(\".png\")) {\r\n\r\n        if (typeof options.uniforms.diffuseColorMap === 'string') {\r\n            var diffuseColorMap = options.uniforms.diffuseColorMap.toLowerCase();\r\n            var extension = Path.GetExtension(diffuseColorMap);\r\n            if (extension == \".tif\" || extension == \".png\") {\r\n                this.translucent = true;\r\n            } else if (diffuseColorMap.slice(0, \"data:image/png\".length) === \"data:image/png\") {\r\n                this.translucent = true;\r\n            } else if (diffuseColorMap.slice(0, \"data:image/tif\".length) === \"data:image/tif\") {\r\n                this.translucent = true;\r\n            }\r\n        } else if (diffuseColorMap instanceof HTMLCanvasElement\r\n            || diffuseColorMap instanceof HTMLVideoElement\r\n        ) {\r\n            this.translucent = true;\r\n        }\r\n        withTexture = true;\r\n        if (!Cesium.defined(this.uniforms.diffuseColorMap.flipY)) {\r\n            this.uniforms.diffuseColorMap.flipY = false;\r\n        }\r\n\r\n        if (!this.uniforms.diffuseColorMap.sampler) {\r\n            var sampler = {};\r\n\r\n            sampler.magnificationFilter = Cesium.WebGLConstants.LINEAR;\r\n            sampler.minificationFilter = Cesium.WebGLConstants.NEAREST_MIPMAP_LINEAR;\r\n            sampler.wrapS = Cesium.WebGLConstants.REPEAT;\r\n            sampler.wrapT = Cesium.WebGLConstants.REPEAT;\r\n            this.uniforms.diffuseColorMap.sampler = sampler;\r\n        }\r\n\r\n    } else {\r\n        withTexture = false;\r\n    }\r\n\r\n    var vertexShaderUri = null;// \"texture_normals.vert\"; \r\n    var fragmentShaderUri = null;  //\"texture_normals.frag\";\r\n    if (withTexture && withNormals) {\r\n        vertexShaderUri = ShaderChunk.texture_normals_vert;// \"texture_normals.vert\"; \r\n        fragmentShaderUri = ShaderChunk.texture_normals_frag;  //\"texture_normals.frag\";\r\n    } else if (withTexture && !withNormals) {\r\n        vertexShaderUri = ShaderChunk.texture_vert;//\"texture.vert\";\r\n        fragmentShaderUri = ShaderChunk.texture_frag;// \"texture.frag\";\r\n    } else if (!withTexture && withNormals) {\r\n        vertexShaderUri = ShaderChunk.normals_vert;// \"normals.vert\";\r\n        fragmentShaderUri = ShaderChunk.normals_frag;//\"normals.frag\";\r\n    }\r\n    else {\r\n        vertexShaderUri = ShaderChunk.none_vert;// \"none.vert\";\r\n        fragmentShaderUri = ShaderChunk.none_frag;// \"none.frag\";\r\n    }\r\n    this.vertexShader = vertexShaderUri;\r\n    this.fragmentShader = fragmentShaderUri;\r\n\r\n}\r\nBasicMeshMaterial.prototype = Object.create(MeshMaterial.prototype);\r\nexport default BasicMeshMaterial;\r\n","﻿\r\n/**\r\n*帧缓存纹理类，可以将一个mesh渲染到帧缓存并作为纹理提供给其他mesh。<br/>\r\n*需要配合{@link Cesium.MeshVisualizer}、{@link Cesium.Mesh}、{@link Cesium.MeshMaterial}使用。\r\n*@param {Cesium.Mesh}mesh \r\n*\r\n*@property {Cesium.Mesh}mesh \r\n*@property {Cesium.Texture}texture \r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*@example\r\n \r\n    MeshVisualizer = Cesium.MeshVisualizer;\r\n    Mesh = Cesium.Mesh;\r\n    MeshMaterial = Cesium.MeshMaterial; \r\n    FramebufferTexture = Cesium.FramebufferTexture; \r\n    Shaders = VolumeRendering.Shaders; \r\n\r\n    var center2 = Cesium.Cartesian3.fromDegrees(homePosition[0]+3.5, homePosition[1] , 50000);\r\n    var modelMatrix2 = Cesium.Transforms.eastNorthUpToFixedFrame(center2);\r\n\r\n    var meshVisualizer = new MeshVisualizer({\r\n        modelMatrix: modelMatrix2,\r\n        up: { y: 1 },\r\n        scale: new Cesium.Cartesian3(2,2,2)\r\n    });\r\n    viewer.scene.primitives.add(meshVisualizer);\r\n\r\n    var guiControls = new function () {\r\n        this.model = 'bonsai';\r\n        this.steps = 256.0;\r\n        this.alphaCorrection = 1.0;\r\n        this.color1 = \"#00FA58\";\r\n        this.stepPos1 = 0.1;\r\n        this.color2 = \"#CC6600\";\r\n        this.stepPos2 = 0.7;\r\n        this.color3 = \"#F2F200\";\r\n        this.stepPos3 = 1.0;\r\n    };\r\n    function updateTransferFunction() {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.height = 20;\r\n        canvas.width = 256;\r\n\r\n        var ctx = canvas.getContext('2d');\r\n\r\n        var grd = ctx.createLinearGradient(0, 0, canvas.width - 1, canvas.height - 1);\r\n        grd.addColorStop(guiControls.stepPos1, guiControls.color1);\r\n        grd.addColorStop(guiControls.stepPos2, guiControls.color2);\r\n        grd.addColorStop(guiControls.stepPos3, guiControls.color3);\r\n\r\n        ctx.fillStyle = grd;\r\n        ctx.fillRect(0, 0, canvas.width - 1, canvas.height - 1);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    var dimensions = new Cesium.Cartesian3(50000, 50000, 50000);\r\n    var boxGeometry = Cesium.BoxGeometry.createGeometry(Cesium.BoxGeometry.fromDimensions({\r\n        dimensions: dimensions,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY\r\n    }));\r\n\r\n    var materialFirstPass = new MeshMaterial({\r\n        vertexShader: Shaders.vertexShaderFirstPass,\r\n        fragmentShader: Shaders.fragmentShaderFirstPass,\r\n        side: MeshMaterial.Sides.BACK,\r\n        uniforms: {\r\n            dimensions: dimensions\r\n        }\r\n    });\r\n    var meshFirstPass = new Mesh(boxGeometry, materialFirstPass);\r\n    var rtTexture = new FramebufferTexture(meshFirstPass);//这里使用FramebufferTexture\r\n    var transferTexture = updateTransferFunction();\r\n    var materialSecondPass = new MeshMaterial({\r\n        vertexShader: Shaders.vertexShaderSecondPass,\r\n        fragmentShader: Shaders.fragmentShaderSecondPass,\r\n        side: MeshMaterial.Sides.FRONT,\r\n        uniforms: {\r\n            alpha: 1,\r\n            dimensions: dimensions,\r\n            tex: rtTexture,\r\n            cubeTex: \"./teapot.raw.png\",\r\n            transferTex: transferTexture,\r\n            steps: guiControls.steps,\r\n            alphaCorrection: guiControls.alphaCorrection\r\n        }\r\n    });\r\n\r\n    var meshSecondPass = new Mesh(boxGeometry, materialSecondPass);\r\n    meshVisualizer.add(meshSecondPass);\r\n*/\r\nfunction FramebufferTexture(mesh, renderTarget, depthTexture) {\r\n    this.mesh = mesh;\r\n\r\n    this.texture = renderTarget;\r\n    this.depthTexture = depthTexture;\r\n    this.framebuffer = null;\r\n    this.ready = false;\r\n    this.readyPromise = Cesium.when.defer();\r\n    if (renderTarget && renderTarget instanceof Cesium.Framebuffer) {\r\n        this.framebuffer = renderTarget;\r\n        this.texture = this.framebuffer._colorTextures[0];\r\n        this.depthTexture = this.framebuffer._depthTexture;\r\n        this.ready = true;\r\n        this.readyPromise.resolve(true);\r\n\r\n    } else {\r\n        this.destroyAttachments = true;\r\n    }\r\n}\r\n/**\r\n * \r\n */\r\nFramebufferTexture.prototype.destroy = function () {\r\n    if (this.destroyAttachments) {\r\n        if (this.texture) {\r\n            this.texture.destroy();\r\n            delete this.texture;\r\n        }\r\n        if (this.depthTexture) {\r\n            this.depthTexture.destroy();\r\n            delete this.depthTexture;\r\n        }\r\n\r\n        if (this.framebuffer) {\r\n            this.framebuffer.destroy();\r\n            delete this.framebuffer;\r\n        }\r\n\r\n        if (this.mesh) {\r\n            this.mesh.destroy();\r\n            delete this.mesh;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default FramebufferTexture;","﻿\r\nimport CSG from '../Util/CSG.js'\r\n/**\r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction GeometryUtils() {\r\n\r\n}\r\n\r\nfunction getAttrs(geo) {\r\n    var attrNames = [];\r\n\r\n    for (var name in geo.attributes) {\r\n        if (geo.attributes.hasOwnProperty(name) && geo.attributes[name]) {\r\n            attrNames.push(name);\r\n        }\r\n    }\r\n    return attrNames\r\n}\r\n\r\nvar scratchPosition;//= new Cesium.Cartesian3();\r\nvar scratchMatrix4;//= new Cesium.Matrix4();\r\nvar scratchRotation;//= new Cesium.Matrix3();\r\nvar scratchOffset;//= new Cesium.Cartesian3();\r\n\r\nvar constantsHasInit = false;\r\nfunction initConstants() {\r\n    if (constantsHasInit) return;\r\n    constantsHasInit = true;\r\n\r\n    scratchPosition = new Cesium.Cartesian3();\r\n    scratchMatrix4 = new Cesium.Matrix4();\r\n    scratchRotation = new Cesium.Matrix3();\r\n    scratchOffset = new Cesium.Cartesian3();\r\n\r\n}\r\n/**\r\n*绕x轴旋转，修改顶点坐标\r\n*@param {Cesium.Geometry}geometry\r\n*@param {Number}angle 弧度\r\n*/\r\nGeometryUtils.rotateX = function (geometry, angle) {\r\n    initConstants();\r\n\r\n    var positions = geometry.attributes.position.values;\r\n\r\n    Cesium.Matrix3.fromRotationX(angle, scratchRotation);\r\n    Cesium.Matrix4.fromRotationTranslation(scratchRotation, Cesium.Cartesian3.ZERO, scratchMatrix4);\r\n\r\n    for (var i = 0; i < positions.length; i += 3) {\r\n        scratchPosition.x = positions[i];\r\n        scratchPosition.y = positions[i + 1];\r\n        scratchPosition.z = positions[i + 2];\r\n        Cesium.Matrix4.multiplyByPoint(scratchMatrix4, scratchPosition, scratchPosition);\r\n        positions[i] = scratchPosition.x;\r\n        positions[i + 1] = scratchPosition.y;\r\n        positions[i + 2] = scratchPosition.z;\r\n    }\r\n\r\n}\r\n/**\r\n*绕y轴旋转，修改顶点坐标\r\n*@param {Cesium.Geometry}geometry\r\n*@param {Number}angle 弧度\r\n*/\r\nGeometryUtils.rotateY = function (geometry, angle) {\r\n    initConstants();\r\n\r\n    var positions = geometry.attributes.position.values;\r\n\r\n    Cesium.Matrix3.fromRotationY(angle, scratchRotation);\r\n    Cesium.Matrix4.fromRotationTranslation(scratchRotation, Cesium.Cartesian3.ZERO, scratchMatrix4);\r\n\r\n    for (var i = 0; i < positions.length; i += 3) {\r\n        scratchPosition.x = positions[i];\r\n        scratchPosition.y = positions[i + 1];\r\n        scratchPosition.z = positions[i + 2];\r\n        Cesium.Matrix4.multiplyByPoint(scratchMatrix4, scratchPosition, scratchPosition);\r\n        positions[i] = scratchPosition.x;\r\n        positions[i + 1] = scratchPosition.y;\r\n        positions[i + 2] = scratchPosition.z;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n*绕z轴旋转，修改顶点坐标\r\n*@param {Cesium.Geometry}geometry\r\n*@param {Number}angle 弧度\r\n*/\r\nGeometryUtils.rotateZ = function (geometry, angle) {\r\n    initConstants();\r\n\r\n    var positions = geometry.attributes.position.values;\r\n\r\n    Cesium.Matrix3.fromRotationZ(angle, scratchRotation);\r\n    Cesium.Matrix4.fromRotationTranslation(scratchRotation, Cesium.Cartesian3.ZERO, scratchMatrix4);\r\n\r\n    for (var i = 0; i < positions.length; i += 3) {\r\n        scratchPosition.x = positions[i];\r\n        scratchPosition.y = positions[i + 1];\r\n        scratchPosition.z = positions[i + 2];\r\n        Cesium.Matrix4.multiplyByPoint(scratchMatrix4, scratchPosition, scratchPosition);\r\n        positions[i] = scratchPosition.x;\r\n        positions[i + 1] = scratchPosition.y;\r\n        positions[i + 2] = scratchPosition.z;\r\n    }\r\n\r\n}\r\n/**\r\n*\r\n*@param {Cesium.Geometry}geometry\r\n*/\r\nGeometryUtils.computeVertexNormals = function (geometry) {\r\n\r\n    var indices = geometry.indices;\r\n    var attributes = geometry.attributes;\r\n    var il = indices.length;\r\n    if (attributes.position) {\r\n\r\n        var positions = attributes.position.values;\r\n\r\n        if (attributes.normal === undefined) {\r\n            attributes.normal = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 3,\r\n                values: new Float32Array(positions.length)\r\n            })\r\n\r\n        } else {\r\n\r\n            // reset existing normals to zero\r\n\r\n            var array = attributes.normal.values;\r\n\r\n            for (var i = 0; i < il; i++) {\r\n\r\n                array[i] = 0;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var normals = attributes.normal.values;\r\n\r\n        var vA, vB, vC;\r\n\r\n        var pA = new Cesium.Cartesian3(), pB = new Cesium.Cartesian3(), pC = new Cesium.Cartesian3();\r\n        var cb = new Cesium.Cartesian3(), ab = new Cesium.Cartesian3();\r\n\r\n        for (var i = 0; i < il; i += 3) {\r\n\r\n            vA = indices[i + 0] * 3;\r\n            vB = indices[i + 1] * 3;\r\n            vC = indices[i + 2] * 3;\r\n\r\n            Cesium.Cartesian3.fromArray(positions, vA, pA);\r\n            Cesium.Cartesian3.fromArray(positions, vB, pB);\r\n            Cesium.Cartesian3.fromArray(positions, vC, pC);\r\n\r\n            Cesium.Cartesian3.subtract(pC, pB, cb);\r\n            Cesium.Cartesian3.subtract(pA, pB, ab);\r\n            Cesium.Cartesian3.cross(cb, ab, cb);\r\n\r\n            normals[vA] += cb.x;\r\n            normals[vA + 1] += cb.y;\r\n            normals[vA + 2] += cb.z;\r\n\r\n            normals[vB] += cb.x;\r\n            normals[vB + 1] += cb.y;\r\n            normals[vB + 2] += cb.z;\r\n\r\n            normals[vC] += cb.x;\r\n            normals[vC + 1] += cb.y;\r\n            normals[vC + 2] += cb.z;\r\n\r\n        }\r\n\r\n        normalizeNormals(geometry);\r\n\r\n        attributes.normal.needsUpdate = true;\r\n\r\n    }\r\n\r\n    return geometry;\r\n}\r\nfunction normalizeNormals(geometry) {\r\n\r\n    var normals = geometry.attributes.normal.values;\r\n\r\n    var x, y, z, n;\r\n\r\n    for (var i = 0; i < normals.length; i += 3) {\r\n\r\n        x = normals[i];\r\n        y = normals[i + 1];\r\n        z = normals[i + 2];\r\n\r\n        n = 1.0 / Math.sqrt(x * x + y * y + z * z);\r\n\r\n        normals[i] = x * n;\r\n        normals[i + 1] = y * n;\r\n        normals[i + 2] = z * n;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n*合并两个或两个以上图形类型（primitiveType），属性数量、名称以及属性值的类型（GeometryAttribute的componentDatatype、componentsPerAttribute等）都一致的几何体\r\n*@param {Array<Cesium.Geometry>}geometries \r\n*@return {Cesium.Geometry}\r\n*/\r\nGeometryUtils.mergeGeometries = function (geometries) {\r\n    if (!geometries || !geometries.length) {\r\n        throw new Error(\"缺少geometries参数\");\r\n    }\r\n\r\n    if (geometries.length == 1) {\r\n        return geometries[0];\r\n    }\r\n    var geometriesAttrs = [];\r\n\r\n    var lengthChanged = false;\r\n    var primitiveTypeChanged = false;\r\n    var primitiveType = geometries[0].primitiveType;\r\n    for (var i = 0; i < geometries.length; i++) {\r\n\r\n        geometriesAttrs[i] = getAttrs(geometries[i]);\r\n        if (i > 0) {\r\n            if (primitiveType != geometries[i].primitiveType) {\r\n                primitiveTypeChanged = true;\r\n                break;\r\n            }\r\n            var lastGeoAttrs = geometriesAttrs[i - 1];\r\n            lengthChanged = lastGeoAttrs.length != geometriesAttrs[i].length;\r\n            if (!lengthChanged) {\r\n\r\n                for (var j = 0; j < lastGeoAttrs.length; j++) {\r\n                    if (lastGeoAttrs[j] != geometriesAttrs[i][j]) {\r\n                        lengthChanged = true;\r\n                        break;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        primitiveType = geometries[i].primitiveType;\r\n        if (lengthChanged || primitiveTypeChanged) {\r\n            break;\r\n        }\r\n    }\r\n    if (primitiveTypeChanged) {\r\n        throw new Error(\"待合并的几何体中primitiveType属性不完全一致\");\r\n    }\r\n    if (lengthChanged) {\r\n        throw new Error(\"待合并的几何体中属性数量和和名称不完全一致\");\r\n    }\r\n    return mergeGeometries(geometries);\r\n\r\n    var newAttrs = {};\r\n    var attrNames = geometriesAttrs[0];\r\n    for (var i = 0; i < attrNames.length; i++) {\r\n        var attrName = attrNames[i];\r\n        var geometry = geometries[0];\r\n        newAttrs[attrName] = {};\r\n        //newAttrs[attrName] = Cesium.clone(geometry.attributes[attrName]);\r\n        for (var n in geometry.attributes[attrName]) {\r\n            if (geometry.attributes[attrName].hasOwnProperty(n)) {\r\n                newAttrs[attrName][n] = geometry.attributes[attrName][n];\r\n            }\r\n        }\r\n        var values = Array.from(newAttrs[attrName].values);\r\n\r\n        for (var j = 1; j < geometries.length; j++) {\r\n            geometry = geometries[j];\r\n            for (var vi = 0; vi < geometry.attributes[attrName].values.length; vi++) {\r\n                values.push(geometry.attributes[attrName].values[vi]);\r\n            }\r\n        }\r\n\r\n        newAttrs[attrName].values = new newAttrs[attrName].values.constructor(values);\r\n    }\r\n    var indices = [];\r\n    var currIndex = 0;\r\n    for (var j = 0; j < geometries.length; j++) {\r\n        var geometry = geometries[0];\r\n        for (var i = 0; i < geometry.indices.length; i++) {\r\n            indices.push(geometry.indices[i] + currIndex);\r\n        }\r\n        currIndex += geometry.attributes.position.values.length / 3;\r\n    }\r\n\r\n    var bs = Cesium.BoundingSphere.fromVertices(newAttrs.position.values);\r\n    var geo = new Cesium.Geometry({\r\n        attributes: newAttrs,\r\n        indices: new Uint32Array(indices),\r\n        primitiveType: geometries[0].primitiveType,\r\n        boundingSphere: bs\r\n    });\r\n    return geo;\r\n}\r\n\r\nfunction mergeGeometries(geometries) {\r\n    if (geometries.length == 1) return geometries[0];\r\n    var attrNames = [];\r\n    var valueArrs = [];\r\n    var valueTypes = [];\r\n    var valueConstructors = [];\r\n    var valueComponents = [];\r\n    var valueNormalizes = [];\r\n    var valueOffsets = [];\r\n    var indices = [];\r\n    var primitiveType;\r\n    var indexOffst = 0;\r\n\r\n    var componentCounts = [];\r\n\r\n    var geometry = geometries[0];\r\n    primitiveType = geometry.primitiveType;\r\n    for (const attrName in geometry.attributes) {\r\n        if (geometry.attributes.hasOwnProperty(attrName) && geometry.attributes[attrName]) {\r\n            const attr = geometry.attributes[attrName];\r\n            attrNames.push(attrName);\r\n\r\n            // valueArrs.push([]);\r\n\r\n            valueComponents.push(attr.componentsPerAttribute);\r\n            valueTypes.push(attr.componentDatatype);\r\n            valueConstructors.push(attr.values.constructor);\r\n            valueNormalizes.push(attr.normalize);\r\n\r\n            componentCounts.push(0);\r\n            valueOffsets.push(0);\r\n        }\r\n    }\r\n    for (let i = 0; i < geometries.length; i++) {\r\n        const geometry = geometries[i];\r\n        for (let j = 0; j < attrNames.length; j++) {\r\n            const attrName = attrNames[j];\r\n            componentCounts[j] += geometry.attributes[attrName].values.length\r\n        }\r\n    }\r\n\r\n    for (let j = 0; j < attrNames.length; j++) {\r\n        valueArrs.push(new valueConstructors[j](componentCounts[j]));\r\n    }\r\n\r\n    for (let i = 0; i < geometries.length; i++) {\r\n        const geometry = geometries[i];\r\n        for (let ai = 0; ai < attrNames.length; ai++) {\r\n            var attrName = attrNames[ai];\r\n            var valueArr = valueArrs[ai];\r\n            var attrValues = geometry.attributes[attrName].values;\r\n            valueArr.set(attrValues, valueOffsets[ai]);\r\n            valueOffsets[ai] += attrValues.length;\r\n        }\r\n\r\n        for (let j = 0; j < geometry.indices.length; j++) {\r\n            const index = geometry.indices[j];\r\n            indices.push(index + indexOffst);\r\n        }\r\n\r\n        indexOffst += geometry.attributes.position.values.length / 3;\r\n    }\r\n\r\n    var attributes = {};\r\n    for (let i = 0; i < attrNames.length; i++) {\r\n        const attrName = attrNames[i];\r\n        attributes[attrName] = {\r\n            values: valueArrs[i],\r\n            componentsPerAttribute: valueComponents[i],\r\n            componentDatatype: valueTypes[i],\r\n            normalize: valueNormalizes[i]\r\n        }\r\n    }\r\n\r\n    var vertexCount = valueArrs[0] / valueComponents[0];\r\n    if (vertexCount < 65535) {\r\n        indices = new Uint16Array(indices);\r\n    } else {\r\n        indices = new Uint32Array(indices);\r\n    }\r\n\r\n    geometry = new Cesium.Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: primitiveType\r\n    })\r\n    return geometry;\r\n}\r\n\r\n/**\r\n*\r\n*@param {Cesium.Geometry}geometry\r\n*@param {Cesium.Cartesian3}offset\r\n*/\r\nGeometryUtils.translate = function (geometry, offset) {\r\n    initConstants()\r\n    if (Array.isArray(offset)) {\r\n        scratchOffset.x = offset[0];\r\n        scratchOffset.y = offset[1];\r\n        scratchOffset.z = offset[2];\r\n    } else {\r\n        Cesium.Cartesian3.clone(offset, scratchOffset);\r\n    }\r\n\r\n    for (var i = 0; i < geometry.attributes.position.values.length; i += 3) {\r\n        geometry.attributes.position.values[i] += scratchOffset.x;\r\n        geometry.attributes.position.values[i + 1] += scratchOffset.y;\r\n        geometry.attributes.position.values[i + 2] += scratchOffset.z;\r\n    }\r\n    //if (geometry.attributes.normal) {\r\n    //    Cesium.GeometryPipeline.computeNormal(geometry);\r\n    //}\r\n}\r\n\r\n/**\r\n*\r\n*@param {TypeArray} array\r\n*@return {Cesium.ComponentDatatype}  \r\n*/\r\nGeometryUtils.getAttributeComponentType = function (array) {\r\n\r\n    var attributeComponentType = Cesium.ComponentDatatype.SHORT;\r\n    if (array instanceof Int8Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.BYTE;\r\n\r\n    } else if (array instanceof Uint8Array || array instanceof Uint8ClampedArray) {\r\n        attributeComponentType = Cesium.ComponentDatatype.UNSIGNED_BYTE;\r\n\r\n    } else if (array instanceof Int16Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.SHORT;\r\n\r\n    } else if (array instanceof Uint16Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.UNSIGNED_SHORT;\r\n\r\n    } else if (array instanceof Int32Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.INT;\r\n\r\n    } else if (array instanceof Uint32Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.UNSIGNED_INT;\r\n\r\n    } else if (array instanceof Float32Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.FLOAT;\r\n\r\n    } else if (array instanceof Float64Array) {\r\n        attributeComponentType = Cesium.ComponentDatatype.DOUBLE;\r\n\r\n    }\r\n\r\n    return attributeComponentType;\r\n\r\n}\r\n\r\n/**\r\n*\r\n*@param {Object}geometry\r\n*@return {Boolean}\r\n*/\r\nGeometryUtils.isGeometry3js = function (geometry) {\r\n    return (typeof THREE !== 'undefined' && (geometry instanceof THREE.Geometry || geometry instanceof THREE.BufferGeometry))\r\n        || (geometry.attributes && geometry.attributes.position && geometry.index)\r\n        || (geometry.vertices && geometry.faces);\r\n}\r\n\r\n/**\r\n *\r\n *@param {THREE.BufferGeometry}geometry \r\n *@private\r\n */\r\nGeometryUtils.parseBufferGeometry3js = function (geometry) {\r\n    // var start = new Date();\r\n\r\n    var attributes = {};\r\n    if (!geometry.attributes.normal) {\r\n        geometry.computeFaceNormals();\r\n    }\r\n    for (var attrName in geometry.attributes) {\r\n\r\n        if (geometry.attributes.hasOwnProperty(attrName)) {\r\n            var attr = geometry.getAttribute(attrName);\r\n            if (attr && attr.array.length > 0) {\r\n\r\n                attributes[attrName] = new Cesium.GeometryAttribute({\r\n                    componentDatatype: GeometryUtils.getAttributeComponentType(attr.array),\r\n                    componentsPerAttribute: attr.itemSize,\r\n                    values: attr.array,\r\n                    normalize: attr.normalized\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n    var indices = [];\r\n    if (!geometry.index && geometry.groups) {\r\n        geometry.groups.forEach(function (group) {\r\n            for (var i = 0; i < group.count; i++) {\r\n                indices.push(i + group.start);\r\n            }\r\n        })\r\n        indices = new Int32Array(indices);\r\n    } else {\r\n        indices = geometry.index.array;\r\n    }\r\n    var cesGeometry = new Cesium.Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: Cesium.PrimitiveType.TRIANGLES\r\n    });\r\n\r\n    return cesGeometry;\r\n}\r\n\r\n/**\r\n*\r\n*@param {THREE.Geometry}geometry3js\r\n*@return {Cesium.Geometry} \r\n*/\r\nGeometryUtils.fromGeometry3js = function (geometry3js) {\r\n\r\n    if (geometry3js.attributes && (geometry3js.index || geometry3js.groups.length)) {\r\n\r\n    } else {\r\n        geometry3js = new THREE.BufferGeometry().fromGeometry(geometry3js);\r\n    }\r\n    var geometry = GeometryUtils.parseBufferGeometry3js(geometry3js);\r\n    //GeometryUtils.computeVertexNormals(geometry);\r\n    Cesium.GeometryPipeline.computeNormal(geometry);\r\n    return geometry;\r\n    var positions = new Float32Array(geometry3js.vertices.length * 3);\r\n    for (var i = 0; i < geometry3js.vertices.length; i++) {\r\n        positions[i * 3] = geometry3js.vertices[i].x;\r\n        if (!geometry3js.up || geometry3js.up.y) {\r\n            positions[i * 3 + 1] = geometry3js.vertices[i].z;\r\n            positions[i * 3 + 2] = geometry3js.vertices[i].y;\r\n        } else {\r\n            positions[i * 3 + 1] = geometry3js.vertices[i].y;\r\n            positions[i * 3 + 2] = geometry3js.vertices[i].z;\r\n        }\r\n    }\r\n    var indices = new Int32Array(geometry3js.faces.length * 3);\r\n    for (var i = 0; i < geometry3js.faces.length; i++) {\r\n        indices[i * 3] = geometry3js.faces[i].a;\r\n        indices[i * 3 + 1] = geometry3js.faces[i].b;\r\n        indices[i * 3 + 2] = geometry3js.faces[i].c;\r\n    }\r\n    var attributes = {};\r\n    attributes.position = new Cesium.GeometryAttribute({\r\n        componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: positions\r\n    });\r\n    var cesGeometry = new Cesium.Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: Cesium.PrimitiveType.TRIANGLES\r\n    });\r\n    return cesGeometry;\r\n}\r\n/**\r\n*\r\n*@param {Cesium.Geometry}geometry\r\n*@return {THREE.Geometry} \r\n*/\r\nGeometryUtils.toGeometry3js = function (geometry) {\r\n    if (typeof THREE === 'undefined') {\r\n        throw new Error(\"THREE 未加载\");\r\n    }\r\n\r\n    var positions = geometry.attributes.position.values;\r\n    var positionIdx = 0;\r\n\r\n    var geometry3js = new THREE.Geometry();\r\n\r\n    for (var i = 0; i < positions.length; i += 3) {\r\n        positionIdx = i * 3;\r\n        geometry3js.vertices.push(\r\n            new THREE.Vector3(positions[positionIdx], positions[positionIdx + 2], positions[positionIdx + 1])\r\n        );\r\n    }\r\n\r\n    for (var i = 0; i < geometry.indices.length; i += 3) {\r\n        var idx1 = geometry.indices[i];\r\n        var idx2 = geometry.indices[i + 1];\r\n        var idx3 = geometry.indices[i + 2];\r\n        geometry3js.faces.push(new THREE.Face3(idx1, idx2, idx3));\r\n    }\r\n\r\n    return geometry3js;\r\n}\r\n\r\n/**\r\n*@param {Cesium.Geometry|THREE.Geometry}geometry\r\n*@param {Cesium.Cartesian3}[offset]\r\n*@return {CSG}\r\n*/\r\nGeometryUtils.toCSG = function (geometry, offset) {\r\n    if (!(typeof THREE === 'undefined')) {\r\n        if (geometry instanceof THREE.Geometry) {\r\n            return GeometryUtils._toCSG3js(geometry, offset);\r\n        }\r\n    }\r\n    if (!offset) {\r\n        offset = { x: 0, y: 0, z: 0 };\r\n    }\r\n    if (!geometry.attributes.normal) {\r\n        geometry = Cesium.GeometryPipeline.computeNormal(geometry);\r\n    }\r\n    if (geometry.primitiveType !== Cesium.PrimitiveType.TRIANGLES) {\r\n        throw new Error(\"暂不支持此类几何体\");\r\n    }\r\n    if (!CSG) {\r\n        throw new Error('CSG 库未加载。请从 https://github.com/evanw/csg.js 获取');\r\n    }\r\n    var faceCount = geometry.indices.length / 3;\r\n    var polygons = [], vertices = [];\r\n    var positions = geometry.attributes.position.values;\r\n    var normals = geometry.attributes.normal.values;\r\n    var normalIdx = 0, positionIdx = 0;\r\n\r\n    for (var i = 0; i < geometry.indices.length; i += 3) {\r\n        vertices = [];\r\n\r\n        var idx1 = geometry.indices[i];\r\n        var idx2 = geometry.indices[i + 1];\r\n        var idx3 = geometry.indices[i + 2];\r\n\r\n        positionIdx = idx1 * 3;\r\n        normalIdx = idx1 * 3;\r\n\r\n        vertices.push(new CSG.Vertex(\r\n            [positions[positionIdx++] + offset.x, positions[positionIdx++] + offset.y, positions[positionIdx++] + offset.z],\r\n            [normals[normalIdx++], normals[normalIdx++], normals[normalIdx++]]\r\n        ));\r\n\r\n        positionIdx = idx2 * 3;\r\n        normalIdx = idx2 * 3;\r\n        vertices.push(new CSG.Vertex(\r\n            [positions[positionIdx++] + offset.x, positions[positionIdx++] + offset.y, positions[positionIdx++] + offset.z],\r\n            [normals[normalIdx++], normals[normalIdx++], normals[normalIdx++]]\r\n        ));\r\n\r\n        positionIdx = idx3 * 3;\r\n        normalIdx = idx3 * 3;\r\n        vertices.push(new CSG.Vertex(\r\n            [positions[positionIdx++] + offset.x, positions[positionIdx++] + offset.y, positions[positionIdx++] + offset.z],\r\n            [normals[normalIdx++], normals[normalIdx++], normals[normalIdx++]]\r\n        ));\r\n        polygons.push(new CSG.Polygon(vertices));\r\n    }\r\n    return CSG.fromPolygons(polygons);\r\n}\r\n/**\r\n*@param {CSG}csg_model\r\n*@param {Boolean}[toGeometry3js=false]\r\n*@return {Cesium.Geometry|THREE.Geometry}\r\n*/\r\nGeometryUtils.fromCSG = function (csg_model, toGeometry3js) {\r\n    if (!(typeof THREE === 'undefined')) {\r\n        if (geometry instanceof THREE.Geometry) {\r\n            return GeometryUtils._fromCSG3js(geometry, offset);\r\n        }\r\n    }\r\n    var i, j, vertices,\r\n        polygons = csg_model.toPolygons();\r\n\r\n    if (!CSG) {\r\n        throw new Error('CSG 库未加载。请从 https://github.com/evanw/csg.js 获取');\r\n    }\r\n\r\n    var positions = [];\r\n    var normals = [];\r\n    var indices = [];\r\n\r\n    for (i = 0; i < polygons.length; i++) {\r\n\r\n        // Vertices\r\n        vertices = [];\r\n        for (j = 0; j < polygons[i].vertices.length; j++) {\r\n            vertices.push(this.getGeometryVertice(positions, normals, polygons[i].vertices[j].pos, polygons[i].plane.normal));\r\n        }\r\n        if (vertices[0] === vertices[vertices.length - 1]) {\r\n            vertices.pop();\r\n        }\r\n\r\n        for (var j = 2; j < vertices.length; j++) {\r\n            indices.push(vertices[0], vertices[j - 1], vertices[j]);\r\n        }\r\n    }\r\n\r\n    positions = new Float32Array(positions);\r\n    normals = new Float32Array(normals);\r\n\r\n    indices = new Int32Array(indices);\r\n    var attributes = {};\r\n    attributes.position = new Cesium.GeometryAttribute({\r\n        componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: positions\r\n    });\r\n    attributes.normal = new Cesium.GeometryAttribute({\r\n        componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: normals\r\n    });\r\n\r\n    var cesGeometry = new Cesium.Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: Cesium.PrimitiveType.TRIANGLES\r\n    });\r\n\r\n    return cesGeometry;\r\n}\r\n\r\nGeometryUtils._toCSG3js = function (three_model, offset, rotation) {\r\n    if (typeof THREE === 'undefined') {\r\n        throw new Error(\"THREE 未加载\");\r\n    }\r\n\r\n    var i, geometry, polygons, vertices, rotation_matrix;\r\n\r\n    if (!CSG) {\r\n        throw 'CSG library not loaded. Please get a copy from https://github.com/evanw/csg.js';\r\n    }\r\n\r\n    if (three_model instanceof THREE.Mesh) {\r\n        geometry = three_model.geometry;\r\n        offset = offset || three_model.position;\r\n        rotation = rotation || three_model.rotation;\r\n    } else if (three_model instanceof THREE.Geometry) {\r\n        geometry = three_model;\r\n        offset = offset || new THREE.Vector3(0, 0, 0);\r\n        rotation = rotation || new THREE.Euler(0, 0, 0);\r\n    } else {\r\n        throw 'Model type not supported.';\r\n    }\r\n    rotation_matrix = new THREE.Matrix4().makeRotationFromEuler(rotation);\r\n\r\n    var polygons = [];\r\n    for (i = 0; i < geometry.faces.length; i++) {\r\n        if (geometry.faces[i] instanceof THREE.Face3) {\r\n\r\n            vertices = [];\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].a].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].b].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].c].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            polygons.push(new CSG.Polygon(vertices));\r\n\r\n        } else if (geometry.faces[i] instanceof THREE.Face4) {\r\n\r\n            vertices = [];\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].a].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].b].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].d].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            polygons.push(new CSG.Polygon(vertices));\r\n\r\n            vertices = [];\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].b].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].c].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            vertices.push(new CSG.Vertex(geometry.vertices[geometry.faces[i].d].clone().add(offset).applyMatrix4(rotation_matrix), [geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z]));\r\n            polygons.push(new CSG.Polygon(vertices));\r\n\r\n        } else {\r\n            throw 'Model contains unsupported face.';\r\n        }\r\n    }\r\n\r\n    return CSG.fromPolygons(polygons);\r\n}\r\n\r\nGeometryUtils._fromCSG3js = function (csg_model) {\r\n    if (typeof THREE === 'undefined') {\r\n        throw new Error(\"THREE 未加载\");\r\n    }\r\n    var i, j, vertices, face,\r\n        three_geometry = new THREE.Geometry(),\r\n        polygons = csg_model.toPolygons();\r\n\r\n    if (!CSG) {\r\n        throw 'CSG library not loaded. Please get a copy from https://github.com/evanw/csg.js';\r\n    }\r\n\r\n    for (i = 0; i < polygons.length; i++) {\r\n\r\n        // Vertices\r\n        vertices = [];\r\n        for (j = 0; j < polygons[i].vertices.length; j++) {\r\n            vertices.push(GeometryUtils._getGeometryVertice3js(three_geometry, polygons[i].vertices[j].pos));\r\n        }\r\n        if (vertices[0] === vertices[vertices.length - 1]) {\r\n            vertices.pop();\r\n        }\r\n\r\n        for (var j = 2; j < vertices.length; j++) {\r\n            face = new THREE.Face3(vertices[0], vertices[j - 1], vertices[j], new THREE.Vector3().copy(polygons[i].plane.normal));\r\n            three_geometry.faces.push(face);\r\n            three_geometry.faceVertexUvs[0].push(new THREE.Vector2());\r\n        }\r\n    }\r\n\r\n    three_geometry.computeBoundingBox();\r\n\r\n    return three_geometry;\r\n}\r\n\r\nGeometryUtils._getGeometryVertice3js = function (geometry, vertice_position) {\r\n    var i;\r\n    for (i = 0; i < geometry.vertices.length; i++) {\r\n        if (geometry.vertices[i].x === vertice_position.x && geometry.vertices[i].y === vertice_position.y && geometry.vertices[i].z === vertice_position.z) {\r\n            // Vertice already exists\r\n            return i;\r\n        }\r\n    };\r\n\r\n    geometry.vertices.push(new THREE.Vector3(vertice_position.x, vertice_position.y, vertice_position.z));\r\n    return geometry.vertices.length - 1;\r\n}\r\n\r\nexport default GeometryUtils;","﻿\r\nimport Rotation from './Rotation.js';\r\nimport RendererUtils from './RendererUtils.js';\r\n\r\n/**\r\n*\r\n*@param {Object|geometry}options   \r\n*@param {Boolean}[options.show=true]  \r\n*@param {Cesium.Cartesian3}[options.position]\r\n*@param {Cesium.Rotation}[options.rotation]\r\n*@param {Cesium.Cartesian3}[options.scale]    \r\n* \r\n*@property {Boolean}show  \r\n*@property {Cesium.Cartesian3}position\r\n*@property {Cesium.Rotation}rotation\r\n*@property {Cesium.Cartesian3}scale   \r\n*@property {Boolean}needUpdate\r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*@example\r\n    \r\n    MeshVisualizer = Cesium.MeshVisualizer;\r\n    Mesh = Cesium.Mesh;\r\n    MeshMaterial = Cesium.MeshMaterial; \r\n    LOD = Cesium.LOD;\r\n\r\n    var center = Cesium.Cartesian3.fromDegrees(homePosition[0], homePosition[1], 50000);\r\n    var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);\r\n\r\n    var meshVisualizer = new MeshVisualizer({\r\n        modelMatrix: modelMatrix,\r\n        up: { z: 1 }\r\n    });\r\n    viewer.scene.primitives.add(meshVisualizer);\r\n\r\n\r\n    var material = new MeshMaterial({\r\n        defaultColor: \"rgba(200,0,0,1.0)\",\r\n        wireframe: true,\r\n        side: MeshMaterial.Sides.FRONT\r\n    });\r\n    var radius = 20000;\r\n    var sphereL0 = Cesium.SphereGeometry.createGeometry(new Cesium.SphereGeometry({\r\n        radius: radius,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY,\r\n        stackPartitions:4,\r\n        slicePartitions: 4\r\n    }));\r\n    var sphereL1 = Cesium.SphereGeometry.createGeometry(new Cesium.SphereGeometry({\r\n        radius: radius,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY,\r\n        stackPartitions: 8,\r\n        slicePartitions: 8\r\n    }));\r\n    var sphereL2 = Cesium.SphereGeometry.createGeometry(new Cesium.SphereGeometry({\r\n        radius: radius,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY,\r\n        stackPartitions: 16,\r\n        slicePartitions: 16\r\n    }));\r\n    var sphereL3 = Cesium.SphereGeometry.createGeometry(new Cesium.SphereGeometry({\r\n        radius: radius,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY,\r\n        stackPartitions: 32,\r\n        slicePartitions: 32\r\n    }));\r\n    var sphereL4 = Cesium.SphereGeometry.createGeometry(new Cesium.SphereGeometry({\r\n        radius: radius,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY,\r\n        stackPartitions: 64,\r\n        slicePartitions: 64\r\n    }));\r\n\r\n    var geometries = [\r\n                [sphereL4, 5],\r\n                [sphereL3, 200],\r\n                [sphereL2, 300],\r\n                [sphereL1, 500],\r\n                [sphereL0, 2000]\r\n    ];\r\n\r\n    var maxAvailableDistance = 10000000;\r\n\r\n    var i, j, mesh, lod;\r\n    var scale = new Cesium.Cartesian3(1, 1, 1);\r\n    for (j = 0; j < 1000; j++) {\r\n\r\n        lod = new LOD();\r\n\r\n        for (i = 0; i < geometries.length; i++) {\r\n\r\n            mesh = new Mesh(geometries[i][0], material);\r\n            mesh.scale = scale;\r\n\r\n            lod.addLevel(mesh, geometries[i][1] * 1000);\r\n        }\r\n        lod.maxAvailableDistance = maxAvailableDistance;\r\n        lod.position.x = 1500000 * (0.5 - Math.random());\r\n        lod.position.y = 1750000 * (0.5 - Math.random());\r\n        lod.position.z = 130000 * (0.5 - Math.random());\r\n\r\n        meshVisualizer.add(lod);\r\n\r\n    }\r\n*/\r\nfunction LOD(options) {\r\n\r\n    options = Cesium.defaultValue(options, {});\r\n\r\n    this.uuid = Cesium.createGuid();\r\n    this.show = Cesium.defaultValue(options.show, true);\r\n    this.maxAvailableDistance = Cesium.defaultValue(options.maxAvailableDistance, Number.MAX_VALUE);\r\n    this._position = Cesium.defaultValue(options.position, new Cesium.Cartesian3(0, 0, 0));\r\n    this._scale = Cesium.defaultValue(options.scale, new Cesium.Cartesian3(1, 1, 1));\r\n    this._rotation = Cesium.defaultValue(options.rotation, { axis: new Cesium.Cartesian3(0, 0, 1), angle: 0 });\r\n    this._rotation = new Rotation(this._rotation.axis, this._rotation.angle);\r\n    this._boundingSphere = new Cesium.BoundingSphere();\r\n    this._needsUpdate = false;\r\n    this._modelMatrixNeedsUpdate = true;\r\n    this._modelMatrix = new Cesium.Matrix4();\r\n    Cesium.Matrix4.clone(Cesium.Matrix4.IDENTITY, this._modelMatrix);\r\n\r\n    this._onNeedUpdateChanged = function () {\r\n        this._modelMatrixNeedsUpdate = true;\r\n    };\r\n    this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n\r\n    this._children = [];\r\n    this._parent = null;\r\n    this.type = 'LOD';\r\n\r\n    Object.defineProperties(this, {\r\n        levels: {\r\n            enumerable: true,\r\n            value: []\r\n        }\r\n    });\r\n\r\n}\r\nfunction removeByValue(arr, val) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i] == val) {\r\n            arr.splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n}\r\nLOD.prototype = {\r\n\r\n    constructor: LOD,\r\n    /**\r\n     *\r\n     *@param {Number}x\r\n     *@param {Number}y\r\n     *@param {Number}z\r\n     */\r\n    setPosition: function (x, y, z) {\r\n        var changed = false;\r\n        if (arguments.length == 1) {\r\n            if (typeof x == 'number') {\r\n                if (x != this._position.x) changed = true;\r\n                this._position.x = x;\r\n            } else if (x instanceof Cesium.Cartesian3) {\r\n                if (x != this._position.x\r\n                    || y != this._position.y\r\n                    || z != this._position.z) {\r\n                    changed = true;\r\n                }\r\n\r\n                this._position.x = x.x;\r\n                this._position.y = x.y;\r\n                this._position.z = x.z;\r\n            }\r\n        }\r\n        if (arguments.length == 2 && typeof y == 'number') {\r\n            if (y != this._position.y) changed = true;\r\n            this._position.y = y;\r\n        }\r\n        if (arguments.length == 3 && typeof z == 'number') {\r\n            if (z != this._position.z) changed = true;\r\n            this._position.z = z;\r\n        }\r\n        if (changed) {\r\n            this._modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n    /**\r\n     *\r\n     *@param {Number}x\r\n     *@param {Number}y\r\n     *@param {Number}z\r\n     */\r\n    setScale: function (x, y, z) {\r\n        var changed = false;\r\n        if (arguments.length == 1) {\r\n            if (typeof x == 'number') {\r\n                if (x != this._scale.x) changed = true;\r\n                this._scale.x = x;\r\n            } else if (x instanceof Cesium.Cartesian3) {\r\n                if (x != this._scale.x\r\n                    || y != this._scale.y\r\n                    || z != this._scale.z) {\r\n                    changed = true;\r\n                }\r\n\r\n                this._scale.x = x.x;\r\n                this._scale.y = x.y;\r\n                this._scale.z = x.z;\r\n            }\r\n        }\r\n        if (arguments.length == 2 && typeof y == 'number') {\r\n            if (y != this._scale.y) changed = true;\r\n            this._scale.y = y;\r\n        }\r\n        if (arguments.length == 3 && typeof z == 'number') {\r\n            if (z != this._scale.z) changed = true;\r\n            this._scale.z = z;\r\n        }\r\n        if (changed) {\r\n            this._modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n\r\n    /**\r\n    *@param {Cesium.Mesh}mesh\r\n    *@param {Number}distance\r\n    */\r\n    addLevel: function (object, distance) {\r\n\r\n        if (distance === undefined) distance = 0;\r\n\r\n        distance = Math.abs(distance);\r\n\r\n        var levels = this.levels;\r\n\r\n        for (var l = 0; l < levels.length; l++) {\r\n\r\n            if (distance < levels[l].distance) {\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        levels.splice(l, 0, { distance: distance, object: object });\r\n        object.parent = this;\r\n        this._children.push(object);\r\n        if (this.levels[0].object.geometry) {\r\n            this._boundingSphere.radius = this.levels[0].object.geometry.boundingSphere.radius;\r\n        } else if (this.levels[0].object.boundingSphere) {\r\n            this._boundingSphere.radius = this.levels[0].object.boundingSphere.radius;\r\n        }\r\n    },\r\n    update: function () {\r\n \r\n\r\n        return function update(parentModelMatrix, frameState) {\r\n\r\n            var levels = this.levels;\r\n\r\n            if (levels.length > 1) {\r\n                if (this._modelMatrixNeedsUpdate) {\r\n\r\n                    RendererUtils.computeModelMatrix(\r\n                        parentModelMatrix,\r\n                        this.position,\r\n                        this.rotation,\r\n                        this.scale,\r\n                        this.modelMatrix\r\n                    );\r\n\r\n                    this._modelMatrixNeedsUpdate = false;\r\n                }\r\n\r\n                Cesium.Matrix4.getTranslation(this.modelMatrix, this._boundingSphere.center);\r\n\r\n                var bs = this._boundingSphere;\r\n                var distance = Math.max(0.0, Cesium.Cartesian3.distance(bs.center, frameState.camera.positionWC) - bs.radius);\r\n\r\n                var show = this.maxAvailableDistance > distance;\r\n\r\n                show = show && frameState.cullingVolume.computeVisibility(this._boundingSphere) !== Cesium.Intersect.OUTSIDE;\r\n                levels[0].object.show = show;\r\n\r\n                for (var i = 1, l = levels.length; i < l; i++) {\r\n\r\n                    if (distance >= levels[i].distance) {\r\n\r\n                        levels[i - 1].object.show = false;\r\n                        levels[i].object.show = show;\r\n\r\n                    } else {\r\n\r\n                        break;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                for (; i < l; i++) {\r\n\r\n                    levels[i].object.show = false;\r\n\r\n                }\r\n            }\r\n        };\r\n\r\n    }(),\r\n    getObjectForDistance: function (distance) {\r\n\r\n        var levels = this.levels;\r\n\r\n        for (var i = 1, l = levels.length; i < l; i++) {\r\n\r\n            if (distance < levels[i].distance) {\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return levels[i - 1].object;\r\n\r\n    }\r\n};\r\n\r\nObject.defineProperties(LOD.prototype, {\r\n    modelMatrix: {\r\n        get: function () {\r\n            return this._modelMatrix;\r\n        }\r\n    },\r\n    parent: {\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        set: function (val) {\r\n            if (val && ((val._children && Array.isArray(val._children)) || (val.children && Array.isArray(val.children)))) {\r\n\r\n                if (this._parent && this._parent != val) {\r\n                    var children = this._parent._children ? this._parent._children : this._parent.children;\r\n                    if (Array.isArray(children)) {\r\n                        removeByValue(children, this);\r\n                    }\r\n                }\r\n                this._parent = val;\r\n                if (typeof this._parent.add === 'function') {\r\n                    this._parent.add(this);\r\n                } else {\r\n                    var children = val._children ? val._children : val.children;\r\n                    children.push(this);\r\n                }\r\n            }\r\n            this._needsUpdate = true;\r\n        }\r\n    },\r\n    children: {\r\n        get: function () {\r\n            return this._children;\r\n        },\r\n        set: function (val) {\r\n            this._children = val;\r\n            this._needsUpdate = true;\r\n        }\r\n    },\r\n    needsUpdate: {\r\n        get: function () {\r\n            return this._needsUpdate;\r\n        },\r\n        set: function (val) {\r\n            this._needsUpdate = val;\r\n        }\r\n    },\r\n    rotation: {\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        set: function (val) {\r\n            if (val != this._rotation) {\r\n                this._rotation = val;\r\n                this._needUpdate = true;\r\n            }\r\n            this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n            this._rotation = val;\r\n            this._rotation.paramChanged.addEventListener(this._onNeedUpdateChanged);\r\n        }\r\n    },\r\n    position: {\r\n        get: function () {\r\n            return this._position;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._position.x || val.y != this._position.y || val.z != this._position.z) {\r\n                this._position = val;\r\n                this._needsUpdate = true;\r\n            }\r\n            this._position = val;\r\n        }\r\n    },\r\n    scale: {\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._scale.x || val.y != this._scale.y || val.z != this._scale.z) {\r\n                this._scale = val;\r\n                this._needsUpdate = true;\r\n            }\r\n            this._scale = val;\r\n        }\r\n    }\r\n});\r\n\r\nexport default LOD;","﻿  \nimport MeshMaterial from './MeshMaterial.js';\n\nvar shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'phong',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points'\n};\n\n/**\n*\n*@constructor\n*@memberof Cesium\n*/\nfunction MaterialUtils() {\n\n}\n\n/**\n*\n*@param {THREE.Material}material3js\n*@return {Cesium.MeshMaterial}\n*/\nMaterialUtils.fromMaterial3js = function (material3js) {\n    if(typeof THREE=='undefined'){\n        throw new Error('Three.js is required.')\n    }\n    var shaderID = shaderIDs[material3js.type];\n    material3js[\"is\" + material3js.type] = true;\n    var shader = THREE.ShaderLib[shaderID];\n\n    if (!shader) {\n        shader = material3js;\n    }\n\n    var material = new MeshMaterial({\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader,\n        uniforms: cloneUniforms(shader.uniforms)\n    });\n\n    material.material3js = material3js;\n    MaterialUtils.updateMaterialFrom3js(material);\n    return material;\n}\n\nfunction cloneUniforms(uniforms3js) {\n    var uniforms = {};\n    for (var i in uniforms3js) {\n        if (uniforms3js.hasOwnProperty(i)) {\n            uniforms[i] = {\n                value: {}\n            };\n            for (var n in uniforms3js[i]) {\n                if (n !== \"value\") {\n                    uniforms[i][n] = uniforms3js[i][n];\n                }\n            }\n            if (uniforms3js[i].t) {\n                switch (uniforms3js[i].t) {\n\n                    default:\n                }\n            }\n\n            bindUniformValue(uniforms[i], uniforms3js[i].value);\n        }\n    }\n    return uniforms;\n}\n\n/**\n*\n*@param {Cesium.MeshMaterial}materialWidth3js\n*@private\n*/\nMaterialUtils.updateMaterialFrom3js = function (materialWidth3js) {\n    if (!materialWidth3js || !materialWidth3js.material3js) {\n        return;\n    }\n\n    var material3js = materialWidth3js.material3js;\n    materialWidth3js.translucent = material3js.transparent;\n\n    materialWidth3js.wireframe = material3js.wireframe;\n\n    var m_uniforms = materialWidth3js.uniforms;\n    var material = materialWidth3js.material3js;\n    if (material.isMeshBasicMaterial ||\n        material.isMeshLambertMaterial ||\n        material.isMeshPhongMaterial ||\n        material.isMeshStandardMaterial ||\n        material.isMeshNormalMaterial ||\n        material.isMeshDepthMaterial) {\n\n        refreshUniformsCommon(m_uniforms, material);\n\n    }\n\n    // refresh single material specific uniforms\n\n    if (material.isLineBasicMaterial) {\n\n        refreshUniformsLine(m_uniforms, material);\n\n    } else if (material.isLineDashedMaterial) {\n\n        refreshUniformsLine(m_uniforms, material);\n        refreshUniformsDash(m_uniforms, material);\n\n    } else if (material.isPointsMaterial) {\n\n        refreshUniformsPoints(m_uniforms, material);\n\n    } else if (material.isMeshLambertMaterial) {\n\n        refreshUniformsLambert(m_uniforms, material);\n\n    } else if (material.isMeshToonMaterial) {\n\n        refreshUniformsToon(m_uniforms, material);\n\n    } else if (material.isMeshPhongMaterial) {\n\n        refreshUniformsPhong(m_uniforms, material);\n\n    } else if (material.isMeshPhysicalMaterial) {\n\n        refreshUniformsPhysical(m_uniforms, material);\n\n    } else if (material.isMeshStandardMaterial) {\n\n        refreshUniformsStandard(m_uniforms, material);\n\n    } else if (material.isMeshDepthMaterial) {\n\n        if (material.displacementMap) {\n\n            bindUniformValue(m_uniforms.displacementMap, material.displacementMap);\n            bindUniformValue(m_uniforms.displacementScale, material.displacementScale);\n            bindUniformValue(m_uniforms.displacementBias, material.displacementBias);\n\n        }\n\n    } else if (material.isMeshNormalMaterial) {\n\n        refreshUniformsNormal(m_uniforms, material);\n\n    } else {\n        for (var i in material.uniforms) {\n            if (material.uniforms.hasOwnProperty(i)) {\n                bindUniformValue(m_uniforms[i], material.uniforms[i].value);\n            }\n        }\n    }\n    //if (material.lights) {\n\n    //    // wire up the material to this renderer's lighting state\n\n    //    //uniforms.ambientLightColor.value = _lights.ambient;\n    //    //uniforms.directionalLights.value = _lights.directional;\n    //    //uniforms.spotLights.value = _lights.spot;\n    //    //uniforms.rectAreaLights.value = _lights.rectArea;\n    //    //uniforms.pointLights.value = _lights.point;\n    //    //uniforms.hemisphereLights.value = _lights.hemi;\n\n    //    //uniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n    //    //uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n    //    //uniforms.spotShadowMap.value = _lights.spotShadowMap;\n    //    //uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n    //    //uniforms.pointShadowMap.value = _lights.pointShadowMap;\n    //    //uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n    //    // TODO (abelnation): add area lights shadow info to uniforms\n\n    //} else {\n    m_uniforms.ambientLightColor = { value: new Cesium.Color(0.06666666666666667, 0.06666666666666667, 0.06666666666666667) };\n    //}\n}\n\n\n\n/**\n *\n *@param {Object}material3js\n *@return {Boolean}\n */\nMaterialUtils.isMaterial3js = function (material3js) {\n    return typeof THREE !== 'undefined' && material3js instanceof THREE.Material;\n}\n// Uniforms (refresh bindUniformValue(uniforms objects)\n\nfunction refreshUniformsCommon(uniforms, material) {\n\n    bindUniformValue(uniforms.opacity, material.opacity);\n\n    bindUniformValue(uniforms.diffuse, material.color);\n\n    if (material.emissive) {\n        var val3js = new material.emissive.constructor().copy(material.emissive).multiplyScalar(material.emissiveIntensity)\n        bindUniformValue(uniforms.emissive, val3js);\n\n    }\n\n    bindUniformValue(uniforms.map, material.map);\n    bindUniformValue(uniforms.specularMap, material.specularMap);\n    bindUniformValue(uniforms.alphaMap, material.alphaMap);\n\n    if (material.lightMap) {\n\n        bindUniformValue(uniforms.lightMap, material.lightMap);\n        bindUniformValue(uniforms.lightMapIntensity, material.lightMapIntensity);\n\n    }\n\n    if (material.aoMap) {\n\n        bindUniformValue(uniforms.aoMap, material.aoMap);\n        bindUniformValue(uniforms.aoMapIntensity, material.aoMapIntensity);\n\n    }\n\n    // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. normal map\n    // 4. bump map\n    // 5. alpha map\n    // 6. emissive map\n\n    var uvScaleMap\n\n    if (material.map) {\n\n        uvScaleMap = material.map\n\n    } else if (material.specularMap) {\n\n        uvScaleMap = material.specularMap\n\n    } else if (material.displacementMap) {\n\n        uvScaleMap = material.displacementMap\n\n    } else if (material.normalMap) {\n\n        uvScaleMap = material.normalMap\n\n    } else if (material.bumpMap) {\n\n        uvScaleMap = material.bumpMap\n\n    } else if (material.roughnessMap) {\n\n        uvScaleMap = material.roughnessMap\n\n    } else if (material.metalnessMap) {\n\n        uvScaleMap = material.metalnessMap\n\n    } else if (material.alphaMap) {\n\n        uvScaleMap = material.alphaMap\n\n    } else if (material.emissiveMap) {\n\n        uvScaleMap = material.emissiveMap\n\n    }\n\n    if (uvScaleMap !== undefined) {\n\n        // backwards compatibility\n        if (uvScaleMap.isWebGLRenderTarget) {\n\n            uvScaleMap = uvScaleMap.texture\n\n        }\n\n        var offset = uvScaleMap.offset\n        var repeat = uvScaleMap.repeat\n\n        bindUniformValue(uniforms.offsetRepeat, offset);\n\n    }\n\n    bindUniformValue(uniforms.envMap, material.envMap);\n\n    // don't flip CubeTexture envMaps, flip everything else:\n    //  WebGLRenderTargetCube will be flipped for backwards compatibility\n    //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n    bindUniformValue(uniforms.flipEnvMap, (!(material.envMap && material.envMap.isCubeTexture)) ? 1 : -1);\n\n    bindUniformValue(uniforms.reflectivity, material.reflectivity);\n    bindUniformValue(uniforms.refractionRatio, material.refractionRatio);\n\n}\n\nfunction refreshUniformsLine(uniforms, material) {\n\n    bindUniformValue(uniforms.diffuse, material.color);\n    bindUniformValue(uniforms.opacity, material.opacity);\n\n}\n\nfunction refreshUniformsDash(uniforms, material) {\n\n    bindUniformValue(uniforms.dashSize, material.dashSize);\n    bindUniformValue(uniforms.totalSize, material.dashSize + material.gapSize);\n    bindUniformValue(uniforms.scale, material.scale);\n\n}\n\nfunction refreshUniformsPoints(uniforms, material) {\n\n    bindUniformValue(uniforms.diffuse, material.color);\n    bindUniformValue(uniforms.opacity, material.opacity);\n    bindUniformValue(uniforms.size, material.size * _pixelRatio);\n    bindUniformValue(uniforms.scale, _height * 0.5);\n\n    bindUniformValue(uniforms.map, material.map);\n\n    if (material.map !== null) {\n\n        var offset = material.map.offset;\n        var repeat = material.map.repeat;\n\n        bindUniformValue(uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y));\n\n    }\n\n}\n\nfunction refreshUniformsFog(uniforms, fog) {\n\n    bindUniformValue(uniforms.fogColor, fog.color);\n\n    if (fog.isFog) {\n\n        bindUniformValue(uniforms.fogNear, fog.near);\n        bindUniformValue(uniforms.fogFar, fog.far);\n\n    } else if (fog.isFogExp2) {\n\n        bindUniformValue(uniforms.fogDensity, fog.density);\n\n    }\n\n}\n\nfunction refreshUniformsLambert(uniforms, material) {\n\n    if (material.emissiveMap) {\n\n        bindUniformValue(uniforms.emissiveMap, material.emissiveMap);\n\n    }\n\n}\n\nfunction refreshUniformsPhong(uniforms, material) {\n\n    bindUniformValue(uniforms.specular, material.specular);\n    bindUniformValue(uniforms.shininess, Math.max(material.shininess, 1e-4)); // to prevent pow( 0.0, 0.0 )\n\n    if (material.emissiveMap) {\n\n        bindUniformValue(uniforms.emissiveMap, material.emissiveMap);\n\n    }\n\n    if (material.bumpMap) {\n\n        bindUniformValue(uniforms.bumpMap, material.bumpMap);\n        bindUniformValue(uniforms.bumpScale, material.bumpScale);\n\n    }\n\n    if (material.normalMap) {\n\n        bindUniformValue(uniforms.normalMap, material.normalMap);\n        bindUniformValue(uniforms.normalScale.value.copy(material.normalScale));\n\n    }\n\n    if (material.displacementMap) {\n\n        bindUniformValue(uniforms.displacementMap, material.displacementMap);\n        bindUniformValue(uniforms.displacementScale, material.displacementScale);\n        bindUniformValue(uniforms.displacementBias, material.displacementBias);\n\n    }\n\n}\n\nfunction refreshUniformsToon(uniforms, material) {\n\n    refreshUniformsPhong(uniforms, material);\n\n    if (material.gradientMap) {\n\n        bindUniformValue(uniforms.gradientMap, material.gradientMap);\n\n    }\n\n}\n\nfunction refreshUniformsStandard(uniforms, material) {\n\n    bindUniformValue(uniforms.roughness, material.roughness);\n    bindUniformValue(uniforms.metalness, material.metalness);\n\n    if (material.roughnessMap) {\n\n        bindUniformValue(uniforms.roughnessMap, material.roughnessMap);\n\n    }\n\n    if (material.metalnessMap) {\n\n        bindUniformValue(uniforms.metalnessMap, material.metalnessMap);\n\n    }\n\n    if (material.emissiveMap) {\n\n        bindUniformValue(uniforms.emissiveMap, material.emissiveMap);\n\n    }\n\n    if (material.bumpMap) {\n\n        bindUniformValue(uniforms.bumpMap, material.bumpMap);\n        bindUniformValue(uniforms.bumpScale, material.bumpScale);\n\n    }\n\n    if (material.normalMap) {\n\n        bindUniformValue(uniforms.normalMap, material.normalMap);\n        bindUniformValue(uniforms.normalScale.value.copy(material.normalScale));\n\n    }\n\n    if (material.displacementMap) {\n\n        bindUniformValue(uniforms.displacementMap, material.displacementMap);\n        bindUniformValue(uniforms.displacementScale, material.displacementScale);\n        bindUniformValue(uniforms.displacementBias, material.displacementBias);\n\n    }\n\n    if (material.envMap) {\n\n        //bindUniformValue(uniforms.envMap, material.envMap); // part of bindUniformValue(uniforms common\n        bindUniformValue(uniforms.envMapIntensity, material.envMapIntensity);\n\n    }\n\n}\n\nfunction refreshUniformsPhysical(uniforms, material) {\n\n    bindUniformValue(uniforms.clearCoat, material.clearCoat);\n    bindUniformValue(uniforms.clearCoatRoughness, material.clearCoatRoughness);\n\n    refreshUniformsStandard(uniforms, material)\n\n}\n\nfunction refreshUniformsNormal(uniforms, material) {\n\n    if (material.bumpMap) {\n\n        bindUniformValue(uniforms.bumpMap, material.bumpMap);\n        bindUniformValue(uniforms.bumpScale, material.bumpScale);\n\n    }\n\n    if (material.normalMap) {\n\n        bindUniformValue(uniforms.normalMap, material.normalMap);\n        bindUniformValue(uniforms.normalScale.value.copy(material.normalScale));\n\n    }\n\n    if (material.displacementMap) {\n\n        bindUniformValue(uniforms.displacementMap, material.displacementMap);\n        bindUniformValue(uniforms.displacementScale, material.displacementScale);\n        bindUniformValue(uniforms.displacementBias, material.displacementBias);\n\n    }\n\n}\n\nfunction bindUniformValue(valCesium, val3js) {\n\n    var type = typeof val3js;\n    if (type === 'undefined') {\n        valCesium.value = undefined;\n        return;\n    }\n    if (val3js === null) {\n        valCesium.value = null; return;\n    }\n    if (typeof valCesium.value !== \"undefined\"\n        && valCesium.value != null\n        && (valCesium.value.constructor\n            && valCesium.value.constructor.clone\n            && val3js.constructor == valCesium.value.constructor)) {\n\n        valCesium.value = valCesium.value.constructor.clone(val3js);\n    } else {\n        switch (type) {\n            case \"number\":\n            case \"string\":\n                valCesium.value = val3js;\n                break;\n            case \"object\":\n                if (val3js instanceof THREE.Vector2) {\n                    if (!valCesium.value.constructor.clone) {\n                        valCesium.value = new Cesium.Cartesian2();\n                    }\n                }\n                if (val3js instanceof THREE.Vector3) {\n                    if (!valCesium.value.constructor.clone) {\n                        valCesium.value = new Cesium.Cartesian3();\n                    }\n                }\n                if (val3js instanceof THREE.Vector4) {\n                    if (!valCesium.value.constructor.clone) {\n                        valCesium.value = new Cesium.Cartesian4();\n                    }\n                }\n                if (val3js instanceof THREE.Matrix3) {\n                    if (!valCesium.value.constructor.clone) {\n                        valCesium.value = new Cesium.Matrix3();\n                    }\n                }\n                if (val3js instanceof THREE.Matrix4) {\n                    if (!valCesium.value.constructor.clone) {\n                        valCesium.value = new Cesium.Matrix4();\n                    }\n                }\n                if (val3js instanceof THREE.Color) {\n                    if (!valCesium.value.constructor.clone) {\n                        valCesium.value = new Cesium.Color(val3js.r, val3js.g, val3js.b, val3js.a);\n                    }\n                } else if (valCesium.value != null && valCesium.value.constructor.clone) {\n                    valCesium.value.constructor.clone(val3js, valCesium.value);\n                } else if (val3js instanceof THREE.Texture) {\n                    if (valCesium.value != val3js.image) {\n                        valCesium.value = val3js.image;\n                        var sampler = {};\n\n                        sampler.magnificationFilter = Cesium.WebGLConstants.LINEAR;\n                        sampler.minificationFilter = Cesium.WebGLConstants.NEAREST_MIPMAP_LINEAR;\n                        sampler.wrapS = Cesium.WebGLConstants.REPEAT;\n                        sampler.wrapT = Cesium.WebGLConstants.REPEAT;\n                        valCesium.sampler = sampler;\n                        valCesium.flipY = val3js.flipY;\n\n                        valCesium.needsUpdate = true;\n                    }\n                } else {\n                    valCesium.value = val3js;\n                }\n                break;\n            default:\n                console.log(\"未知uniform.value类型\");\n                break;\n        }\n    }\n}\n\nexport default MaterialUtils; ","\r\nimport Rotation from './Rotation.js';\r\nimport CSG from '../Util/CSG.js'\r\nimport MeshMaterial from './MeshMaterial.js';\r\nimport GeometryUtils from './GeometryUtils.js';\r\nimport MeshPhongMaterial from './MeshPhongMaterial.js';\r\n\r\n/**\r\n*\r\n*@param {Object|geometry}options \r\n*@param {Cesium.Geometry|Cesium.CSG|THREE.Geometry|THREE.BufferGeometry}options.geometry  \r\n*@param {Cesium.MeshMaterial}options.material  \r\n*@param {Boolean}[options.show=true]  \r\n*@param {Cesium.Cartesian3}[options.position]\r\n*@param {Cesium.Rotation}[options.rotation]\r\n*@param {Cesium.Cartesian3}[options.scale]   \r\n*@param {{modelMatrix:Cesium.Matrix4,show:boolean}[]}[options.instances]\r\n*@param {Cesium.MeshMaterial}[material]\r\n*@param {{modelMatrix:Cesium.Matrix4,show:boolean}[]}[instances]\r\n*@param {{name:string,default:number|Cesium.Cartesian2|Cesium.Cartesian3|Cesium.Cartesian4|Cesium.Color}[]}[instancedAttributes]\r\n*\r\n*@property {Cesium.Geometry}geometry  \r\n*@property {Cesium.MeshMaterial}material\r\n*@property {Boolean}show  \r\n*@property {Cesium.Cartesian3}position\r\n*@property {Cesium.VolumeRendering.Rotation}rotation\r\n*@property {Cesium.Cartesian3}scale   \r\n*@property {Boolean}needUpdate \r\n*@property {Cesium.Mesh|Cesium.LOD}parent \r\n*@property {{modelMatrix:Cesium.Matrix4}[]}instances\r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*@example\r\n    //1.\r\n    var mesh=new Mesh(geomertry,material);\r\n\r\n    //2.\r\n    var mesh2=new Mesh({\r\n        geomertry:geomertry2,\r\n        material:material2,\r\n        position:position2\r\n    });\r\n\r\n*/\r\nfunction Mesh(options) {\r\n    if (Mesh.isGeometrySupported(options)) {\r\n        var geometry = options;\r\n\r\n        options = {\r\n            geometry: geometry,\r\n            material: arguments[1],\r\n            instances: arguments[2],\r\n            instancedAttributes: arguments[3]\r\n        };\r\n    }\r\n    if (!options || !options.geometry) {\r\n        throw new Error(\"geometry是必须参数\");\r\n    }\r\n    if (!Mesh.isGeometrySupported(options.geometry)) {\r\n        throw new Error(\"暂不支持此类型的geometry\");\r\n    }\r\n\r\n    if (GeometryUtils.isGeometry3js(options.geometry)) {\r\n        options.geometry = GeometryUtils.fromGeometry3js(options.geometry);\r\n    } else if (options.geometry instanceof CSG) {\r\n        if (options.geometry.polygons.length == 0) {\r\n            options.show = false;\r\n        }\r\n        options.geometry = CSG.fromCSG(options.geometry);\r\n    } else if (typeof options.geometry.constructor.createGeometry == 'function') {\r\n        options.geometry = options.geometry.constructor.createGeometry(options.geometry);\r\n    }\r\n\r\n    this.uuid = Cesium.createGuid();\r\n    this.show = Cesium.defaultValue(options.show, true);\r\n    this._geometry = options.geometry;\r\n    this._material = Cesium.defaultValue(options.material, new MeshMaterial());\r\n    this._position = Cesium.defaultValue(options.position, new Cesium.Cartesian3(0, 0, 0));\r\n    this._scale = Cesium.defaultValue(options.scale, new Cesium.Cartesian3(1, 1, 1));\r\n    this._rotation = Cesium.defaultValue(options.rotation, { axis: new Cesium.Cartesian3(0, 0, 1), angle: 0 });\r\n    this._rotation = new Rotation(this._rotation.axis, this._rotation.angle);\r\n    this._needsUpdate = false;\r\n    this._modelMatrix = new Cesium.Matrix4();\r\n    Cesium.Matrix4.clone(Cesium.Matrix4.IDENTITY, this._modelMatrix);\r\n\r\n    //用于设置旋转，优先级大于rotation\r\n    this.quaternion = null;\r\n\r\n    this._modelMatrixNeedsUpdate = true;\r\n    this._onNeedUpdateChanged = function () {\r\n        this.modelMatrixNeedsUpdate = true;\r\n    };\r\n    this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n    this._drawCommand = null;\r\n    this._children = [];\r\n    this._parent = null;\r\n    this._instances = null;\r\n    this._center = this._position.clone();\r\n    this.instancedAttributes = options.instancedAttributes || [];\r\n    if (options.instances && options.instances.length) {\r\n        this._instances = [];\r\n        options.instances.forEach(function (instance) {\r\n            this.addInstance(instance);\r\n        }, this);\r\n    }\r\n\r\n    this.userData = {};\r\n\r\n    if (!this._geometry.attributes.normal\r\n        && this.material instanceof MeshPhongMaterial\r\n        && this._geometry.primitiveType == Cesium.PrimitiveType.TRIANGLES\r\n    ) {\r\n        Cesium.GeometryPipeline.computeNormal(this._geometry);\r\n        //GeometryUtils.computeVertexNormals(this._geometry);\r\n    }\r\n\r\n    if (this._material && this._material.addReference) {\r\n        this._material.addReference();\r\n    }\r\n}\r\n\r\nMesh.isGeometrySupported = function (geometry) {\r\n    var supported = (geometry instanceof Cesium.Geometry\r\n        || geometry instanceof CSG\r\n        || typeof geometry.constructor.createGeometry == 'function'\r\n        || GeometryUtils.isGeometry3js(geometry));\r\n    return supported;\r\n}\r\n\r\n/**\r\n * \r\n * @param {object}instance\r\n * @param {Cesium.Matrix4}instance.modelMatrix\r\n * @param {boolean}[instance.show=true]\r\n */\r\nMesh.prototype.addInstance = function (instance) {\r\n    this._instances = this._instances || [];\r\n    instance.show = Cesium.defaultValue(instance.show, true);\r\n    instance.primitive = this;\r\n    instance.boundingSphere = new Cesium.BoundingSphere(new Cesium.Cartesian3(), this.geometry.boundingSphere ? this.geometry.boundingSphere.radius : 0)\r\n\r\n    Cesium.Matrix4.getTranslation(instance.modelMatrix, instance.boundingSphere.center)\r\n\r\n    instance.id = instance.id || Cesium.createGuid();\r\n    instance.instanceId = this._instances.length;\r\n\r\n    this.instancedAttributes.forEach(function (attr) {\r\n        if (!instance[attr.name]) {\r\n            instance[attr.name] = attr.default;\r\n        }\r\n    })\r\n\r\n    this._instances.push(instance);\r\n\r\n    return instance;\r\n}\r\n\r\n/**\r\n*\r\n*@param {Cesium.Mesh|Cesium.LOD}node\r\n*@param {Cesium.Mesh~TraverseCallback}callback\r\n*/\r\nMesh.traverse = function (node, callback) {\r\n    callback(node);\r\n    if (node.children) {\r\n        node.children.forEach(function (child) {\r\n            callback(child);\r\n        })\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *  \r\n * @callback Cesium.Mesh~TraverseCallback\r\n * @param {Cesium.Mesh|Cesium.LOD}node\r\n */\r\n\r\nObject.defineProperties(Mesh.prototype, {\r\n    instances: {\r\n        get: function () {\r\n            return this._instances;\r\n        }\r\n    },\r\n    modelMatrix: {\r\n        get: function () {\r\n            return this._modelMatrix;\r\n        }\r\n    },\r\n    parent: {\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        set: function (val) {\r\n            this._parent = val;\r\n            this.modelMatrixNeedsUpdate = true;\r\n\r\n        }\r\n    },\r\n    modelMatrixNeedsUpdate: {\r\n        get: function () {\r\n            return this._modelMatrixNeedsUpdate;\r\n        },\r\n        set: function (val) {\r\n            this._modelMatrixNeedsUpdate = val;\r\n            if (this._modelMatrixNeedsUpdate) {\r\n                Mesh.traverse(this, function (mesh) {\r\n                    mesh._modelMatrixNeedsUpdate = val;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    children: {\r\n        get: function () {\r\n            return this._children;\r\n        },\r\n        set: function (val) {\r\n            this._children = val;\r\n            this._needsUpdate = true;\r\n        }\r\n    },\r\n    geometry: {\r\n        get: function () {\r\n            return this._geometry;\r\n        },\r\n        set: function (val) {\r\n            this._geometry = val;\r\n            this._needsUpdate = true;\r\n            this.modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n    material: {\r\n        get: function () {\r\n            return this._material;\r\n        },\r\n        set: function (val) {\r\n            this._material = val;\r\n            this._needsUpdate = true;\r\n        }\r\n    },\r\n    needsUpdate: {\r\n        get: function () {\r\n            return this._needsUpdate;\r\n        },\r\n        set: function (val) {\r\n            this._needsUpdate = val;\r\n        }\r\n    },\r\n    rotation: {\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        set: function (val) {\r\n            if (val != this._rotation) {\r\n                this._rotation = val;\r\n                // this._needUpdate = true;\r\n                this.modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n            this._rotation = val;\r\n            this._rotation.paramChanged.addEventListener(this._onNeedUpdateChanged);\r\n        }\r\n    },\r\n    position: {\r\n        get: function () {\r\n            return this._position;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._position.x || val.y != this._position.y || val.z != this._position.z) {\r\n                this._position = val;\r\n                //this._needsUpdate = true;\r\n                this.modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._position = val;\r\n        }\r\n    },\r\n    scale: {\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._scale.x || val.y != this._scale.y || val.z != this._scale.z) {\r\n                this._scale = val;\r\n                // this._needsUpdate = true; \r\n                this.modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._scale = val;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n*@oaram {Cesium.Mesh|Cesium.LOD}child\r\n*/\r\nMesh.prototype.add = function (mesh) {\r\n\r\n    if (mesh.parent !== this) {\r\n        mesh.parent = this;\r\n    }\r\n    this._children.push(mesh);\r\n}\r\n\r\nMesh.prototype.destroy = function () {\r\n    if (material && material.removeReference) {\r\n        material.removeReference();\r\n    }\r\n}\r\n\r\nexport default Mesh;","﻿\r\nimport defineProperty from '../Util/defineProperty.js';\r\n\r\n/**\r\n*\r\n*@param {Object}options\r\n*@param {Object}[options.uniforms]\r\n*@param {Object}[options.uniformStateUsed]\r\n*@param {Boolean}[options.translucent]\r\n*@param {Boolean}[options.wireframe]\r\n*@param {Enum}[options.side=Cesium.MeshMaterial.Sides.DOUBLE]\r\n*@param {String|Cesium.Color}[options.defaultColor=Cesium.Color.WHITE]\r\n*@param {String}[options.vertexShader]\r\n*@param {String}[options.fragmentShader]\r\n*@param {string}[options.pickColorQualifier]\r\n*\r\n*\r\n*@property {Object}uniforms\r\n*@property {Object}uniformStateUsed\r\n*@property {Boolean}translucent\r\n*@property {Boolean}wireframe\r\n*@property {Enum}side\r\n*@property {String|Cesium.Color}defaultColor\r\n*@property {String}vertexShader\r\n*@property {String}fragmentShader\r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction MeshMaterial(options) {\r\n    options = Cesium.defaultValue(options, {});\r\n    options.uniforms = Cesium.defaultValue(options.uniforms, {});\r\n    var that = this;\r\n    this.referenceCount = 0;\r\n    this._disposeCallbacks = [];\r\n\r\n    this._uuid = Cesium.createGuid();\r\n\r\n    function initUniform(srcUniforms) {\r\n        var _uniforms = {};\r\n\r\n        for (var i in srcUniforms) {\r\n            if (srcUniforms.hasOwnProperty(i) && Cesium.defined(srcUniforms[i])) {\r\n                var item = srcUniforms[i];\r\n\r\n                var val = {};\r\n                val.needsUpdate = true;\r\n                val._disposeCallbacks = [];\r\n                val.onDispose = function (disposeCallback) {\r\n                    if (this._disposeCallbacks.indexOf(disposeCallback) == -1) {\r\n                        this._disposeCallbacks.push(disposeCallback);\r\n                    }\r\n                }\r\n                val.destroy = function () {\r\n                    for (var i = 0; i < this._disposeCallbacks.length; i++) {\r\n                        var disposeCallback = this._disposeCallbacks[i];\r\n                        disposeCallback.call(this);\r\n                    }\r\n\r\n                    this._disposeCallbacks.splice(0);\r\n                }\r\n\r\n                if (Array.isArray(item) && item.length >= 3 && item.length <= 4 && typeof item[0] === 'number') {\r\n                    srcUniforms[i] = new Cesium.Color(srcUniforms[i][0], srcUniforms[i][1], srcUniforms[i][2], srcUniforms[i][3]);\r\n                } else if (Cesium.defined(item.value)) {\r\n                    for (var n in item) {\r\n                        if (item.hasOwnProperty(n)) {\r\n                            val[n] = item[n];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (srcUniforms[i].hasOwnProperty(\"uuid\")) {\r\n                    defineProperty(val, \"uuid\", srcUniforms[i].uuid, function (changed, owner) {\r\n                        owner.needsUpdate = changed;\r\n                    });\r\n                } else {\r\n                    defineProperty(val, \"uuid\", Cesium.createGuid(), function (changed, owner) {\r\n                        owner.needsUpdate = changed;\r\n                    });\r\n                }\r\n                if (srcUniforms[i].hasOwnProperty(\"value\")) {\r\n                    defineProperty(val, \"value\", srcUniforms[i].value, function (changed, owner) {\r\n                        owner.needsUpdate = changed;\r\n                    });\r\n                } else {\r\n                    defineProperty(val, \"value\", srcUniforms[i], function (changed, owner) {\r\n                        owner.needsUpdate = changed;\r\n                    });\r\n                }\r\n                _uniforms[i] = val;\r\n                //defineProperty(_uniforms, i, val, function (changed) {\r\n                //    that.needsUpdate = changed;\r\n                //});\r\n            }\r\n        }\r\n        return _uniforms;\r\n    }\r\n    this._defaultColor = Cesium.defaultValue(options.defaultColor, Cesium.Color.WHITE);\r\n    if (typeof this._defaultColor == 'string') {\r\n        this._defaultColor = Cesium.Color.fromCssColorString(this._defaultColor);\r\n    }\r\n\r\n    this._pickedColor = Cesium.defaultValue(options.pickedColor, Cesium.Color.YELLOW);\r\n    if (typeof this._pickedColor == 'string') {\r\n        this._pickedColor = Cesium.Color.fromCssColorString(this._pickedColor);\r\n    }\r\n    this._picked = Cesium.defaultValue(options.picked, 0);\r\n    options.uniforms.pickedColor = this._pickedColor;\r\n    options.uniforms.defaultColor = this._defaultColor;\r\n    options.uniforms.picked = this._picked;\r\n\r\n    this._uniforms = initUniform(options.uniforms);\r\n\r\n    function onPropertyChanged(changed) {\r\n        that.needsUpdate = changed;\r\n    }\r\n\r\n    defineProperty(this, \"translucent\", Cesium.defaultValue(options.translucent, false), onPropertyChanged);\r\n    defineProperty(this, \"wireframe\", Cesium.defaultValue(options.wireframe, false), onPropertyChanged);\r\n    defineProperty(this, \"side\", Cesium.defaultValue(options.side, MeshMaterial.Sides.DOUBLE), onPropertyChanged);\r\n\r\n    defineProperty(this, \"uniformStateUsed\", Cesium.defaultValue(options.uniformStateUsed, [{\r\n        uniformStateName: \"model\",\r\n        glslVarName: \"modelMatrix\"\r\n    }]), onPropertyChanged);\r\n    defineProperty(this, \"uniforms\", this._uniforms, function () {\r\n        that._uniforms = initUniform(that._uniforms);\r\n    });\r\n\r\n\r\n    this._vertexShader = '//#inner\\n void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n}';\r\n    this._fragmentShader = '//#inner' + this._uuid + '\\n uniform float picked;\\n uniform vec4  pickedColor;\\n uniform vec4  defaultColor;\\n void main() {\\ngl_FragColor = defaultColor;\\n if(picked!=0.0){\\ngl_FragColor = pickedColor;}}';// vec4( ' + this._defaultColor.red + ',' + this._defaultColor.green + ',' + this._defaultColor.blue + ',' + this._defaultColor.alpha + ');\\n}';\r\n\r\n    defineProperty(this, \"vertexShader\", Cesium.defaultValue(options.vertexShader, this._vertexShader), onPropertyChanged);\r\n    defineProperty(this, \"fragmentShader\", Cesium.defaultValue(options.fragmentShader, this._fragmentShader), onPropertyChanged);\r\n\r\n    this.depthTest = Cesium.defaultValue(options.depthTest, true);\r\n    this.depthMask = Cesium.defaultValue(options.depthMask, true);\r\n    this.blending = Cesium.defaultValue(options.blending, true);\r\n\r\n    this.allowPick = Cesium.defaultValue(options.allowPick, true);\r\n    this.pickColorQualifier = Cesium.defaultValue(options.pickColorQualifier, 'uniform');\r\n    this.needsUpdate = true;\r\n}\r\n\r\n\r\nObject.defineProperties(MeshMaterial.prototype, {\r\n    uuid: {\r\n        get: function () {\r\n            return this._uuid;\r\n        }\r\n    },\r\n    defaultColor: {\r\n        set: function (val) {\r\n            if (typeof val == 'string') {\r\n                val = Cesium.Color.fromCssColorString(val);\r\n            }\r\n            Cesium.Color.clone(val, this._defaultColor);\r\n        },\r\n        get: function () {\r\n            return this._defaultColor;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n*\r\n*@memberof Cesium.MeshMaterial\r\n*@property {Enum}FRONT\r\n*@property {Enum}BACK\r\n*@property {Enum}DOUBLE\r\n*/\r\nMeshMaterial.Sides = {\r\n    FRONT: 3,\r\n    BACK: 1,\r\n    DOUBLE: 2\r\n}\r\n\r\nMeshMaterial.prototype.onDispose = function (disposeCallback) {\r\n    if (this._disposeCallbacks.indexOf(disposeCallback) == -1) {\r\n        this._disposeCallbacks.push(disposeCallback);\r\n    }\r\n}\r\n\r\nMeshMaterial.prototype.addReference = function () {\r\n    this.referenceCount++\r\n}\r\n\r\nMeshMaterial.prototype.removeReference = function () {\r\n    this.referenceCount--\r\n    if (this.referenceCount <= 0) {\r\n        for (var i = 0; i < this._disposeCallbacks.length; i++) {\r\n            var disposeCallback = this._disposeCallbacks[i];\r\n            disposeCallback.call(this);\r\n        }\r\n\r\n        this._disposeCallbacks.splice(0);\r\n        this.destroy();\r\n    }\r\n}\r\n\r\nMeshMaterial.prototype.destroy = function () {\r\n    for (var key in this._uniforms) {\r\n        if (this._uniforms.hasOwnProperty(key)) {\r\n            this._uniforms.destroy && this._uniforms.destroy()\r\n        }\r\n    }\r\n}\r\nexport default MeshMaterial;","\r\nimport MeshMaterial from './MeshMaterial.js';\r\nimport phong_frag from './Shaders/phong_frag.js';\r\nimport phong_vert from './Shaders/phong_vert.js';\r\n\r\n/**\r\n* \r\n*@constructor\r\n*@memberof Cesium\r\n*@extends Cesium.MeshMaterial\r\n*/\r\nfunction MeshPhongMaterial(options) {\r\n    options = options ? options : {};\r\n\r\n    options.uniforms = options.uniforms ? options.uniforms : {\r\n        shininess: -1,\r\n        emission: [0, 0, 0],\r\n        specular: 0\r\n    };\r\n    options.uniforms.shininess = Cesium.defaultValue(options.uniforms.shininess, 0);\r\n    options.uniforms.emission = Cesium.defaultValue(options.uniforms.emission, [0.2, 0.2, 0.2]);\r\n    options.uniforms.specular = Cesium.defaultValue(options.uniforms.specular, 0);\r\n\r\n    MeshMaterial.apply(this, arguments);\r\n    this.vertexShader = phong_vert;\r\n    this.fragmentShader = phong_frag;\r\n}\r\nMeshPhongMaterial.prototype = Object.create(MeshMaterial.prototype);\r\nexport default MeshPhongMaterial;","﻿\nimport MaterialUtils from './MaterialUtils.js';\nimport GeometryUtils from './GeometryUtils.js';\nimport Mesh from './Mesh.js';\n\n/**\n*\n*@constructor\n*@memberof Cesium\n*/\nfunction MeshUtils() {\n\n}\n\n/**\n*\n*@param {THREE.Mesh}mesh3js\n*@return {Cesium.Mesh}\n*/\nMeshUtils.fromMesh3js = function (mesh3js) {\n    if (!MeshUtils.isMesh3js(mesh3js)) {\n        return undefined;\n    }\n    var geometry = mesh3js.geometry;\n    if (GeometryUtils.isGeometry3js(geometry)) {\n        geometry = GeometryUtils.fromGeometry3js(geometry);\n        //if (mesh3js.material.type === \"MeshNormalMaterial\" || mesh3js.material.type === \"MeshPhongMaterial\") {\n        //    GeometryUtils.computeVertexNormals(geometry)\n        //}\n    }\n    var material = mesh3js.material;\n    if (MaterialUtils.isMaterial3js(material)) {\n        material = MaterialUtils.fromMaterial3js(material);\n    }\n    var mesh = new Mesh({\n        geometry: geometry,\n        material: material,\n        position: mesh3js.position,\n        scale: mesh3js.scale\n    });\n    mesh.quaternion = mesh3js.quaternion;\n    return mesh;\n}\n/**\n *\n *@param {Object}mesh\n *@return {Boolean}\n */\nMeshUtils.isMesh3js = function (mesh) {\n    return typeof THREE !== 'undefined' && mesh instanceof THREE.Mesh;\n}\nexport default MeshUtils; ","\r\nimport RendererUtils from './RendererUtils.js';\r\nimport MeshMaterial from './MeshMaterial.js';\r\nimport ShaderChunk from './Shaders/ShaderChunk.js';\r\nimport Rotation from './Rotation.js';\r\nimport FramebufferTexture from './FramebufferTexture.js';\r\nimport LOD from './LOD.js';\r\nimport ReferenceMesh from './ReferenceMesh.js';\r\nimport TIFFParser from '../ThirdParty/tiff-js/tiff.js';\r\nimport Path from '../Util/Path.js';\r\nimport MaterialUtils from './MaterialUtils.js';\r\nimport MeshUtils from './MeshUtils.js';\r\nimport ShaderUtils from './ShaderUtils.js';\r\n\r\nvar Matrix4;//= Cesium.Matrix4;\r\nvar DrawCommand;//= Cesium.DrawCommand;\r\nvar defined;//= Cesium.defined;\r\nvar GeometryPipeline;//= Cesium.GeometryPipeline;\r\nvar BufferUsage;//= Cesium.BufferUsage;\r\nvar BlendingState;//= Cesium.BlendingState;\r\nvar VertexArray;//= Cesium.VertexArray;\r\nvar ShaderProgram;//= Cesium.ShaderProgram;\r\nvar DepthFunction;//= Cesium.DepthFunction;\r\nvar CullFace;//= Cesium.CullFace;\r\nvar RenderState;//= Cesium.RenderState;\r\nvar defaultValue;//= Cesium.defaultValue;\r\nvar Texture;//= Cesium.Texture;\r\nvar PixelFormat;//= Cesium.PixelFormat; \r\nvar Cartesian3;//= Cesium.Cartesian3;\r\nvar Cartesian2;//= Cesium.Cartesian2;\r\nvar Cartesian4;//= Cesium.Cartesian4; \r\nvar CesiumMath;//= Cesium.Math;\r\nvar Color;//= Cesium.Color;\r\nvar Buffer;//= Cesium.Buffer;\r\nvar ComponentDatatype;//= Cesium.ComponentDatatype;\r\nvar loadArrayBuffer;\r\nvar loadImage;\r\n\r\nvar scratchMatrix;\r\nvar world2localMatrix;\r\nvar surfacePointLocal;\r\nvar rayDir;\r\nvar pos;\r\nvar rayOriginLocal;\r\nvar scratchRay;\r\n\r\nvar constantsHasInit = false;\r\nfunction initConstants() {\r\n    if (constantsHasInit) return;\r\n    constantsHasInit = true;\r\n\r\n    Matrix4 = Cesium.Matrix4;\r\n    DrawCommand = Cesium.DrawCommand;\r\n    defined = Cesium.defined;\r\n    GeometryPipeline = Cesium.GeometryPipeline;\r\n    BufferUsage = Cesium.BufferUsage;\r\n    BlendingState = Cesium.BlendingState;\r\n    VertexArray = Cesium.VertexArray;\r\n    ShaderProgram = Cesium.ShaderProgram;\r\n    DepthFunction = Cesium.DepthFunction;\r\n    CullFace = Cesium.CullFace;\r\n    RenderState = Cesium.RenderState;\r\n    defaultValue = Cesium.defaultValue;\r\n    Texture = Cesium.Texture;\r\n    PixelFormat = Cesium.PixelFormat;\r\n    Cartesian3 = Cesium.Cartesian3;\r\n    Cartesian2 = Cesium.Cartesian2;\r\n    Cartesian4 = Cesium.Cartesian4;\r\n    CesiumMath = Cesium.Math;\r\n    Color = Cesium.Color;\r\n    Buffer = Cesium.Buffer;\r\n    ComponentDatatype = Cesium.ComponentDatatype;\r\n\r\n    // Cesium.loadText = Cesium.Resource.fetchText;\r\n    // Cesium.loadJson = Cesium.Resource.fetchJson;\r\n    // Cesium.loadBlob = Cesium.Resource.fetchBlob;\r\n    loadArrayBuffer = Cesium.loadArrayBuffer || Cesium.Resource.fetchArrayBuffer;\r\n    loadImage = Cesium.loadImage || Cesium.Resource.fetchImage;\r\n\r\n    Cesium.Cartesian3.prototype.set = function (x, y, z) {\r\n        this.x = x; this.y = y; this.z = z;\r\n    }\r\n    Cesium.Cartesian3.prototype.copy = function (src) {\r\n        this.x = src.x; this.y = src.y; this.z = src.z;\r\n    }\r\n\r\n    Cesium.Cartesian2.prototype.set = function (x, y) {\r\n        this.x = x; this.y = y;\r\n    }\r\n    Cesium.Cartesian2.prototype.copy = function (src) {\r\n        this.x = src.x; this.y = src.y;\r\n    }\r\n    Cesium.Quaternion.prototype.set = function (x, y, z, w) {\r\n        this.x = x; this.y = y; this.z = z; this.w = w;\r\n    }\r\n    Cesium.Quaternion.prototype.copy = function (src) {\r\n        this.x = src.x; this.y = src.y; this.z = src.z; this.w = src.w;\r\n    }\r\n\r\n    scratchMatrix = new Matrix4();\r\n    world2localMatrix = new Cesium.Matrix4();\r\n    surfacePointLocal = new Cesium.Cartesian3();\r\n    rayDir = new Cesium.Cartesian3();\r\n    pos = new Cesium.Cartesian3();\r\n    rayOriginLocal = new Cesium.Cartesian3();\r\n    scratchRay = new Cesium.Ray();\r\n}\r\n\r\nfunction getVertexBufferTypedArray(collection) {\r\n\r\n    var instances = collection._availableInstances;\r\n    var instancesLength = instances.length;\r\n    var collectionCenter = collection._center;\r\n\r\n    var vertexSizeInFloats = 12;\r\n\r\n    var bufferData = collection._vertexBufferTypedArray;\r\n    if (!defined(bufferData) || instancesLength * vertexSizeInFloats > bufferData.length) {\r\n        bufferData = new Float32Array(instancesLength * vertexSizeInFloats);\r\n    }\r\n\r\n    // Hold onto the buffer data so we don't have to allocate new memory every frame.\r\n    collection._vertexBufferTypedArray = bufferData;\r\n\r\n    for (var i = 0; i < instancesLength; ++i) {\r\n\r\n        var modelMatrix = instances[i].modelMatrix;\r\n\r\n        // Instance matrix is relative to center\r\n        var instanceMatrix = Matrix4.clone(modelMatrix, scratchMatrix);\r\n        instanceMatrix[12] -= collectionCenter.x;\r\n        instanceMatrix[13] -= collectionCenter.y;\r\n        instanceMatrix[14] -= collectionCenter.z;\r\n\r\n        var offset = i * vertexSizeInFloats;\r\n\r\n        // First three rows of the model matrix\r\n        bufferData[offset + 0] = instanceMatrix[0];\r\n        bufferData[offset + 1] = instanceMatrix[4];\r\n        bufferData[offset + 2] = instanceMatrix[8];\r\n        bufferData[offset + 3] = instanceMatrix[12];\r\n        bufferData[offset + 4] = instanceMatrix[1];\r\n        bufferData[offset + 5] = instanceMatrix[5];\r\n        bufferData[offset + 6] = instanceMatrix[9];\r\n        bufferData[offset + 7] = instanceMatrix[13];\r\n        bufferData[offset + 8] = instanceMatrix[2];\r\n        bufferData[offset + 9] = instanceMatrix[6];\r\n        bufferData[offset + 10] = instanceMatrix[10];\r\n        bufferData[offset + 11] = instanceMatrix[14];\r\n    }\r\n\r\n    return bufferData;\r\n}\r\n\r\nfunction getPickIdBufferTypedArray(collection, context) {\r\n    var i;\r\n    var instances = collection._availableInstances;\r\n    var instancesLength = instances.length\r\n\r\n    var pickIdBuffer = collection._pickIdBufferTypedArray;\r\n    if (!pickIdBuffer || instancesLength * 4 > pickIdBuffer.length) {\r\n        pickIdBuffer = new Uint8Array(instancesLength * 4);\r\n    }\r\n    collection._pickIdBufferTypedArray = pickIdBuffer;\r\n\r\n    for (i = 0; i < instancesLength; ++i) {\r\n        var instance = instances[i];\r\n        var pickId = collection._pickIds[instance.instanceId];\r\n        if (!pickId) {\r\n            pickId = context.createPickId(instance);\r\n            collection._pickIds[instance.instanceId] = pickId;\r\n        }\r\n        var pickColor = pickId.color;\r\n        var offset = i * 4;\r\n        pickIdBuffer[offset] = Color.floatToByte(pickColor.red);\r\n        pickIdBuffer[offset + 1] = Color.floatToByte(pickColor.green);\r\n        pickIdBuffer[offset + 2] = Color.floatToByte(pickColor.blue);\r\n        pickIdBuffer[offset + 3] = Color.floatToByte(pickColor.alpha);\r\n    }\r\n    return pickIdBuffer;\r\n}\r\n\r\nfunction getInstancedAttribTypedArray(collection, instancedAttribute) {\r\n    var i;\r\n    var instances = collection._availableInstances;\r\n    var instancesLength = instances.length;\r\n    var name = instancedAttribute.name;\r\n    var componentsPerAttribute;\r\n    var isColorValue = instancedAttribute.default instanceof Color\r\n    if (typeof instancedAttribute.default == 'number') {\r\n        componentsPerAttribute = 1;\r\n    }\r\n    else if (instancedAttribute.default instanceof Cartesian2) {\r\n        componentsPerAttribute = 2;\r\n    }\r\n    else if (instancedAttribute.default instanceof Cartesian3) {\r\n        componentsPerAttribute = 3;\r\n    }\r\n    else if (instancedAttribute.default instanceof Cartesian4) {\r\n        componentsPerAttribute = 4;\r\n    } else if (isColorValue) {\r\n        componentsPerAttribute = 4;\r\n    }\r\n\r\n    var bufferData = collection['_' + name + 'BufferTypedArray'];\r\n    if (!bufferData || instancesLength * componentsPerAttribute > bufferData.length) {\r\n        if (isColorValue) {\r\n            bufferData = new Uint8Array(instancesLength * componentsPerAttribute);\r\n        }\r\n        else {\r\n            bufferData = new Float32Array(instancesLength * componentsPerAttribute);\r\n        }\r\n    }\r\n    collection['_' + name + 'BufferTypedArray'] = bufferData;\r\n\r\n    if (isColorValue) {\r\n        for (i = 0; i < instancesLength; ++i) {\r\n            var instance = instances[i];\r\n            var val = instance[name];\r\n            var offset = i * componentsPerAttribute;\r\n\r\n            bufferData[offset] = Color.floatToByte(val.red);\r\n            bufferData[offset + 1] = Color.floatToByte(val.green);\r\n            bufferData[offset + 2] = Color.floatToByte(val.blue);\r\n            bufferData[offset + 3] = Color.floatToByte(val.alpha);\r\n        }\r\n    } else if (typeof instancedAttribute.default == 'number') {\r\n        for (i = 0; i < instancesLength; ++i) {\r\n            var instance = instances[i];\r\n            var val = instance[name];\r\n            bufferData[i] = val;\r\n        }\r\n    }\r\n    else if (instancedAttribute.default instanceof Cartesian2) {\r\n\r\n        for (i = 0; i < instancesLength; ++i) {\r\n            var instance = instances[i];\r\n            var val = instance[name];\r\n            var offset = i * componentsPerAttribute;\r\n            bufferData[offset] = val.x;\r\n            bufferData[offset + 1] = val.y;\r\n        }\r\n    }\r\n    else if (instancedAttribute.default instanceof Cartesian3) {\r\n\r\n        for (i = 0; i < instancesLength; ++i) {\r\n            var instance = instances[i];\r\n            var val = instance[name];\r\n            var offset = i * componentsPerAttribute;\r\n            bufferData[offset] = val.x;\r\n            bufferData[offset + 1] = val.y;\r\n            bufferData[offset + 2] = val.z;\r\n        }\r\n    }\r\n    else if (instancedAttribute.default instanceof Cartesian4) {\r\n        for (i = 0; i < instancesLength; ++i) {\r\n            var instance = instances[i];\r\n            var val = instance[name];\r\n            var offset = i * componentsPerAttribute;\r\n            bufferData[offset] = val.x;\r\n            bufferData[offset + 1] = val.y;\r\n            bufferData[offset + 2] = val.z;\r\n            bufferData[offset + 3] = val.w;\r\n        }\r\n    }\r\n    return bufferData;\r\n\r\n}\r\n\r\nfunction createInstancedAttributes(collection, context, vertexArrayAttributes, attributeLocations, maxAttribLocation) {\r\n    var instancedAttributes = collection.instancedAttributes;\r\n    instancedAttributes.forEach(function (instancedAttribute) {\r\n\r\n        var name = instancedAttribute.name\r\n        attributeLocations[name] = ++maxAttribLocation\r\n\r\n        var buffer = Buffer.createVertexBuffer({\r\n            context: context,\r\n            typedArray: getInstancedAttribTypedArray(collection, instancedAttribute),\r\n            usage: BufferUsage.STATIC_DRAW\r\n        });\r\n        instancedAttribute._buffer = buffer;\r\n\r\n        var attribute = {\r\n            index: attributeLocations[instancedAttribute.name],\r\n            vertexBuffer: buffer,\r\n            componentsPerAttribute: 4,\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            normalize: false,\r\n            offsetInBytes: 0,\r\n            strideInBytes: 0,\r\n            instanceDivisor: 1\r\n        }\r\n        if (typeof instancedAttribute.default == 'number') {\r\n            attribute.componentsPerAttribute = 1;\r\n        }\r\n        else if (instancedAttribute.default instanceof Cartesian2) {\r\n            attribute.componentsPerAttribute = 2;\r\n        }\r\n        else if (instancedAttribute.default instanceof Cartesian3) {\r\n            attribute.componentsPerAttribute = 3;\r\n        }\r\n        else if (instancedAttribute.default instanceof Cartesian4) {\r\n            attribute.componentsPerAttribute = 4;\r\n        } else if (instancedAttribute.default instanceof Color) {\r\n            attribute.componentDatatype = ComponentDatatype.UNSIGNED_BYTE;\r\n            attribute.normalize = true;\r\n            attribute.componentsPerAttribute = 4;\r\n        }\r\n\r\n        vertexArrayAttributes.push(attribute);\r\n\r\n    })\r\n\r\n    return maxAttribLocation;\r\n\r\n}\r\n\r\nfunction createVertexBuffer(collection, context) {\r\n    var pickIdBuffer = getPickIdBufferTypedArray(collection, context);\r\n    collection._pickIdBuffer = Buffer.createVertexBuffer({\r\n        context: context,\r\n        typedArray: pickIdBuffer,\r\n        usage: BufferUsage.STATIC_DRAW\r\n    });\r\n    var vertexBufferTypedArray = getVertexBufferTypedArray(collection);\r\n    collection._vertexBuffer = Buffer.createVertexBuffer({\r\n        context: context,\r\n        typedArray: vertexBufferTypedArray,\r\n        usage: BufferUsage.STATIC_DRAW\r\n    });\r\n}\r\n\r\nfunction copyFromBufferView(vertexBuffer, arrayView, offsetInBytes) {\r\n    offsetInBytes = offsetInBytes || 0;\r\n    var gl = vertexBuffer._gl;\r\n    var target = vertexBuffer._bufferTarget;\r\n    gl.bindBuffer(target, vertexBuffer._buffer);\r\n    gl.bufferData(target, arrayView, gl.DYNAMIC_DRAW);\r\n    gl.bindBuffer(target, null);\r\n\r\n}\r\nfunction updateVertexBuffer(collection, context) {\r\n    var vertexBufferTypedArray = getVertexBufferTypedArray(collection);\r\n    copyFromBufferView(collection._vertexBuffer, vertexBufferTypedArray);\r\n\r\n    var pickIdBufferTypedArray = getPickIdBufferTypedArray(collection, context);\r\n    copyFromBufferView(collection._pickIdBuffer, pickIdBufferTypedArray);\r\n\r\n    var instancedAttributes = collection.instancedAttributes;\r\n    instancedAttributes.forEach(function (instancedAttribute) {\r\n        var bufferTypedArray = getInstancedAttribTypedArray(collection, instancedAttribute);\r\n        copyFromBufferView(instancedAttribute._buffer, bufferTypedArray);\r\n    })\r\n}\r\n\r\nfunction createPickIds(collection, context) {\r\n    // PERFORMANCE_IDEA: we could skip the pick buffer completely by allocating\r\n    // a continuous range of pickIds and then converting the base pickId + batchId\r\n    // to RGBA in the shader.  The only consider is precision issues, which might\r\n    // not be an issue in WebGL 2.\r\n    var instances = collection._instances;\r\n    var instancesLength = instances.length;\r\n    var pickIds = new Array(instancesLength);\r\n    for (var i = 0; i < instancesLength; ++i) {\r\n        pickIds[i] = context.createPickId(instances[i]);\r\n    }\r\n    return pickIds;\r\n}\r\n\r\n/**\r\n*\r\n*\r\n*@param {Object}options\r\n*@param {Cesium.Matrix4}[options.modelMatrix=Cesium.Matrix4.IDENTITY]\r\n*@param {Cesium.Cartesian3}[options.up=Cesium.Cartesian3.UNIT_Z]\r\n*@param {Cesium.Cartesian3}[options.position=Cesium.Cartesian3.ZERO]\r\n*@param {Cesium.Cartesian3}[options.scale=new Cartesian3(1, 1, 1)]\r\n*@param {Cesium.Rotation}[options.rotation]\r\n*@param {Boolean}[options.show=true]\r\n*@param {Boolean}[options.showReference=true]\r\n*@param {Cesium.ArrowGeometry}[options.referenceAxisParameter]\r\n*\r\n*@property {Cesium.Matrix4}modelMatrix \r\n*@property {Cesium.Cartesian3}up \r\n*@property {Cesium.Cartesian3}position \r\n*@property {Cesium.Cartesian3}scale \r\n*@property {Cesium.Rotation}rotation \r\n*@property {Boolean}show \r\n*@property {Boolean}showReference\r\n*@property {Boolean}modelMatrixNeedsUpdate\r\n*@property {Cesium.Event}beforeUpdate  \r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*@extends Cesium.Primitive\r\n*\r\n*@example \r\n \r\n    MeshVisualizer = Cesium.MeshVisualizer;\r\n    Mesh = Cesium.Mesh;\r\n    MeshMaterial = Cesium.MeshMaterial; \r\n    FramebufferTexture = Cesium.FramebufferTexture;\r\n\r\n    var center = Cesium.Cartesian3.fromDegrees(homePosition[0], homePosition[1], 50000);\r\n    var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);\r\n\r\n    var meshVisualizer = new MeshVisualizer({\r\n        modelMatrix: modelMatrix,\r\n    });\r\n    viewer.scene.primitives.add(meshVisualizer);\r\n\r\n\r\n    //示例1：Cesium.Geometry+Cesium.MeshMaterial组合\r\n    var box = Cesium.BoxGeometry.createGeometry(Cesium.BoxGeometry.fromDimensions({\r\n        dimensions: new Cesium.Cartesian3(100000, 50000, 50000),\r\n        vertexFormat: Cesium.VertexFormat.POSITION_ONLY\r\n    }));\r\n    \r\n    var material = new MeshMaterial({\r\n        defaultColor: \"rgba(255,0,0,1.0)\",\r\n        wireframe: false,\r\n        side: MeshMaterial.Sides.DOUBLE\r\n    });\r\n    var boxMesh = new Mesh(box, material);\r\n\r\n    meshVisualizer.add(boxMesh);\r\n\r\n    //示例2：Cesium.CSG+Cesium.MeshMaterial组合，可以用Cesium.CSG做布尔运算并渲染运算结果\r\n\r\n    //首先使用Cesium创建球体\r\n     var sphere = new Cesium.SphereGeometry({\r\n         radius: 50000.0,\r\n         vertexFormat: Cesium.VertexFormat.POSITION_ONLY\r\n     });\r\n     sphere = Cesium.SphereGeometry.createGeometry(sphere);\r\n    \r\n     var sphereMesh = new Mesh(sphere, material);\r\n     sphereMesh.position = new Cesium.Cartesian3(100000, 0, 0)\r\n     meshVisualizer.add(sphereMesh);\r\n\r\n     //将球体对象Cesium.SphereGeometry转成Cesium.CSG实例\r\n     sphere = CSG.toCSG(sphere);\r\n     //将盒子对象转成Cesium.CSG实例\r\n     box = CSG.toCSG(box);\r\n\r\n      //做布尔运算\r\n      var subResult = sphere.subtract(box);\r\n      //渲染运算结果\r\n      var subResultMesh = new Mesh(subResult, material);\r\n      subResultMesh.position = new Cesium.Cartesian3(700000, 0, 0)\r\n      meshVisualizer.add(subResultMesh);\r\n\r\n      //示例3：使用帧缓存作纹理,实际应用中如体绘制，风场流场绘制等等都可以运用此技术\r\n\r\n      function createGeometry() {\r\n        var p1 = new Cesium.Cartesian3(-50000, 50000, 100);\r\n        var p2 = new Cesium.Cartesian3(-50000, -50000, 100);\r\n        var p3 = new Cesium.Cartesian3(50000, -50000, 100);\r\n        var p4 = new Cesium.Cartesian3(50000, 50000, 100);\r\n\r\n        var positions = new Float64Array([\r\n          p1.x, p1.y, p1.z,\r\n          p2.x, p2.y, p2.z,\r\n          p3.x, p3.y, p3.z,\r\n          p4.x, p4.y, p4.z\r\n        ]);\r\n        var indices = new Uint16Array([\r\n          0, 1, 3,\r\n          1, 2, 3,\r\n        ]);\r\n        var sts = new Float32Array([\r\n          1, 1,\r\n          1, 0,\r\n          0, 0,\r\n          0, 1\r\n        ]);\r\n        var geometry = new Cesium.Geometry({\r\n            attributes: {\r\n                position: new Cesium.GeometryAttribute({\r\n                    componentDatatype: Cesium.ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute: 3,\r\n                    values: positions\r\n                }),\r\n                st: new Cesium.GeometryAttribute({\r\n                    componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute: 2,\r\n                    values: sts\r\n                })\r\n            },\r\n            indices: indices,\r\n            primitiveType: Cesium.PrimitiveType.TRIANGLES,\r\n            boundingSphere: Cesium.BoundingSphere.fromVertices(positions)\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n    //将上文中的盒子渲染到缓存，作为纹理参与createGeometry（）方法创建的几何体渲染过程\r\n    var framebufferTex = new FramebufferTexture(boxMesh);\r\n    var geometry = createGeometry();\r\n    var customMesh = new Mesh(geometry, new MeshMaterial({\r\n\r\n        uniforms: {\r\n            u_textureMap: framebufferTex//Cesium.buildModuleUrl('Widgets/Images/TerrainProviders/STK.png')\r\n        },\r\n        side: MeshMaterial.Sides.DOUBLE,\r\n        vertexShader : \"\\n\\\r\n            \\n\\\r\n            varying vec3 v_position;\\n\\\r\n            varying vec2 v_st;\\n\\\r\n            \\n\\\r\n            void main(void) \\n\\\r\n            {\\n\\\r\n            vec4 pos = u_modelViewMatrix * vec4(position,1.0);\\n\\\r\n            v_position = pos.xyz;\\n\\\r\n            v_st=st;\\n\\\r\n            gl_Position = u_projectionMatrix * pos;\\n\\\r\n            }\",\r\n        fragmentShader : \"varying vec2 v_st;\\\r\n            uniform sampler2D u_textureMap;\\\r\n            void main()\\\r\n            {\\\r\n            gl_FragColor = texture2D(u_textureMap,v_st);\\n\\\r\n            \\\r\n            }\\\r\n            \"\r\n    }));\r\n    customMesh.position = new Cesium.Cartesian3(100000, 0, 0);\r\n    meshVisualizer.add(customMesh);\r\n*/\r\nfunction MeshVisualizer(options) {\r\n    initConstants();\r\n    options = options || {};\r\n    this._modelMatrix = defaultValue(options.modelMatrix, Matrix4.IDENTITY);\r\n    this._actualModelMatrix = Matrix4.clone(this._modelMatrix);\r\n    this._ready = true;\r\n    this._modelMatrixNeedsUpdate = true;\r\n\r\n    this._isWireframe = false;\r\n    this._up = defaultValue(options.up, new Cartesian3(0, 0, 1));\r\n    this._position = defaultValue(options.position, new Cartesian3(0, 0, 0));\r\n    this._scale = defaultValue(options.scale, new Cartesian3(1, 1, 1));\r\n    this._rotation = defaultValue(options.rotation, { axis: new Cartesian3(0, 0, 1), angle: 0 });\r\n    this._rotation = new Rotation(this._rotation.axis, this._rotation.angle);\r\n    this._rotation.paramChanged.addEventListener(this.onModelMatrixNeedUpdate, this);\r\n\r\n\r\n    this._chidren = [];\r\n    this._debug = false;\r\n    this._show = defaultValue(options.show, true);\r\n\r\n    this._center = new Cartesian3();\r\n    Cesium.Matrix4.getTranslation(this._modelMatrix, this._center);\r\n    this._framebufferTextures = {};\r\n    this._uniformValueCache = {};\r\n    this._textureCache = {};\r\n    this._uniformMaps = {};\r\n    this.referenceMesh = new ReferenceMesh({\r\n        axisParameter: defaultValue(options.referenceAxisParameter, { length: 50000 * 2 }),\r\n        show: defaultValue(options.showReference, false)\r\n    });\r\n    this.add(this.referenceMesh);\r\n    this._pickIds = [];\r\n    this.beforeUpdate = new Cesium.Event();\r\n    this._scene = options.scene;\r\n}\r\n\r\nMeshVisualizer.prototype = {\r\n    /**\r\n    *@param {Cesium.Mesh}mesh\r\n    */\r\n    remove: function (mesh) {\r\n\r\n        for (var i = 0; i < this._chidren.length; i++) {\r\n            if (this._chidren[i] == mesh) {\r\n\r\n                this._chidren.splice(i, 1);\r\n            }\r\n        }\r\n        MeshVisualizer.traverse(mesh, function () {\r\n            if (mesh._drawCommand) {\r\n                mesh._drawCommand.destroy && mesh._drawCommand.destroy();\r\n                // var material = mesh.material;\r\n                // if (material && material.removeReference) {\r\n                //     material.removeReference();\r\n                // }\r\n            }\r\n            if (mesh._actualMesh && mesh._actualMesh._drawCommand) {\r\n                // var material = mesh._actualMesh.material\r\n                // if (material && material.removeReference) {\r\n                //     material.removeReference();\r\n                // }\r\n                var actualMesh = mesh._actualMesh;\r\n                actualMesh && actualMesh.destroy();\r\n\r\n                Cesium.destroyObject(actualMesh._drawCommand);\r\n                Cesium.destroyObject(actualMesh.geometry);\r\n                Cesium.destroyObject(actualMesh);\r\n                // Cesium.destroyObject(mesh);\r\n            }\r\n        }, false);\r\n    },\r\n    /**\r\n    *\r\n    *拾取点，用局部坐标系表达。内部使用Cesium.Scene.pickPosition和MeshVisualizer.worldCoordinatesToLocal实现。\r\n    *@param {Cesium.Cartesian2}windowPosition\r\n    *@param {Cesium.Cartesian3}[result]\r\n    *@return {Cesium.Cartesian3}\r\n    */\r\n    pickPosition: function (windowPosition, result) {\r\n        if (!this._scene) {\r\n            return undefined;\r\n        }\r\n        this._scene.pickPosition(windowPosition, surfacePointLocal);\r\n\r\n        if (!surfacePointLocal) {\r\n            return undefined;\r\n        }\r\n\r\n        this.worldCoordinatesToLocal(surfacePointLocal, surfacePointLocal);\r\n        Cesium.Cartesian3.clone(surfacePointLocal, result);\r\n        return result;\r\n    },\r\n    /**\r\n    *\r\n    *创建一条射线，用局部坐标系表达\r\n    *@param {Cesium.Cartesian2}windowPosition\r\n    *@param {Cesium.Ray}[result]\r\n    *@return {Cesium.Ray}\r\n    */\r\n    getPickRay: function (windowPosition, result) {\r\n        if (!this._scene) {\r\n            return undefined;\r\n        }\r\n        if (!result) {\r\n            result = Cesium.Ray();\r\n        }\r\n        this._scene.camera.getPickRay(windowPosition, scratchRay);//ray用于计算小球发射点位置，这里射线的起始点是世界坐标，不能像Threejs那样直接拿来计算，需要转成局部坐标\r\n        this._scene.pickPosition(windowPosition, surfacePointLocal);//射线和局部场景的交点\r\n\r\n        if (!surfacePointLocal) {\r\n            return undefined;\r\n        }\r\n\r\n        Cesium.Cartesian3.clone(scratchRay.direction, rayDir);\r\n\r\n        //世界坐标转局部坐标\r\n        this.worldCoordinatesToLocal(scratchRay.origin, rayOriginLocal);\r\n        this.worldCoordinatesToLocal(surfacePointLocal, surfacePointLocal);\r\n\r\n        Cesium.Cartesian3.add(rayOriginLocal, rayDir, pos);\r\n        //计算发射方向\r\n        Cesium.Cartesian3.subtract(surfacePointLocal, pos, rayDir);\r\n        Cesium.Cartesian3.clone(surfacePointLocal, result.origin);\r\n        Cesium.Cartesian3.clone(rayDir, result.direction);\r\n        return result;\r\n    },\r\n    /**\r\n    *世界坐标到局部坐标\r\n    *@param {Cesium.Cartesian3}worldCoordinates\r\n    *@param {Cesium.Cartesian3}[result]\r\n    *@return {Cesium.Cartesian3}\r\n    */\r\n    worldCoordinatesToLocal: function (worldCoordinates, result) {\r\n        if (!result) {\r\n            result = new Cartesian3();\r\n        }\r\n        Cesium.Matrix4.inverseTransformation(this._actualModelMatrix, world2localMatrix)\r\n        Cesium.Matrix4.multiplyByPoint(world2localMatrix, worldCoordinates, result);\r\n        return result;\r\n    },\r\n    /**\r\n   *局部坐标到世界坐标\r\n   *@param {Cesium.Cartesian3}localCoordinates\r\n   *@param {Cesium.Cartesian3}[result]\r\n   *@return {Cesium.Cartesian3}\r\n   */\r\n    localToWorldCoordinates: function (localCoordinates, result) {\r\n        if (!result) {\r\n            result = new Cartesian3();\r\n        }\r\n        Cesium.Matrix4.multiplyByPoint(this._actualModelMatrix, localCoordinates, result);\r\n        return result;\r\n    },\r\n    onModelMatrixNeedUpdate: function () {\r\n        this._modelMatrixNeedsUpdate = true;\r\n    },\r\n    /**\r\n     *\r\n     *@param {Number}x\r\n     *@param {Number}y\r\n     *@param {Number}z\r\n     */\r\n    setPosition: function (x, y, z) {\r\n        var changed = false;\r\n        if (arguments.length == 1) {\r\n            if (typeof x == 'number') {\r\n                if (x != this._position.x) changed = true;\r\n                this._position.x = x;\r\n            } else if (x instanceof Cesium.Cartesian3) {\r\n                if (x != this._position.x\r\n                    || y != this._position.y\r\n                    || z != this._position.z) {\r\n                    changed = true;\r\n                }\r\n\r\n                this._position.x = x.x;\r\n                this._position.y = x.y;\r\n                this._position.z = x.z;\r\n            }\r\n        }\r\n        if (arguments.length == 2 && typeof y == 'number') {\r\n            if (y != this._position.y) changed = true;\r\n            this._position.y = y;\r\n        }\r\n        if (arguments.length == 3 && typeof z == 'number') {\r\n            if (z != this._position.z) changed = true;\r\n            this._position.z = z;\r\n        }\r\n        if (changed) {\r\n            this._modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n    /**\r\n     *\r\n     *@param {Number}x\r\n     *@param {Number}y\r\n     *@param {Number}z\r\n     */\r\n    setScale: function (x, y, z) {\r\n        var changed = false;\r\n        if (arguments.length == 1) {\r\n            if (typeof x == 'number') {\r\n                if (x != this._scale.x) changed = true;\r\n                this._scale.x = x;\r\n            } else if (x instanceof Cesium.Cartesian3) {\r\n                if (x != this._scale.x\r\n                    || y != this._scale.y\r\n                    || z != this._scale.z) {\r\n                    changed = true;\r\n                }\r\n\r\n                this._scale.x = x.x;\r\n                this._scale.y = x.y;\r\n                this._scale.z = x.z;\r\n            }\r\n        }\r\n        if (arguments.length == 2 && typeof y == 'number') {\r\n            if (y != this._scale.y) changed = true;\r\n            this._scale.y = y;\r\n        }\r\n        if (arguments.length == 3 && typeof z == 'number') {\r\n            if (z != this._scale.z) changed = true;\r\n            this._scale.z = z;\r\n        }\r\n        if (changed) {\r\n            this._modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n\r\n    toWireframe: function (geometry) {\r\n        if (geometry.primitiveType !== Cesium.PrimitiveType.TRIANGLES\r\n            && geometry.primitiveType !== Cesium.PrimitiveType.TRIANGLE_FAN\r\n            && geometry.primitiveType !== Cesium.PrimitiveType.TRIANGLE_STRIP) {\r\n            return geometry;\r\n        }\r\n        if (!geometry.triangleIndices) {\r\n            geometry.triangleIndices = geometry.indices;\r\n        }\r\n        //if (geometry.lineIndices) {\r\n        //    geometry.indices = geometry.lineIndices;\r\n        //    return geometry;\r\n        //}\r\n        geometry = GeometryPipeline.toWireframe(geometry);\r\n        //geometry.lineIndices = geometry.indices;\r\n        return geometry;\r\n    },\r\n\r\n    restoreFromWireframe: function (geometry) {\r\n        if (geometry.primitiveType == Cesium.PrimitiveType.POINTS) {\r\n            return geometry;\r\n        }\r\n        if (geometry.triangleIndices) {\r\n            geometry.indices = geometry.triangleIndices;\r\n        }\r\n        geometry.primitiveType = Cesium.PrimitiveType.TRIANGLES;\r\n        return geometry;\r\n    },\r\n    createBoundingSphere: function (mesh) {\r\n        var instancesLength = mesh._instances.length;\r\n        var points = new Array(instancesLength);\r\n        for (var i = 0; i < instancesLength; ++i) {\r\n            points[i] = Matrix4.getTranslation(mesh._instances[i].modelMatrix, new Cartesian3());\r\n        }\r\n\r\n        mesh._boundingSphere = Cesium.BoundingSphere.fromPoints(points);\r\n        Cartesian3.clone(mesh._boundingSphere.center, mesh._center);\r\n    },\r\n    /**\r\n    * \r\n    *@param {Cesium.Mesh} mesh\r\n    *@param {Cesium.FrameState} frameState\r\n    *@return {Cesium.DrawCommand} \r\n    *@private\r\n    */\r\n    createDrawCommand: function (mesh, frameState) {\r\n        var that = this;\r\n        var context = frameState.context;\r\n        var geometry = mesh.geometry;\r\n        var material = mesh.material;\r\n\r\n        var pickObject = {\r\n            primitive: this,\r\n            id: mesh\r\n        };\r\n        var pickId = context.createPickId(pickObject);\r\n        that._pickIds.push(pickId);\r\n\r\n        var command = new Cesium.DrawCommand({\r\n            // pickId: mesh.material.allowPick ? pickId : undefined,\r\n            modelMatrix: mesh._instances && mesh._instances.length > 0 ? undefined : Matrix4.clone(this.modelMatrix),\r\n            owner: mesh,\r\n            primitiveType: geometry.primitiveType,\r\n            cull: false,// material.cullFrustum,\r\n            instanceCount: mesh._instances && mesh._instances.length > 0 ? mesh._availableInstances.length : undefined,\r\n            pass: material.translucent ? Cesium.Pass.TRANSLUCENT : Cesium.Pass.OPAQUE\r\n            // , boundingVolume: geometry.boundingSphere\r\n        });\r\n\r\n        var attributeLocations = GeometryPipeline.createAttributeLocations(geometry);\r\n        var vertexArrayAttributes;\r\n        if (mesh._instances && mesh._instances.length) {\r\n            this.createBoundingSphere(mesh);\r\n\r\n            vertexArrayAttributes = []\r\n            var maxAttribLocation = 0;\r\n            for (var location in attributeLocations) {\r\n                if (attributeLocations.hasOwnProperty(location)) {\r\n                    maxAttribLocation = Math.max(maxAttribLocation, attributeLocations[location])\r\n                }\r\n            }\r\n            // command.instanceCount = mesh._instances.length;\r\n            var collection = mesh;\r\n\r\n            collection._pickIds = createPickIds(collection, frameState.context);\r\n\r\n            createVertexBuffer(collection, frameState.context);\r\n\r\n            var vertexSizeInFloats = 12;\r\n            var componentSizeInBytes = ComponentDatatype.getSizeInBytes(ComponentDatatype.FLOAT);\r\n\r\n            var instancedAttributes = {\r\n                czm_modelMatrixRow0: {\r\n                    index: maxAttribLocation + 1,\r\n                    vertexBuffer: collection._vertexBuffer,\r\n                    componentsPerAttribute: 4,\r\n                    componentDatatype: ComponentDatatype.FLOAT,\r\n                    normalize: false,\r\n                    offsetInBytes: 0,\r\n                    strideInBytes: componentSizeInBytes * vertexSizeInFloats,\r\n                    instanceDivisor: 1\r\n                },\r\n                czm_modelMatrixRow1: {\r\n                    index: maxAttribLocation + 2,\r\n                    vertexBuffer: collection._vertexBuffer,\r\n                    componentsPerAttribute: 4,\r\n                    componentDatatype: ComponentDatatype.FLOAT,\r\n                    normalize: false,\r\n                    offsetInBytes: componentSizeInBytes * 4,\r\n                    strideInBytes: componentSizeInBytes * vertexSizeInFloats,\r\n                    instanceDivisor: 1\r\n                },\r\n                czm_modelMatrixRow2: {\r\n                    index: maxAttribLocation + 3,\r\n                    vertexBuffer: collection._vertexBuffer,\r\n                    componentsPerAttribute: 4,\r\n                    componentDatatype: ComponentDatatype.FLOAT,\r\n                    normalize: false,\r\n                    offsetInBytes: componentSizeInBytes * 8,\r\n                    strideInBytes: componentSizeInBytes * vertexSizeInFloats,\r\n                    instanceDivisor: 1\r\n                }\r\n            };\r\n\r\n            instancedAttributes.a_pickColor = {\r\n                index: maxAttribLocation + 4,\r\n                vertexBuffer: collection._pickIdBuffer,\r\n                componentsPerAttribute: 4,\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                normalize: true,\r\n                offsetInBytes: 0,\r\n                strideInBytes: 0,\r\n                instanceDivisor: 1\r\n            };\r\n\r\n\r\n            for (var location in instancedAttributes) {\r\n                if (instancedAttributes.hasOwnProperty(location)) {\r\n                    attributeLocations[location] = ++maxAttribLocation;\r\n                    vertexArrayAttributes.push(instancedAttributes[location])\r\n                }\r\n            }\r\n\r\n            maxAttribLocation = createInstancedAttributes(mesh, frameState.context, vertexArrayAttributes, attributeLocations, maxAttribLocation);\r\n        }\r\n\r\n        command.vertexArray = VertexArray.fromGeometry({\r\n            context: context,\r\n            geometry: geometry,\r\n            attributeLocations: attributeLocations,\r\n            bufferUsage: BufferUsage.STATIC_DRAW,\r\n\r\n            vertexArrayAttributes: vertexArrayAttributes\r\n        });\r\n        if (vertexArrayAttributes && vertexArrayAttributes.length) {\r\n            command._cacehVertexArrayAttributes = vertexArrayAttributes.map(function (a) {\r\n                return a;\r\n            })\r\n        }\r\n        command.vertexArray._attributeLocations = attributeLocations;\r\n\r\n        var pickColor = pickId.color;\r\n\r\n        var shader = {\r\n            fragmentShader: this.getFragmentShaderSource(material),\r\n            vertexShader: this.getVertexShaderSource(mesh, material)\r\n        };\r\n        if (material.material3js) {\r\n            shader = ShaderUtils.processShader3js(material.material3js, shader);\r\n        }\r\n\r\n        if (mesh._instances && mesh._instances.length) {\r\n\r\n            var vs = shader.vertexShader;\r\n            var renamedSource = Cesium.ShaderSource.replaceMain(vs, 'czm_instancing_main');\r\n\r\n            var pickAttribute = 'attribute vec4 a_pickColor;\\n' +\r\n                'varying vec4 czm_pickColor;\\n';\r\n            var pickVarying = '    czm_pickColor = a_pickColor;\\n';\r\n\r\n            vs = //'mat4 czm_instanced_modelView;\\n' +\r\n                'attribute vec4 czm_modelMatrixRow0;\\n' +\r\n                'attribute vec4 czm_modelMatrixRow1;\\n' +\r\n                'attribute vec4 czm_modelMatrixRow2;\\n' +\r\n                'uniform mat4 czm_instanced_modifiedModelView;\\n' +\r\n                // batchIdAttribute +\r\n                pickAttribute +\r\n                renamedSource +\r\n                'void main()\\n' +\r\n                '{\\n' +\r\n                '    modelMatrix = mat4(czm_modelMatrixRow0.x, czm_modelMatrixRow1.x, czm_modelMatrixRow2.x, 0.0, czm_modelMatrixRow0.y, czm_modelMatrixRow1.y, czm_modelMatrixRow2.y, 0.0, czm_modelMatrixRow0.z, czm_modelMatrixRow1.z, czm_modelMatrixRow2.z, 0.0, czm_modelMatrixRow0.w, czm_modelMatrixRow1.w, czm_modelMatrixRow2.w, 1.0);\\n' +\r\n                '    modelViewMatrix = czm_instanced_modifiedModelView * modelMatrix;\\n' +\r\n                '    u_modelMatrix =modelMatrix;\\n' +\r\n                '    u_modelViewMatrix = modelViewMatrix ;\\n' +\r\n                // globalVarsMain +\r\n                '    czm_instancing_main();\\n' +\r\n                pickVarying +\r\n                '}\\n';\r\n            shader.vertexShader = vs;\r\n        }\r\n\r\n\r\n        var vs = new Cesium.ShaderSource({\r\n            sources: [shader.vertexShader]\r\n        });\r\n        var fs = new Cesium.ShaderSource({\r\n            sources: [shader.fragmentShader]\r\n        });\r\n        // if (this.onlySunLighting) {\r\n        //fs.defines.push('ONLY_SUN_LIGHTING');\r\n        // }\r\n        var translucent = material.translucent;\r\n        if (!translucent && context.fragmentDepth) {\r\n            fs.defines.push('WRITE_DEPTH');\r\n        }\r\n        var logDepthExtension =\r\n            '#ifdef GL_EXT_frag_depth \\n' +\r\n            '#extension GL_EXT_frag_depth : enable \\n' +\r\n            '#endif \\n\\n';\r\n\r\n        // if (this._useLogDepth) {\r\n        vs.defines.push('LOG_DEPTH');\r\n        fs.defines.push('LOG_DEPTH');\r\n        //fs.sources.push(logDepthExtension);\r\n        // }\r\n\r\n\r\n        command._sp = ShaderProgram.fromCache({\r\n            context: context,\r\n            fragmentShaderSource: fs,//shader.fragmentShader,//this.getFragmentShaderSource(material),\r\n            vertexShaderSource: vs,//shader.vertexShader,//this.getVertexShaderSource(geometry, material),\r\n            attributeLocations: attributeLocations\r\n        });\r\n        if (!Cesium.defined(mesh.material.allowPick)) {\r\n            mesh.material.allowPick = true;\r\n        }\r\n        if (mesh.material.allowPick) {\r\n\r\n\r\n        }\r\n        command.shaderProgram = command._sp;\r\n        command.renderState = this.getRenderState(material);\r\n\r\n        command._renderStateOptions = material._renderStateOptions;\r\n\r\n        command.uniformMap = this.getUniformMap(material, frameState);\r\n        command.uniformMap.czm_pickColor = function () {\r\n            return pickId.color;\r\n        }\r\n        command.uniformMap.czm_instanced_modifiedModelView = this.getModifiedModelViewCallback(context, mesh);\r\n\r\n        var pickCommand = new Cesium.DrawCommand({\r\n            owner: mesh,\r\n            pickOnly: true,\r\n            instanceCount: mesh._instances && mesh._instances.length > 0 ? mesh._availableInstances.length : undefined,\r\n            modelMatrix: mesh._instances && mesh._instances.length > 0 ? undefined : Matrix4.clone(this.modelMatrix),\r\n            primitiveType: geometry.primitiveType,\r\n            cull: material.cullFrustum,\r\n            pass: material.translucent ? Cesium.Pass.TRANSLUCENT : Cesium.Pass.OPAQUE\r\n        });\r\n        // Recompile shader when material changes\r\n\r\n\r\n\r\n        vs = new Cesium.ShaderSource({\r\n            sources: [shader.vertexShader]\r\n        });\r\n        fs = new Cesium.ShaderSource({\r\n            sources: [shader.fragmentShader],\r\n            pickColorQualifier: mesh._instances && mesh._instances.length ? 'varying' : (material.pickColorQualifier || 'uniform')\r\n        });\r\n        // if (this.onlySunLighting) {\r\n        fs.defines.push('ONLY_SUN_LIGHTING');\r\n        // }\r\n        translucent = material.translucent;\r\n        if (!translucent && context.fragmentDepth) {\r\n            fs.defines.push('WRITE_DEPTH');\r\n        }\r\n\r\n\r\n        // if (this._useLogDepth) {\r\n        vs.defines.push('LOG_DEPTH');\r\n        fs.defines.push('LOG_DEPTH');\r\n        fs.sources.push(logDepthExtension);\r\n        // }\r\n\r\n\r\n\r\n        var _pickSP = ShaderProgram.replaceCache({\r\n            context: context,\r\n            shaderProgram: _pickSP,\r\n            vertexShaderSource: vs,\r\n            fragmentShaderSource: fs,\r\n            attributeLocations: attributeLocations\r\n        });\r\n\r\n        pickCommand.vertexArray = command.vertexArray;\r\n        pickCommand.renderState = this.getRenderState(material);\r\n        pickCommand.shaderProgram = _pickSP;\r\n        pickCommand.uniformMap = command.uniformMap;\r\n        pickCommand.executeInClosestFrustum = translucent;\r\n        mesh._pickCommand = pickCommand;\r\n\r\n        return command;\r\n    },\r\n\r\n    getModifiedModelViewCallback: function (context, mesh) {\r\n        return function () {\r\n            if (!mesh._rtcTransform) {\r\n                mesh._rtcTransform = new Matrix4()\r\n            }\r\n            if (!mesh._rtcModelView) {\r\n                mesh._rtcModelView = new Matrix4()\r\n            }\r\n            Matrix4.multiplyByTranslation(mesh.modelMatrix, mesh._center, mesh._rtcTransform);\r\n\r\n            return Matrix4.multiply(context.uniformState.view, mesh._rtcTransform, mesh._rtcModelView);\r\n        }\r\n    },\r\n    /**\r\n    *\r\n    *\r\n    *@param {THREE.Material}material \r\n    *@return {Cesium.RenderState}frameState\r\n    *@private\r\n    */\r\n    getRenderState_old: function (material) {\r\n        var renderState = {\r\n            blending: material.blending ? BlendingState.ALPHA_BLEND : BlendingState.DISABLED,\r\n            depthTest: {\r\n                enabled: material.depthTest,\r\n                func: DepthFunction.GREATER//LESS\r\n            },\r\n            cull: {\r\n                enabled: true,\r\n                face: CullFace.FRONT\r\n            },\r\n            depthRange: {\r\n                near: 0,\r\n                far: 1\r\n            },\r\n            colorMask: {\r\n                red: true,\r\n                green: true,\r\n                blue: true,\r\n                alpha: true\r\n            },\r\n            depthMask: material.depthMask\r\n        }\r\n        renderState.cull.enabled = true;\r\n        renderState.blending.color = {\r\n            red: 0.0,\r\n            green: 0.0,\r\n            blue: 0.0,\r\n            alpha: 0.0\r\n        };\r\n        switch (material.side) {\r\n            case MeshMaterial.Sides.FRONT:\r\n                renderState.cull.face = CullFace.BACK;\r\n                break;\r\n            case MeshMaterial.Sides.BACK:\r\n                renderState.cull.face = CullFace.FRONT;\r\n                break;\r\n            default:\r\n                renderState.cull.enabled = false;\r\n                break;\r\n        }\r\n\r\n        renderState = RenderState.fromCache(renderState);\r\n\r\n        return renderState;\r\n    },\r\n\r\n    /**\r\n    *\r\n    *\r\n    *@param {THREE.Material}material \r\n    *@return {Cesium.RenderState}frameState\r\n    *@private\r\n    */\r\n    getRenderState: function (material) {\r\n        var renderStateOpts = {\r\n            blending: material.blending ? BlendingState.ALPHA_BLEND : BlendingState.DISABLED,\r\n            depthTest: {\r\n                enabled: material.depthTest,\r\n                func: DepthFunction.LESS\r\n            },\r\n            cull: {\r\n                enabled: false,\r\n                face: CullFace.FRONT\r\n            },\r\n            depthRange: {\r\n                near: 0,\r\n                far: 1\r\n            },\r\n            colorMask: {\r\n                red: true,\r\n                green: true,\r\n                blue: true,\r\n                alpha: true\r\n            },\r\n            depthMask: material.depthMask\r\n        }\r\n        renderStateOpts.cull.enabled = true;\r\n\r\n        // renderStateOpts.blending.color = {\r\n        //     red: 0.0,\r\n        //     green: 0.0,\r\n        //     blue: 0.0,\r\n        //     alpha: 0.0\r\n        // };\r\n        switch (material.side) {\r\n            case MeshMaterial.Sides.FRONT:\r\n                renderStateOpts.cull.face = CullFace.BACK;\r\n                break;\r\n            case MeshMaterial.Sides.BACK:\r\n                renderStateOpts.cull.face = CullFace.FRONT;\r\n                break;\r\n            default:\r\n                renderStateOpts.cull.enabled = false;\r\n                break;\r\n        }\r\n\r\n        material._renderStateOptions = renderStateOpts;\r\n        var renderState = RenderState.fromCache(renderStateOpts);\r\n\r\n        return renderState;\r\n    },\r\n\r\n    /**\r\n    *\r\n    *\r\n    *@param {THREE.Material}material \r\n    *@param {Cesium.FrameState}frameState\r\n    *@private\r\n    */\r\n    getUniformMap: function (material, frameState) {\r\n        if (this._uniformMaps[material.uuid] && !material.needsUpdate) {\r\n            return this._uniformMaps[material.uuid];\r\n\r\n        }\r\n        var uniformMap = {};\r\n        this._uniformMaps[material.uuid] = uniformMap;\r\n\r\n        material.needsUpdate = false;\r\n\r\n        uniformMap.cameraPosition = function () {\r\n            return frameState.camera.position;\r\n        }\r\n        uniformMap.u_cameraPosition = function () {\r\n            return frameState.camera.position;\r\n        }\r\n        //base matrix\r\n        uniformMap.u_normalMatrix = function () {\r\n            return frameState.context.uniformState.normal;\r\n        }\r\n        uniformMap.u_projectionMatrix = function () {\r\n            return frameState.context.uniformState.projection;\r\n        }\r\n\r\n        uniformMap.u_modelViewMatrix = function () {\r\n            return frameState.context.uniformState.modelView;\r\n        }\r\n        //base matrix for threejs\r\n        uniformMap.normalMatrix = function () {\r\n            return frameState.context.uniformState.normal;\r\n        }\r\n        uniformMap.projectionMatrix = function () {\r\n            return frameState.context.uniformState.projection;\r\n        }\r\n\r\n        uniformMap.modelViewMatrix = function () {\r\n            return frameState.context.uniformState.modelView;\r\n        }\r\n        uniformMap.modelMatrix = function () {\r\n            return frameState.context.uniformState.model;\r\n        }\r\n        uniformMap.u_modelMatrix = function () {\r\n            return frameState.context.uniformState.model;\r\n        }\r\n        uniformMap.u_viewMatrix = function () {\r\n            return frameState.context.uniformState.view;\r\n        }\r\n        uniformMap.viewMatrix = function () {\r\n            return frameState.context.uniformState.view;\r\n        }\r\n        uniformMap.logDepthBufFC = function () {\r\n            return 2.0 / (Math.log(frameState.camera.frustum.far + 1.0) / Math.LN2)\r\n        }\r\n\r\n        if (material.uniformStateUsed && material.uniformStateUsed.length) {\r\n            material.uniformStateUsed.forEach(function (item) {\r\n                if (!uniformMap[item.glslVarName]) {\r\n                    if (!frameState.context.uniformState[item.uniformStateName]) {\r\n                        throw new Error(item.uniformStateName + \"不是Cesium引擎的内置对象\");\r\n                    }\r\n                    uniformMap[item.glslVarName] = function () {\r\n                        return frameState.context.uniformState[item.uniformStateName];\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        var that = this;\r\n\r\n        function getCubeTextureCallback(name, item, mtl) {\r\n            var callback = function () {\r\n                if (!that._textureCache[item.uuid] || item.needsUpdate) {\r\n                    if (!callback.allLoaded && !callback.isLoading) {\r\n                        var promises = [];\r\n                        for (var i = 0; i < item.value.length; i++) {\r\n                            if (item.value[i] instanceof HTMLCanvasElement\r\n                                || item.value[i] instanceof HTMLVideoElement\r\n                                || item.value[i] instanceof HTMLImageElement\r\n                            ) {\r\n                                var deferred = Cesium.when.defer();\r\n                                requestAnimationFrame(function () {\r\n                                    deferred.resolve(item.value[i]);\r\n                                });\r\n                                promises.push(deferred);\r\n                            } else if (typeof item.value[i] === 'string') {\r\n                                promises.push(loadImage(item.value[i]));\r\n                            } else {\r\n                                throw Error(name + \"\" + i + \"给定值“ \" + item[i] + \"” 不是有效的纹理图片\");\r\n                            }\r\n                        }\r\n                        callback.isLoading = true;\r\n                        item.needsUpdate = false;\r\n                        Cesium.when.all(promises, function (images) {\r\n\r\n                            that._textureCache[item.uuid] = new Cesium.CubeMap({\r\n                                context: frameState.context,\r\n                                source: {\r\n                                    positiveX: images[0],\r\n                                    negativeX: images[1],\r\n                                    positiveY: images[2],\r\n                                    negativeY: images[3],\r\n                                    positiveZ: images[4],\r\n                                    negativeZ: images[5]\r\n                                }\r\n                            });\r\n                            if (item.onDispose) {\r\n                                item.onDispose(function () {\r\n                                    if (that._textureCache[item.uuid]) {\r\n                                        that._textureCache[item.uuid].destroy();\r\n                                        delete that._textureCache[item.uuid];\r\n                                    }\r\n                                })\r\n                            }\r\n                            callback.allLoaded = true;\r\n                            callback.isLoading = false;\r\n                        });\r\n                    }\r\n                }\r\n                if (callback.allLoaded) {\r\n                    return that._textureCache[item.uuid];\r\n                }\r\n                else {\r\n                    if (!that.defaultCubeMap) {\r\n\r\n                        if (!that.defaultTextureImage) {\r\n                            that.defaultTextureImage = document.createElement(\"canvas\");\r\n                            that.defaultTextureImage.width = 1;\r\n                            that.defaultTextureImage.height = 1;\r\n                        }\r\n\r\n                        that.defaultCubeMap = new Cesium.CubeMap({\r\n                            context: frameState.context,\r\n                            source: {\r\n                                positiveX: that.defaultTextureImage,\r\n                                negativeX: that.defaultTextureImage,\r\n                                positiveY: that.defaultTextureImage,\r\n                                negativeY: that.defaultTextureImage,\r\n                                positiveZ: that.defaultTextureImage,\r\n                                negativeZ: that.defaultTextureImage\r\n                            }\r\n                        });\r\n                    }\r\n                    return that.defaultCubeMap;\r\n                }\r\n            }\r\n            if (callback.allLoaded) {\r\n                callback.allLoaded = false;\r\n                callback.isLoading = false;\r\n            }\r\n            return callback;\r\n        }\r\n\r\n        function createTexture(texture, context) {\r\n\r\n            var TextureMinificationFilter = Cesium.TextureMinificationFilter;\r\n            var TextureWrap = Cesium.TextureWrap;\r\n\r\n            var sampler = texture.sampler;\r\n\r\n            var mipmap =\r\n                (sampler.minificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_NEAREST) ||\r\n                (sampler.minificationFilter === TextureMinificationFilter.NEAREST_MIPMAP_LINEAR) ||\r\n                (sampler.minificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_NEAREST) ||\r\n                (sampler.minificationFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR);\r\n            var requiresNpot = mipmap ||\r\n                (sampler.wrapS === TextureWrap.REPEAT) ||\r\n                (sampler.wrapS === TextureWrap.MIRRORED_REPEAT) ||\r\n                (sampler.wrapT === TextureWrap.REPEAT) ||\r\n                (sampler.wrapT === TextureWrap.MIRRORED_REPEAT);\r\n\r\n            var source = texture.source;\r\n            var npot = !CesiumMath.isPowerOfTwo(source.width) || !CesiumMath.isPowerOfTwo(source.height);\r\n\r\n            if (requiresNpot && npot) {\r\n                // WebGL requires power-of-two texture dimensions for mipmapping and REPEAT/MIRRORED_REPEAT wrap modes.\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = CesiumMath.nextPowerOfTwo(source.width);\r\n                canvas.height = CesiumMath.nextPowerOfTwo(source.height);\r\n                var canvasContext = canvas.getContext('2d');\r\n                canvasContext.drawImage(source, 0, 0, source.width, source.height, 0, 0, canvas.width, canvas.height);\r\n                source = canvas;\r\n            }\r\n\r\n            var tx;\r\n\r\n            if (texture.target === WebGLConstants.TEXTURE_2D) {\r\n                tx = new Texture({\r\n                    context: context,\r\n                    source: source,\r\n                    width: texture.width,\r\n                    height: texture.height,\r\n                    pixelFormat: texture.internalFormat,\r\n                    pixelDatatype: texture.type,\r\n                    sampler: sampler,\r\n                    flipY: texture.flipY\r\n                });\r\n            }\r\n            // GLTF_SPEC: Support TEXTURE_CUBE_MAP.  https://github.com/KhronosGroup/glTF/issues/40\r\n\r\n            if (mipmap) {\r\n                tx.generateMipmap();\r\n            }\r\n\r\n            return tx;\r\n        }\r\n        var WebGLConstants = Cesium.WebGLConstants;\r\n        function onTextureImageLoaded(image, item) {\r\n            var tex;\r\n            if (defined(image.internalFormat)) {\r\n                tex = new Texture({\r\n                    context: frameState.context,\r\n                    pixelFormat: image.internalFormat,\r\n                    width: image.width,\r\n                    height: image.height,\r\n                    source: {\r\n                        arrayBufferView: image.bufferView\r\n                    },\r\n                    flipY: item.flipY\r\n                });\r\n            } else {\r\n                var format = Cesium.WebGLConstants.RGB;\r\n                if (image instanceof HTMLCanvasElement\r\n                    || image instanceof HTMLVideoElement\r\n                    || (image.src && image.src.toLocaleLowerCase().indexOf(\".png\") >= 0)\r\n                ) {\r\n                    format = Cesium.WebGLConstants.RGBA;\r\n                }\r\n                if (item.sampler) {\r\n                    tex = createTexture({\r\n                        context: frameState.context,\r\n                        source: image,\r\n                        target: WebGLConstants.TEXTURE_2D,\r\n                        width: item.width,\r\n                        height: item.height,\r\n                        pixelFormat: format,\r\n                        flipY: item.flipY,\r\n                        sampler: new Cesium.Sampler(item.sampler)\r\n                    }, frameState.context);\r\n                } else {\r\n                    tex = new Texture({\r\n                        context: frameState.context,\r\n                        source: image,\r\n                        target: WebGLConstants.TEXTURE_2D,\r\n                        width: item.width,\r\n                        height: item.height,\r\n                        pixelFormat: format,\r\n                        flipY: Cesium.defined(item.flipY) ? item.flipY : true\r\n                    });\r\n                }\r\n            }\r\n            return tex;\r\n        }\r\n\r\n        function getTextureCallback(item) {\r\n\r\n            var callback = function () {\r\n\r\n                var cacheKey = typeof item.value == 'string' ? item.value : null;\r\n                if (!cacheKey) {\r\n                    if (item.value instanceof HTMLImageElement\r\n                        || item.value instanceof HTMLCanvasElement\r\n                        || item.value instanceof HTMLVideoElement\r\n                    ) {\r\n                        if (!item.value.uuid) {\r\n                            item.value.uuid = item.uuid;\r\n                        }\r\n                        cacheKey = item.value.uuid;\r\n                    }\r\n                }\r\n\r\n                if (!that._textureCache[cacheKey] || item.needsUpdate) {\r\n\r\n                    if (item.value instanceof HTMLImageElement\r\n                        || item.value instanceof HTMLCanvasElement\r\n                        || item.value instanceof HTMLVideoElement\r\n                    ) {\r\n                        var image = item.value;\r\n                        if (!item.value.id) {\r\n                            item.value.id = item.uuid;\r\n                        }\r\n                        that._textureCache[cacheKey] = onTextureImageLoaded(image, item);\r\n\r\n                        if (item.onDispose) {\r\n                            item.onDispose(function () {\r\n                                if (that._textureCache[cacheKey]) {\r\n                                    that._textureCache[cacheKey].destroy();\r\n                                    delete that._textureCache[cacheKey];\r\n                                }\r\n                            })\r\n                        }\r\n                        item.needsUpdate = false;\r\n                        return that._textureCache[cacheKey];\r\n\r\n                    } else {\r\n                        if (typeof item.value === \"string\" && !callback.isLoading) {\r\n                            callback.isLoading = true;\r\n                            item.needsUpdate = false;\r\n                            var url = item.value.toLocaleLowerCase();\r\n\r\n                            var extension = Path.GetExtension(url).slice(1);\r\n                            if (extension == 'tif') {//处理tif纹理\r\n\r\n                                loadArrayBuffer(url).then(function (imageArrayBuffer) {\r\n                                    var tiffParser = new TIFFParser();\r\n                                    var tiffCanvas = tiffParser.parseTIFF(imageArrayBuffer);\r\n                                    if (that._textureCache[cacheKey]) {\r\n                                        that._textureCache[cacheKey].destroy && that._textureCache[cacheKey].destroy();\r\n                                    }\r\n                                    that._textureCache[cacheKey] = onTextureImageLoaded(tiffCanvas, item);\r\n                                    if (item.onDispose) {\r\n                                        item.onDispose(function () {\r\n                                            if (that._textureCache[cacheKey]) {\r\n                                                that._textureCache[cacheKey].destroy();\r\n                                                delete that._textureCache[cacheKey];\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    callback.isLoading = false;\r\n\r\n                                }).otherwise(function (err) {\r\n                                    console.log(err);\r\n                                })\r\n\r\n                            } else {\r\n                                loadImage(item.value).then(function (image) {\r\n                                    if (that._textureCache[cacheKey]) {\r\n                                        that._textureCache[cacheKey].destroy && that._textureCache[cacheKey].destroy();\r\n                                    }\r\n                                    that._textureCache[cacheKey] = onTextureImageLoaded(image, item);\r\n                                    if (item.onDispose) {\r\n                                        item.onDispose(function () {\r\n                                            if (that._textureCache[cacheKey]) {\r\n                                                that._textureCache[cacheKey].destroy();\r\n                                                delete that._textureCache[cacheKey];\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    callback.isLoading = false;\r\n                                }).otherwise(function (err) {\r\n                                    console.log(err);\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (!that.defaultTextureImage) {\r\n                            that.defaultTextureImage = document.createElement(\"canvas\");\r\n                            that.defaultTextureImage.width = 1;\r\n                            that.defaultTextureImage.height = 1;\r\n                        }\r\n                        if (!that.defaultTexture) {\r\n                            that.defaultTexture = new Texture({\r\n                                context: frameState.context,\r\n                                source: that.defaultTextureImage\r\n                            });\r\n                        }\r\n\r\n                        return that.defaultTexture;\r\n                    }\r\n\r\n                } else {\r\n                    return that._textureCache[cacheKey];\r\n                }\r\n\r\n            }\r\n\r\n            return callback;\r\n        }\r\n\r\n        if (material.uniforms) {\r\n\r\n            function setUniformCallbackFunc(name, item) {\r\n\r\n                if (item !== undefined && item !== null) {//item may be 0\r\n                    var isImageUrl = typeof item.value === \"string\";\r\n                    var isCssColorString = typeof item.value === \"string\";\r\n                    if (typeof item.value === \"string\") {\r\n                        var itemLowerCase = item.value.toLocaleLowerCase();\r\n                        if (itemLowerCase.endsWith(\".png\")\r\n                            || itemLowerCase.endsWith(\".jpg\")\r\n                            || itemLowerCase.endsWith(\".bmp\")\r\n                            || itemLowerCase.endsWith(\".gif\")\r\n                            || itemLowerCase.endsWith(\".tif\")\r\n                            || itemLowerCase.endsWith(\".tiff\")\r\n                            || itemLowerCase.startsWith(\"data:\")\r\n                        ) {\r\n                            isImageUrl = true;\r\n                            isCssColorString = false;\r\n                        } else {\r\n                            try {\r\n                                Cesium.Color.fromCssColorString(item.value);\r\n                                isImageUrl = true;\r\n                                isCssColorString = false;\r\n                            } catch (e) {\r\n                                isImageUrl = false;\r\n                                isCssColorString = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (item.value instanceof Cesium.Cartesian2\r\n                        || item.value instanceof Cesium.Cartesian3\r\n                        || item.value instanceof Cesium.Cartesian4\r\n                        || item.value instanceof Cesium.Color\r\n                        || item.value instanceof Cesium.Matrix4\r\n                        || item.value instanceof Cesium.Matrix3\r\n                        || item.value instanceof Cesium.Matrix2\r\n                        || item.value instanceof Cesium.Texture\r\n                        || typeof item.value === \"number\"\r\n                        || typeof item.value === \"boolean\"\r\n                        || isCssColorString\r\n                        || item.isColor\r\n                        || item.isCartesian2\r\n                        || item.isCartesian3\r\n                        || item.isCartesian4\r\n                        || item.value instanceof Cesium.Texture\r\n                        || (item.value instanceof Array && (typeof item.value[0] === 'number'\r\n                            || item.value[0] instanceof Cesium.Cartesian2\r\n                            || item.value[0] instanceof Cesium.Cartesian3\r\n                            || item.value[0] instanceof Cesium.Cartesian4))\r\n                    ) {\r\n                        if (!that._uniformValueCache) {\r\n                            that._uniformValueCache = {};\r\n                        }\r\n                        that._uniformValueCache[item.uuid] = item;\r\n                        if (isCssColorString) {\r\n                            item.value = Cesium.Color.fromCssColorString(item.value);\r\n                        }\r\n                        uniformMap[name] = function () {\r\n                            return that._uniformValueCache[item.uuid].value;\r\n                        }\r\n                        if (item.onDispose) {\r\n                            item.onDispose(function () {\r\n                                if (that._uniformValueCache[item.uuid]) {\r\n                                    delete that._uniformValueCache[item.uuid];\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (item.value instanceof Array && item.value.length == 6) {\r\n                        uniformMap[name] = getCubeTextureCallback(name, item);\r\n                    } else if (isImageUrl\r\n                        || item.value instanceof HTMLImageElement\r\n                        || item.value instanceof HTMLCanvasElement\r\n                        || item.value instanceof HTMLVideoElement\r\n                    ) {\r\n                        uniformMap[name] = getTextureCallback(item, material);\r\n                    } else if (item.value instanceof FramebufferTexture) {\r\n                        if (!that._renderToTextureCommands) {\r\n                            that._renderToTextureCommands = [];\r\n                        }\r\n                        if (!that._framebufferTextures[item.uuid]) {\r\n                            that._framebufferTextures[item.uuid] = item;\r\n                        }\r\n                        uniformMap[name] = function () {\r\n                            if (!that._framebufferTextures[item.uuid]\r\n                                || !that._framebufferTextures[item.uuid].value.texture) {\r\n                                return frameState.context.defaultTexture;\r\n                            }\r\n                            return that._framebufferTextures[item.uuid].value.texture;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            var uniforms = material.uniforms;\r\n            for (var name in uniforms) {\r\n\r\n                if (uniforms.hasOwnProperty(name) && Cesium.defined(uniforms[name].value) && uniforms[name].value != null) {\r\n                    if (Array.isArray(uniforms[name].value) && uniforms[name].value.length == 0) {\r\n                        continue;\r\n                    }\r\n                    var item = uniforms[name];\r\n                    if (item == undefined || item == null) {\r\n                        continue;\r\n                    }\r\n                    setUniformCallbackFunc(name, item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._uniformMaps[material.uuid];\r\n    },\r\n    /**\r\n    *\r\n    *@param {Cesium.Geometry} geometry\r\n    *@param {Cesium.Material} material\r\n    *@return {String}\r\n    *@private  \r\n    */\r\n    getVertexShaderSource: function (mesh, material) {\r\n        var geometry = mesh.geometry;\r\n        function getAttributeDefineBlok(userDefine) {\r\n            var glsl = \"\";\r\n\r\n            var attrs = geometry.attributes;\r\n            for (var name in attrs) {\r\n\r\n                if (attrs.hasOwnProperty(name)) {\r\n                    var attr = attrs[name]\r\n                    if (attr) {\r\n\r\n                        var type = null;\r\n                        switch (attr.componentsPerAttribute) {\r\n                            case 1:\r\n                                type = \"float\";\r\n                                break;\r\n                            case 2:\r\n                                type = \"vec2\";\r\n                                break;\r\n                            case 3:\r\n                                type = \"vec3\";\r\n                                break;\r\n                            case 4:\r\n                                type = \"vec4\";\r\n                                break;\r\n                            default:\r\n                        }\r\n\r\n                        if (type) {\r\n                            if (userDefine.indexOf(\"attribute \" + type + \" \" + name) >= 0) {\r\n                                continue;\r\n                            }\r\n                            glsl += \"attribute \" + type + \" \" + name + \";\\n\";\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n            return glsl;\r\n        }\r\n\r\n        var uniforms = \"\\n\\\r\n        uniform mat4 modelViewMatrix;\\n\\\r\n        uniform mat4 viewMatrix;\\n\\\r\n        uniform mat4 modelMatrix;\\n\\\r\n        uniform mat4 projectionMatrix;\\n\\\r\n        uniform mat3 normalMatrix;\\n\\\r\n        uniform mat4 u_modelViewMatrix;\\n\\\r\n        uniform mat4 u_viewMatrix;\\n\\\r\n        uniform mat4 u_modelMatrix;\\n\\\r\n        uniform mat4 u_projectionMatrix;\\n\\\r\n        uniform mat3 u_normalMatrix;\\n\\\r\n        uniform vec3 cameraPosition;\\n\\\r\n        uniform vec3 u_cameraPosition;\\n\";\r\n\r\n        var innerUniforms = [\r\n\r\n            mesh._instances && mesh._instances.length > 0 ? 'mat4 modelViewMatrix' : \"uniform mat4 modelViewMatrix\",\r\n            mesh._instances && mesh._instances.length > 0 ? 'mat4 modelMatrix' : \"uniform mat4 modelMatrix\",\r\n            \"uniform mat4 projectionMatrix\",\r\n            \"uniform mat3 normalMatrix\",\r\n            mesh._instances && mesh._instances.length > 0 ? 'mat4 u_modelViewMatrix' : \"uniform mat4 u_modelViewMatrix\",\r\n            mesh._instances && mesh._instances.length > 0 ? 'mat4 u_modelMatrix' : \"uniform mat4 u_modelMatrix\",\r\n            \"uniform mat4 u_projectionMatrix\",\r\n            \"uniform mat3 u_normalMatrix\",\r\n            \"uniform mat4 u_viewMatrix\",\r\n            \"uniform mat4 viewMatrix\",\r\n            \"uniform vec3 cameraPosition\",\r\n            \"uniform vec3 u_cameraPosition\"\r\n        ];\r\n        if (material.vertexShader) {\r\n            uniforms = \"\";\r\n            innerUniforms.forEach(function (item) {\r\n                if (material.vertexShader.indexOf(item) < 0) {\r\n                    uniforms += item + \";\\n\";\r\n                }\r\n            });\r\n            var vs = getAttributeDefineBlok(material.vertexShader) + uniforms +\r\n                material.vertexShader;\r\n\r\n            vs = ShaderChunk.parseIncludes(vs);\r\n\r\n            return vs;\r\n        }\r\n        else {\r\n            throw new Error(\"material.vertexShader 是必须参数\");\r\n        }\r\n    },\r\n    /**\r\n     * \r\n     *@param {Cesium.Material} material\r\n     *@return {String} \r\n     *@private\r\n     */\r\n    getFragmentShaderSource: function (material) {\r\n\r\n        if (material.fragmentShader) {\r\n            var fs = ShaderChunk.parseIncludes(material.fragmentShader);\r\n            return fs;\r\n        } else {\r\n            throw new Error(\"material.fragmentShader 是必须参数\");\r\n        }\r\n    }\r\n}\r\n\r\nMeshVisualizer.prototype._computeModelMatrix = function (mesh, frameState) {\r\n    if (mesh._actualMesh) {\r\n        mesh = mesh._actualMesh;\r\n    }\r\n    var that = this;\r\n    if (mesh instanceof LOD || mesh instanceof ReferenceMesh || typeof mesh.update === 'function') {\r\n        if (mesh.parent) {\r\n            if (mesh.parent == that) {\r\n                mesh.update(that._actualModelMatrix, frameState);\r\n\r\n            } else if (mesh.parent.modelMatrix) {\r\n                mesh.update(mesh.parent.modelMatrix, frameState);\r\n            } else {\r\n                mesh.update(that._actualModelMatrix, frameState);\r\n            }\r\n        } else {\r\n            mesh.update(that._actualModelMatrix, frameState);\r\n        }\r\n    } else {\r\n        var position = mesh.position;\r\n        if (mesh.parent instanceof LOD) {\r\n            Matrix4.clone(mesh.parent.modelMatrix, mesh.modelMatrix);\r\n\r\n        } else if (mesh._modelMatrixNeedsUpdate) {\r\n            var rotation = mesh.quaternion ? mesh.quaternion : mesh.rotation;\r\n\r\n            if (mesh.parent && mesh.parent.modelMatrix) {\r\n\r\n                var actualModelMatrix = mesh.parent.modelMatrix ? mesh.parent.modelMatrix : mesh._drawCommand.modelMatrix;\r\n                RendererUtils.computeModelMatrix(\r\n                    actualModelMatrix,\r\n                    mesh.position,\r\n                    rotation,\r\n                    mesh.scale,\r\n                    mesh.modelMatrix\r\n                );\r\n\r\n            } else {\r\n                RendererUtils.computeModelMatrix(\r\n                    that._actualModelMatrix,\r\n                    mesh.position,\r\n                    rotation,\r\n                    mesh.scale,\r\n                    mesh.modelMatrix\r\n                );\r\n            }\r\n\r\n            mesh._modelMatrixNeedsUpdate = false;\r\n        }\r\n    }\r\n}\r\n/**\r\n*\r\n*@param {Cesium.FrameState}frameState\r\n*/\r\nMeshVisualizer.prototype.update = function (frameState) {\r\n    if (!this._scene) {\r\n        this._scene = frameState.camera._scene;\r\n    }\r\n    if (!this._ready || !this.show && this._chidren.length > 0) {//如果未准备好则不加入渲染队列\r\n        return;\r\n    }\r\n    this.beforeUpdate.raiseEvent(frameState);\r\n\r\n    var that = this;\r\n    var wireframeChanged = false;\r\n    var sysWireframe = frameState.camera._scene._globe._surface.tileProvider._debug.wireframe;\r\n    if (this.debug) {\r\n        sysWireframe = true;\r\n    }\r\n\r\n    if (sysWireframe != this._isWireframe) {\r\n        wireframeChanged = true;\r\n    }\r\n    if (this._modelMatrixNeedsUpdate) {\r\n        this._actualModelMatrix = RendererUtils.computeModelMatrix(\r\n            this._modelMatrix,\r\n            this._position,\r\n            this._rotation,\r\n            this._scale,\r\n            this._actualModelMatrix\r\n        );\r\n        if (this._up && this._up.y) {\r\n            this._actualModelMatrix = RendererUtils.yUp2Zup(this._actualModelMatrix, this._actualModelMatrix);\r\n        }\r\n        Cesium.Cartesian3.clone(this._scale, this._oldScale);\r\n        Cesium.Cartesian3.clone(this._position, this._oldPosition);\r\n        this._modelMatrixNeedsUpdate = false;\r\n    }\r\n\r\n    MeshVisualizer.traverse(this, function (mesh) {\r\n        if (!mesh.show) return;\r\n\r\n        if (mesh._instances && mesh._instances.length) {\r\n            mesh._availableInstances = mesh._availableInstances || [];\r\n            mesh._availableInstances.splice(0);\r\n\r\n            if (!mesh.geometry.boundingSphere) {\r\n                mesh.geometry.boundingSphere = Cesium.BoundingSphere.fromVertices(mesh.geometry.attributes.position.values);\r\n            }\r\n\r\n            mesh._instances.forEach(function (instance) {\r\n                if (!instance.show) return;\r\n                Matrix4.getTranslation(instance.modelMatrix, instance.boundingSphere.center);\r\n                instance.boundingSphere.radius = mesh.geometry.boundingSphere.radius;\r\n                var intersect = frameState.cullingVolume.computeVisibility(instance.boundingSphere)\r\n                if (intersect != Cesium.Intersect.OUTSIDE) {\r\n                    mesh._availableInstances.push(instance)\r\n                }\r\n            });\r\n            if (mesh._availableInstances.length == 0) return;\r\n        }\r\n\r\n        if (MeshUtils.isMesh3js(mesh)) {\r\n            var needsUpdate = !mesh._actualMesh\r\n                || mesh.needsUpdate\r\n                || mesh.geometry.needsUpdate;\r\n\r\n            if (needsUpdate) {\r\n                mesh._actualMesh = MeshUtils.fromMesh3js(mesh);\r\n                mesh.modelMatrixNeedsUpdate = true;\r\n            }\r\n            else {\r\n                for (var pn in mesh.geometry.attributes) {\r\n                    if (mesh.geometry.attributes.hasOwnProperty(pn)) {\r\n                        mesh._actualMesh.geometry.attributes[pn].needsUpdate = mesh.geometry.attributes[pn].needsUpdate;\r\n                    }\r\n                }\r\n                var index = mesh.geometry.index;\r\n                if (index && index.needsUpdate) {\r\n                    mesh._actualMesh.geometry.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            mesh._actualMesh.quaternion = Cesium.Quaternion.clone(mesh.quaternion);\r\n            mesh._actualMesh.position = mesh.position;\r\n            mesh._actualMesh.scale = mesh.scale;\r\n            mesh._actualMesh.modelMatrixNeedsUpdate = mesh.modelMatrixNeedsUpdate;\r\n            mesh = mesh._actualMesh;\r\n            MaterialUtils.updateMaterialFrom3js(mesh.material);\r\n        }\r\n\r\n        that._computeModelMatrix(mesh, frameState);\r\n\r\n        if (typeof mesh.update !== 'function') {\r\n            if (frameState.passes.pick && !mesh.material.allowPick) {\r\n                return;\r\n            }\r\n\r\n            if (!mesh._drawCommand\r\n                || mesh.needsUpdate\r\n                || mesh.geometry.needsUpdate\r\n                || wireframeChanged\r\n            ) {//重新构建绘图命令，比如geometry完全不同于之前一帧 或者顶点和索引数量都发生改变等时，执行这段\r\n\r\n                if (sysWireframe || mesh.material.wireframe) {\r\n                    that.toWireframe(mesh.geometry);\r\n                } else {\r\n                    that.restoreFromWireframe(mesh.geometry);\r\n                }\r\n\r\n                if (mesh._drawCommand) mesh._drawCommand.destroy();\r\n                mesh._drawCommand = that.createDrawCommand(mesh, frameState);\r\n\r\n                mesh.needsUpdate = false;\r\n                mesh.geometry.needsUpdate = false;\r\n            } else {//在不需要重新构建绘图命令时，检查各个属性和索引是否需要更新，需要则将更新相应的缓冲区\r\n\r\n                //更新属性缓冲区\r\n                for (var name in mesh.geometry.attributes) {\r\n                    if (mesh.geometry.attributes.hasOwnProperty(name)) {\r\n                        if (mesh.geometry.attributes[name] && mesh.geometry.attributes[name].needsUpdate) {\r\n                            var attrLocation = mesh._drawCommand.vertexArray._attributeLocations[name]\r\n                            var vb = mesh._drawCommand.vertexArray._attributes[attrLocation].vertexBuffer;\r\n                            var arrayView = mesh.geometry.attributes[name].values;\r\n                            var gl = vb._gl;\r\n                            var target = vb._bufferTarget;\r\n                            gl.bindBuffer(target, vb._buffer);\r\n                            gl.bufferData(target, arrayView, BufferUsage.STATIC_DRAW);\r\n                            gl.bindBuffer(target, null);\r\n\r\n                            // vb.copyFromArrayView(mesh.geometry.attributes[name].values, 0);\r\n                        }\r\n                    }\r\n                }\r\n                //更新索引缓冲区\r\n                if (mesh.geometry.indexNeedsUpdate) {\r\n                    var vb = mesh._drawCommand.vertexArray.indexBuffer;\r\n                    var gl = vb._gl;\r\n                    var target = vb._bufferTarget;\r\n                    gl.bindBuffer(target, vb._buffer);\r\n                    gl.bufferData(target, mesh.geometry.indices, BufferUsage.STATIC_DRAW);\r\n                    gl.bindBuffer(target, null);\r\n                    mesh.geometry.indexNeedsUpdate = false;\r\n                    // vb.copyFromArrayView(mesh.geometry.indices, 0);\r\n                }\r\n\r\n                if (mesh._instances && mesh._instances.length) {\r\n                    updateVertexBuffer(mesh, frameState.context);\r\n                }\r\n            }\r\n\r\n            mesh._drawCommand.modelMatrix = mesh.modelMatrix;\r\n\r\n            if (mesh._instances && mesh._instances.length) {\r\n                mesh._drawCommand.boundingVolume = mesh._boundingSphere;\r\n                mesh._drawCommand.instanceCount = mesh._availableInstances.length;\r\n                mesh._pickCommand && (mesh._pickCommand.instanceCount = mesh._availableInstances.length);\r\n            }\r\n            else {\r\n                if (!mesh._drawCommand.boundingVolume) {\r\n                    if (!mesh.geometry.boundingSphere) {\r\n                        mesh.geometry.boundingSphere = Cesium.BoundingSphere.fromVertices(mesh.geometry.attributes.position.values);\r\n                    }\r\n                    mesh._drawCommand.boundingVolume = Cesium.BoundingSphere.clone(mesh.geometry.boundingSphere);\r\n                }\r\n                Cesium.Matrix4.getTranslation(mesh.modelMatrix, mesh._drawCommand.boundingVolume.center);\r\n            }\r\n            mesh._pickCommand.boundingVolume = mesh._drawCommand.boundingVolume;\r\n\r\n            mesh._drawCommand.uniformMap = that.getUniformMap(mesh.material, frameState);\r\n            if (frameState.passes.pick) {\r\n\r\n                var command = mesh._pickCommand;\r\n                frameState.commandList.push(command);\r\n\r\n            } else {\r\n                mesh.material._renderStateOptions.depthTest.enabled = mesh.material.depthTest;\r\n                mesh._drawCommand.renderState = RenderState.fromCache(mesh.material._renderStateOptions);\r\n                // mesh._drawCommand.renderState.depthTest.enabled = mesh.material.depthTest;\r\n\r\n                mesh._drawCommand.shaderProgram = mesh._drawCommand._sp;\r\n                frameState.commandList.push(mesh._drawCommand);\r\n            }\r\n\r\n        } else {\r\n            mesh.needsUpdate = false;\r\n        }\r\n\r\n    }, true);\r\n\r\n    //执行帧缓冲绘图命令\r\n    for (var i in that._framebufferTextures) {\r\n        if (that._framebufferTextures.hasOwnProperty(i)) {\r\n            var item = that._framebufferTextures[i].value;\r\n            that.updateFrameBufferTexture(frameState, item);\r\n        }\r\n    }\r\n\r\n    this._isWireframe = sysWireframe;\r\n    wireframeChanged = false;\r\n    this._modelMatrixNeedsUpdate = false;\r\n    this._geometryChanged = false;\r\n\r\n}\r\n\r\n///////2020.04.20  --start\r\n\r\n\r\n/**\r\n*单独渲染frameBufferTexture中的mesh，最终更新frameBufferTexture中的texture\r\n*@param {Cesium.FrameState}frameState\r\n*@param {Cesium.FramebufferTexture}frameBufferTexture\r\n@param {{x:number,y:number,width:number,height:number}}viewport\r\n*/\r\nMeshVisualizer.prototype.initFrameBufferTexture = function (frameState, frameBufferTexture, viewport) {\r\n    var that = this;\r\n\r\n    var item = frameBufferTexture;\r\n    if (item instanceof FramebufferTexture) {\r\n\r\n        item.drawCommands = [];\r\n        MeshVisualizer.traverse(item.mesh, function (mesh) {\r\n            if (MeshUtils.isMesh3js(mesh)) {\r\n                var needsUpdate = !mesh._actualMesh\r\n                    || mesh.needsUpdate\r\n                    || mesh.geometry.needsUpdate;\r\n\r\n                if (needsUpdate) {\r\n                    mesh._actualMesh = MeshUtils.fromMesh3js(mesh);\r\n                }\r\n                if (!needsUpdate) {\r\n                    for (var pn in mesh.geometry.attributes) {\r\n                        if (mesh.geometry.attributes.hasOwnProperty(pn)) {\r\n                            mesh._actualMesh.geometry[pn].needsUpdate = mesh.geometry.attributes[pn].needsUpdate;\r\n                        }\r\n                    }\r\n                    var index = mesh.geometry.getIndex();\r\n                    if (index && index.needsUpdate) {\r\n                        mesh._actualMesh.geometry.needsUpdate = true;\r\n                    }\r\n                }\r\n\r\n                mesh._actualMesh.quaternion = Cesium.Quaternion.clone(mesh.quaternion);\r\n                mesh._actualMesh.position = mesh.position;\r\n                mesh._actualMesh.scale = mesh.scale;\r\n                mesh._actualMesh.modelMatrixNeedsUpdate = mesh.modelMatrixNeedsUpdate;\r\n                mesh = mesh._actualMesh;\r\n                MaterialUtils.updateMaterialFrom3js(mesh.material);\r\n            }\r\n            that._computeModelMatrix(mesh, frameState);\r\n\r\n            if (!mesh._textureCommand\r\n                || mesh.needsUpdate\r\n                || mesh.geometry.needsUpdate\r\n            ) {\r\n                if (mesh.material.wireframe) {\r\n                    that.toWireframe(mesh.geometry);\r\n                } else {\r\n                    that.restoreFromWireframe(mesh.geometry);\r\n                }\r\n\r\n                mesh._textureCommand = that.createDrawCommand(mesh, frameState);\r\n                //mesh._textureCommand.boundingVolume = mesh.geometry.boundingSphere;\r\n                mesh.needsUpdate = false;\r\n                mesh.material.needsUpdate = false;\r\n\r\n            } else {//在不需要重新构建绘图命令时，检查各个属性和索引是否需要更新，需要则将更新相应的缓冲区\r\n\r\n                var vaNeedsUpdate = false\r\n                //更新属性缓冲区\r\n                for (var name in mesh.geometry.attributes) {\r\n                    if (mesh.geometry.attributes.hasOwnProperty(name)\r\n                        && mesh.geometry.attributes[name]) {\r\n\r\n                        if (mesh.geometry.attributes[name] && mesh.geometry.attributes[name].needsUpdate) {\r\n                            var attrLocation = mesh._textureCommand.vertexArray._attributeLocations[name]\r\n                            var vb = mesh._textureCommand.vertexArray._attributes[attrLocation].vertexBuffer;\r\n                            var arrayView = mesh.geometry.attributes[name].values;\r\n                            var gl = vb._gl;\r\n                            if (vb._sizeInBytes == arrayView * arrayView.constructor.BYTES_PER_ELEMENT) {\r\n                                var target = vb._bufferTarget;\r\n                                gl.bindBuffer(target, vb._buffer);\r\n                                gl.bufferData(target, arrayView, BufferUsage.STATIC_DRAW);\r\n                                gl.bindBuffer(target, null);\r\n                            } else {\r\n                                vaNeedsUpdate = true;\r\n                                break;\r\n                            }\r\n\r\n                            //vb.copyFromArrayView(mesh.geometry.attributes[name].values, 0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //更新索引缓冲区\r\n                if (!vaNeedsUpdate && mesh.geometry.indexNeedsUpdate) {\r\n\r\n                    var arrayBufferView = mesh.geometry.indices;\r\n\r\n                    var vb = mesh._textureCommand.vertexArray.indexBuffer;\r\n                    if (vb._sizeInBytes != arrayBufferView.length * arrayBufferView.constructor.BYTES_PER_ELEMENT) {\r\n                        vb.destroy();\r\n                        var buffer = Buffer.createIndexBuffer({\r\n                            context: frameState.context,\r\n                            typedArray: arrayBufferView,\r\n                            usage: BufferUsage.STATIC_DRAW,\r\n                            indexDatatype: arrayBufferView instanceof Uint16Array ? Cesium.IndexDatatype.UNSIGNED_SHORT : Cesium.IndexDatatype.UNSIGNED_INT\r\n                        });\r\n                        mesh._textureCommand.vertexArray._indexBuffer = buffer;\r\n                    } else {\r\n                        var gl = vb._gl;\r\n                        var target = vb._bufferTarget;\r\n                        gl.bindBuffer(target, vb._buffer);\r\n                        gl.bufferData(target, arrayBufferView, BufferUsage.STATIC_DRAW);\r\n                        gl.bindBuffer(target, null);\r\n                    }\r\n\r\n                    mesh.geometry.indexNeedsUpdate = false;\r\n                }\r\n\r\n                if (vaNeedsUpdate) {\r\n                    var command = mesh._textureCommand\r\n                    var attributeLocations = command.vertexArray._attributeLocations\r\n                    var vertexArrayAttributes = command._cacehVertexArrayAttributes\r\n                    command.vertexArray.destroy();\r\n                    command.vertexArray = VertexArray.fromGeometry({\r\n                        context: frameState.context,\r\n                        geometry: mesh.geometry,\r\n                        attributeLocations: attributeLocations,\r\n                        bufferUsage: BufferUsage.STATIC_DRAW,\r\n\r\n                        vertexArrayAttributes: vertexArrayAttributes\r\n                    });\r\n                    if (vertexArrayAttributes && vertexArrayAttributes.length) {\r\n                        command._cacehVertexArrayAttributes = vertexArrayAttributes.map(function (a) {\r\n                            return a;\r\n                        })\r\n                    }\r\n                    command.vertexArray._attributeLocations = attributeLocations;\r\n\r\n                    for (var name in mesh.geometry.attributes) {\r\n                        if (mesh.geometry.attributes.hasOwnProperty(name)\r\n                            && mesh.geometry.attributes[name]) {\r\n                            mesh.geometry.attributes[name].needsUpdate = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            mesh._textureCommand.modelMatrix = mesh.modelMatrix;\r\n\r\n            var context = frameState.context;\r\n            var drawingBufferWidth = context.drawingBufferWidth;\r\n            var drawingBufferHeight = context.drawingBufferHeight;\r\n            var fbNeedsUpdate = false;\r\n\r\n            if (!item.texture\r\n                || item.texture.width != drawingBufferWidth\r\n                || item.texture.height != drawingBufferHeight\r\n            ) {\r\n                var notFullScreen = item._notFullScreen || Cesium.defined(item.texture);\r\n                if (!notFullScreen) {\r\n                    item.texture = new Texture({\r\n                        context: context,\r\n                        width: drawingBufferWidth,\r\n                        height: drawingBufferHeight,\r\n                        pixelFormat: PixelFormat.RGBA\r\n                        // ,pixelDatatype:PixelDatatype.FLOAT\r\n                    });\r\n                    fbNeedsUpdate = true;\r\n                }\r\n                item._notFullScreen = notFullScreen;\r\n\r\n            }\r\n            if (!item.depthTexture\r\n                || item.depthTexture.width != item.texture.width\r\n                || item.depthTexture.height != item.texture.height\r\n            ) {\r\n                item.depthTexture = new Cesium.Texture({\r\n                    context: context,\r\n                    width: item.texture.width,\r\n                    height: item.texture.height,\r\n                    pixelFormat: Cesium.PixelFormat.DEPTH_COMPONENT,\r\n                    pixelDatatype: Cesium.PixelDatatype.UNSIGNED_SHORT\r\n                });\r\n                fbNeedsUpdate = true;\r\n            }\r\n            if (!item.framebuffer || fbNeedsUpdate) {\r\n                item.framebuffer = new Cesium.Framebuffer({\r\n                    context: context,\r\n                    colorTextures: [item.texture],\r\n                    destroyAttachments: false,\r\n                    depthTexture: item.depthTexture\r\n                });\r\n            }\r\n\r\n            mesh.material._renderStateOptions.depthTest.enabled = mesh.material.depthTest;\r\n            //mesh._textureCommand.renderState.depthTest.enabled = mesh.depthTest;\r\n            if (viewport) {\r\n                mesh.material._renderStateOptions.viewport = viewport;\r\n            }\r\n            mesh._textureCommand.renderState = RenderState.fromCache(mesh.material._renderStateOptions);\r\n\r\n            item.drawCommands.push(mesh._textureCommand);\r\n\r\n        }, true);\r\n\r\n    }\r\n}\r\n\r\n/**\r\n*单独渲染frameBufferTexture中的mesh，最终更新frameBufferTexture中的texture\r\n*@param {Cesium.FrameState}frameState\r\n*@param {Cesium.FramebufferTexture}frameBufferTexture\r\n@param {{x:number,y:number,width:number,height:number}}viewport\r\n*/\r\nMeshVisualizer.prototype.updateFrameBufferTexture = function (frameState, frameBufferTexture, viewport) {\r\n    this.initFrameBufferTexture(frameState, frameBufferTexture, viewport);\r\n    var item = frameBufferTexture;\r\n    if (item.drawCommands && item.drawCommands.length > 0) {\r\n        // item.depthTexture = RendererUtils.renderToTexture(item.drawCommands, frameState, item.texture, item.depthTexture);\r\n        RendererUtils.renderToTexture(item.drawCommands, frameState, item.framebuffer);\r\n\r\n        for (var i = 0; i < item.drawCommands.length; i++) {\r\n\r\n            item.drawCommands[i]._renderStateOptions.viewport = void (0);\r\n            item.drawCommands[i].renderState = RenderState.fromCache(item.drawCommands[i]._renderStateOptions);\r\n\r\n        }\r\n    }\r\n    if (!frameBufferTexture.ready) {\r\n        frameBufferTexture.ready = true;\r\n        frameBufferTexture.readyPromise.resolve(frameBufferTexture);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n*单独渲染frameBufferTexture中的mesh，最终更新frameBufferTexture中的texture，并读取缓冲区的像素,可以用于实现并行计算(参看MeshVisualizer.prototype.compute)\r\n*@param {Cesium.FrameState}frameState\r\n*@param {Cesium.FramebufferTexture}frameBufferTexture\r\n*@param {Object}[viewport] 可选，视口设置\r\n*@param {Number}viewport.x 视口位置x坐标（屏幕坐标系，左上角为原点）\r\n*@param {Number}viewport.y 视口位置y坐标（屏幕坐标系，左上角为原点）\r\n*@param {Number}viewport.width 视口宽度\r\n*@param {Number}viewport.height 视口高度\r\n*@param {Cesium.PixelDatatype}[viewport.pixelDatatype=Cesium.PixelDatatype.UNSIGNED_BYTE] 输出数据中像素值的rgba各项的数据类型，注意：有的移动设备不支持浮点型 \r\n*@param {Object}[readState] 可选，读取设置\r\n*@param {Number}readState.x 读取区域位置x坐标（屏幕坐标系，左上角为原点）\r\n*@param {Number}readState.y 读取区域位置y坐标（屏幕坐标系，左上角为原点）\r\n*@param {Number}readState.width 读取区域宽度\r\n*@param {Number}readState.height 读取区域高度\r\n*@param {Cesium.PixelDatatype}[readState.pixelDatatype=Cesium.PixelDatatype.UNSIGNED_BYTE] 输出数据中像素值的rgba各项的数据类型，注意：有的移动设备不支持浮点型 \r\n*@param {Array.<Number>}outputPixels \r\n*@return {Array.<Number>}outputPixels  输出的像素\r\n*/\r\nMeshVisualizer.prototype.getPixels = function (frameState, frameBufferTexture, viewport, readState, pixels) {\r\n    viewport = viewport ? viewport : {};\r\n    viewport.x = viewport.x ? viewport.x : 0;\r\n    viewport.y = viewport.y ? viewport.y : 0;\r\n    if (!viewport.width) {\r\n        viewport.width = frameState.context._canvas.width;\r\n    }\r\n    if (!viewport.height) {\r\n        viewport.height = frameState.context._canvas.height;\r\n    }\r\n\r\n    this.initFrameBufferTexture(frameState, frameBufferTexture, viewport)\r\n    var item = frameBufferTexture;\r\n    if (item.drawCommands && item.drawCommands.length > 0) {\r\n        if (!item._computeTexture\r\n            || (item._computeTexture\r\n                && (item._computeTexture.width != viewport.width\r\n                    || item._computeTexture.height != viewport.height)\r\n            )) {\r\n            var pixelDatatype = viewport.pixelDatatype;\r\n            var pixelFormat = viewport.pixelFormat;\r\n            if (pixelDatatype == Cesium.PixelDatatype.FLOAT && !frameState.context._gl.getExtension('OES_texture_float')) {\r\n                throw new Cesium.DeveloperError(\"此设备不支持浮点型纹理\");\r\n            }\r\n            if (item._computeTexture) {\r\n                item._computeTexture.destroy();\r\n                item._computeTexture = null;\r\n            }\r\n            item._computeTexture = new Cesium.Texture({\r\n                context: frameState.context,\r\n                width: viewport.width,\r\n                height: viewport.height,\r\n                pixelFormat: pixelFormat,//PixelFormat.RGBA,\r\n                pixelDatatype: pixelDatatype\r\n            });\r\n        }\r\n\r\n        pixels = RendererUtils.renderToPixels(item.drawCommands, frameState, item._computeTexture, readState ? readState : viewport, pixels);\r\n        for (var i = 0; i < item.drawCommands.length; i++) {\r\n            item.drawCommands[i].renderState.viewport = void (0);\r\n        }\r\n        return pixels;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n///////2020.04.20  --end\r\n\r\n/**\r\n*\r\n*@param {Cesium.Mesh}mesh\r\n*/\r\nMeshVisualizer.prototype.add = function (mesh) {\r\n    this._chidren.push(mesh);\r\n}\r\n\r\n/**\r\n*\r\n*/\r\nMeshVisualizer.prototype.destroy = function () {\r\n    this._ready = false;\r\n    MeshVisualizer.traverse(this, function (mesh) {\r\n        if (mesh._drawCommand) {\r\n            delete mesh._drawCommand;\r\n        }\r\n    }, false);\r\n    for (var i in this._uniformValueCache) {\r\n        if (this._uniformValueCache.hasOwnProperty(i)) {\r\n            delete this._uniformValueCache[i];\r\n        }\r\n    }\r\n    for (var i in this._textureCache) {\r\n        if (this._textureCache.hasOwnProperty(i)) {\r\n            delete this._textureCache[i];\r\n        }\r\n    }\r\n    for (var i in this._uniformMaps) {\r\n        if (this._uniformMaps.hasOwnProperty(i)) {\r\n            delete this._uniformMaps[i];\r\n        }\r\n    }\r\n    for (var i in this._framebufferTextures) {\r\n        if (this._framebufferTextures.hasOwnProperty(i)) {\r\n            delete this._framebufferTextures[i];\r\n        }\r\n    }\r\n    this._uniformValueCache = {};\r\n    this._textureCache = {};\r\n    this._uniformMaps = {};\r\n    this._framebufferTextures = {};\r\n    if (this._pickIds) {\r\n        for (i = 0; i < this._pickIds.length; ++i) {\r\n            this._pickIds[i].destroy && this._pickIds[i].destroy();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n*\r\n*遍历节点\r\n*@param {Cesium.MeshVisualizer|Cesium.Mesh}root\r\n*@param {Cesium.MeshVisualizer~TraverseCallback}traverseFunc 访问每个节点时回调该函数，进行相关操作。回调函数包含一个参数，traverseArgs，其中封装了一个属性cancelCurrent，可以通过改变此属性达到终止遍历当前节点的子节点\r\n*@param {Boolean}visibleOnly visibleOnly为true时仅遍历可见的节点，如果父级节点不可见则不再访问其子节点\r\n*/\r\nMeshVisualizer.traverse = function (node, traverseFunc, visibleOnly, scratchTraverseArgs) {\r\n    if (!node) {\r\n        return;\r\n    }\r\n    if (!scratchTraverseArgs) {\r\n        scratchTraverseArgs = {\r\n            cancelCurrent: false,\r\n            cancelAll: false\r\n        };\r\n    }\r\n    scratchTraverseArgs.cancelCurrent = false;\r\n    if (visibleOnly && (!node.show && !node.visible)) {\r\n        return;\r\n    }\r\n    if ((node.geometry && node.material) || node instanceof LOD || node instanceof ReferenceMesh) {\r\n        traverseFunc(node, scratchTraverseArgs);\r\n    }\r\n\r\n    if (node.children) {\r\n        for (var i = 0; i < node.children.length; i++) {\r\n            if (scratchTraverseArgs.cancelCurrent) {\r\n                continue;\r\n            }\r\n            if (scratchTraverseArgs.cancelAll) {\r\n                break;\r\n            }\r\n            MeshVisualizer.traverse(node.children[i], traverseFunc, visibleOnly, scratchTraverseArgs);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n*\r\n*@Cesium.MeshVisualizer~TraverseCallback\r\n*@param {Cesium.Mesh|Cesium.LOD|Cesium.MeshVisualizer|Object}node\r\n*@param {Object}traverseArgs\r\n*@param {Boolean}traverseArgs.cancelCurrent 为true时终止遍历当前节点的子节点\r\n*@param {Boolean}traverseArgs.cancelAll 为true时终止遍历，退出遍历循环\r\n*/\r\n\r\n\r\nObject.defineProperties(MeshVisualizer.prototype, {\r\n    scene: {\r\n        set: function (val) {\r\n            this._scene = val;\r\n        },\r\n        get: function () {\r\n            return this._scene;\r\n        }\r\n    },\r\n    frameState: {\r\n        get: function () {\r\n            if (!this._scene) {\r\n                return undefined;\r\n            }\r\n            return this._scene.frameState;\r\n        }\r\n    },\r\n    modelMatrixNeedsUpdate: {\r\n        get: function () {\r\n            return this._modelMatrixNeedsUpdate;\r\n        },\r\n        set: function (val) {\r\n            this._modelMatrixNeedsUpdate = val;\r\n            if (val) {\r\n                MeshVisualizer.traverse(this, function (child) {\r\n                    child._modelMatrixNeedsUpdate = val;\r\n                }, false);\r\n            }\r\n        }\r\n    },\r\n    showReference: {\r\n        get: function () {\r\n            return this.referenceMesh.show;\r\n        },\r\n        set: function (val) {\r\n            this.referenceMesh.show = val;\r\n        }\r\n    },\r\n    children: {\r\n        get: function () {\r\n            return this._chidren;\r\n        },\r\n        set: function (val) {\r\n            this._chidren = val;\r\n        }\r\n    },\r\n    show: {\r\n        get: function () {\r\n            return this._show;\r\n        },\r\n        set: function (val) {\r\n            this._show = val;\r\n        }\r\n    },\r\n    debug: {\r\n        get: function () {\r\n            return this._debug;\r\n        },\r\n        set: function (val) {\r\n            this._debug = val;\r\n        }\r\n    },\r\n    ready: {\r\n        get: function () {\r\n            return this._ready;\r\n        }\r\n    },\r\n    modelMatrix: {\r\n        get: function () {\r\n            return this._modelMatrix;\r\n        },\r\n        set: function (val) {\r\n            this._modelMatrix = val;\r\n            this._modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n    rotation: {\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        set: function (val) {\r\n            if (val != this._rotation) {\r\n                this._rotation = val;\r\n                this._needUpdate = true;\r\n            }\r\n            this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n            this._rotation = val;\r\n            this._rotation.paramChanged.addEventListener(this._onNeedUpdateChanged);\r\n        }\r\n    },\r\n    position: {\r\n        get: function () {\r\n            return this._position;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._position.x || val.y != this._position.y || val.z != this._position.z) {\r\n                this._position = val;\r\n                this._modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._position = val;\r\n        }\r\n    },\r\n    scale: {\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._scale.x || val.y != this._scale.y || val.z != this._scale.z) {\r\n                this._scale = val;\r\n                this._modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._scale = val;\r\n        }\r\n    }\r\n});\r\nexport default MeshVisualizer;","﻿\r\nimport BasicGeometry from './BasicGeometry.js';\r\n\r\n/**\r\n*\r\n* :\r\n*\r\n*                       -----width----+(width/2,height/2)\r\n*                       |             |\r\n*                       |    (0,0)    |\r\n*                       |      +    height\r\n*                       |             |\r\n*                       |             |\r\n*                        +----width-----\r\n*        (-width/2,-height/2)\r\n*    \r\n*@param {Number}width\r\n*@param {Number}height\r\n*@param {Number}widthSegments\r\n*@param {Number}heightSegments\r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction PlaneBufferGeometry(width, height, widthSegments, heightSegments) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.widthSegments = widthSegments;\r\n    this.heightSegments = heightSegments;\r\n\r\n}\r\n\r\n/**\r\n*\r\n*@param {}\r\n*/\r\nPlaneBufferGeometry.createGeometry = function (planeBufferGeometry) {\r\n\r\n    var width = planeBufferGeometry.width,\r\n        height = planeBufferGeometry.height,\r\n        widthSegments = planeBufferGeometry.widthSegments,\r\n        heightSegments = planeBufferGeometry.heightSegments;\r\n\r\n\r\n    width = width || 1;\r\n    height = height || 1;\r\n\r\n    var width_half = width / 2;\r\n    var height_half = height / 2;\r\n\r\n    var gridX = Math.floor(widthSegments) || 1;\r\n    var gridY = Math.floor(heightSegments) || 1;\r\n\r\n    var gridX1 = gridX + 1;\r\n    var gridY1 = gridY + 1;\r\n\r\n    var segment_width = width / gridX;\r\n    var segment_height = height / gridY;\r\n\r\n    var ix, iy;\r\n\r\n    // buffers\r\n\r\n    var indices = [];\r\n    var vertices = [];\r\n    var normals = [];\r\n    var uvs = [];\r\n\r\n    // generate vertices, normals and uvs\r\n\r\n    for (iy = 0; iy < gridY1; iy++) {\r\n\r\n        var y = iy * segment_height - height_half;\r\n\r\n        for (ix = 0; ix < gridX1; ix++) {\r\n\r\n            var x = ix * segment_width - width_half;\r\n\r\n            vertices.push(x, -y, 0);\r\n\r\n            normals.push(0, 0, 1);\r\n\r\n            uvs.push(ix / gridX);\r\n            uvs.push(1 - (iy / gridY));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // indices\r\n\r\n    for (iy = 0; iy < gridY; iy++) {\r\n\r\n        for (ix = 0; ix < gridX; ix++) {\r\n\r\n            var a = ix + gridX1 * iy;\r\n            var b = ix + gridX1 * (iy + 1);\r\n            var c = (ix + 1) + gridX1 * (iy + 1);\r\n            var d = (ix + 1) + gridX1 * iy;\r\n\r\n            // faces\r\n\r\n            indices.push(a, b, d);\r\n            indices.push(b, c, d);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    var geom = BasicGeometry.createGeometry({\r\n        positions: new Float32Array(vertices),\r\n        normals: new Float32Array(normals),\r\n        uvs: new Float32Array(uvs),\r\n        indices: new Int32Array(indices)\r\n    })\r\n\r\n    return geom;\r\n}\r\n\r\nexport default PlaneBufferGeometry; ","﻿/**\r\n *:\r\n *\r\n*       p1------------p4\r\n*       |          +  |\r\n*       |       +     |\r\n*       |     +       |\r\n*       |   +         |\r\n*       | +           |\r\n*       p2------------p3\r\n*    \r\n*@param {Object}options \r\n*@param {Array<Number|Cesium.Cartesian3>}options.positions [p1,p2,p3,p4]或者[p1.x,p1.y,p1.z,p2.x,...,p4.z] \r\n*\r\n*@property {Array<Number|Cesium.Cartesian3>}positions \r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction PlaneGeometry(options) {//positions, widthSegments, heightSegments) {\r\n    this.type = 'PlaneGeometry';\r\n    if (!options || !options.positions) {\r\n        throw new Error(\"缺少positions参数\");\r\n    }\r\n    if (options.positions.length != 4 && options.positions.length / 3 != 4) {\r\n        throw new Error(\"positions参数必须包含四个顶点的位置坐标\");\r\n    }\r\n    this.positions = options.positions;\r\n\r\n}\r\n/**\r\n*\r\n*@param {Cesium.PlaneGeometry}\r\n*@return {Cesium.Geometry}\r\n*/\r\nPlaneGeometry.createGeometry = function (planeGeometry) {\r\n    var positions = planeGeometry.positions;\r\n\r\n    var positionsVal;\r\n    if (Array.isArray(positions)) {\r\n        if (positions[0] instanceof Cesium.Cartesian3) {\r\n            positionsVal = new Float32Array(12);\r\n            for (var i = 0; i < positions.length; i++) {\r\n                var p = positions[i];\r\n                positionsVal[i * 3] = p.x;\r\n                positionsVal[i * 3 + 1] = p.y;\r\n                positionsVal[i * 3 + 2] = p.z;\r\n            }\r\n        } else if (typeof positions[0] === 'number') {\r\n            positionsVal = new Float32Array(positionsVal);\r\n        } else {\r\n            throw new Error(\"positions参数有误\");\r\n        }\r\n    } else {\r\n        throw new Error(\"positions参数必须是数组类型\");\r\n    }\r\n    var indices = new Int32Array([0, 1, 3, 1, 2, 3]);\r\n    var attributes = {\r\n        position: new Cesium.GeometryAttribute({\r\n            componentDatatype: Cesium.ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: positions\r\n        })\r\n    };\r\n    var bs = Cesium.BoundingSphere.fromVertices(positions);\r\n    var geo = new Cesium.Geometry({\r\n        attributes: attributes,\r\n        indices: new Int32Array(indices),\r\n        primitiveType: Cesium.PrimitiveType.TRIANGLES,\r\n        boundingSphere: bs\r\n    });\r\n    return geo;\r\n}\r\nexport default PlaneGeometry;","﻿\r\nimport ArrowGeometry from './ArrowGeometry.js';\r\nimport Mesh from './Mesh.js';\r\nimport MeshMaterial from './MeshMaterial.js';\r\nimport Rotation from './Rotation.js';\r\nimport RendererUtils from './RendererUtils.js';\r\n\r\nvar defaultValue;\r\n/**\r\n*\r\n*@param {Object}[options]   \r\n*@param {Cesium.ArrowGeometry}[options.axisParameter]\r\n*@param {Boolean}[options.show=true]  \r\n*@param {Cesium.Cartesian3}[options.position]\r\n*@param {Cesium.VolumeRendering.Rotation}[options.rotation]\r\n*@param {Cesium.Cartesian3}[options.scale]    \r\n* \r\n*@property {Boolean}show  \r\n*@property {Cesium.Cartesian3}position\r\n*@property {Cesium.Rotation}rotation\r\n*@property {Cesium.Cartesian3}scale   \r\n*@property {Boolean}needUpdate\r\n*\r\n*@constructor\r\n*@memberof Cesium \r\n*/\r\nfunction ReferenceMesh(options) {\r\n    defaultValue = defaultValue || Cesium.defaultValue;\r\n    options = Cesium.defaultValue(options, {});\r\n    this._axisParameter = new ArrowGeometry(options.axisParameter);\r\n    this._axisParameterY = new ArrowGeometry(options.axisParameter);\r\n    this._axisParameterY.reverse = true;\r\n\r\n    var materialZ = new MeshMaterial({\r\n        defaultColor: \"rgba(255,0,0,1)\",\r\n        wireframe: false,\r\n        side: MeshMaterial.Sides.DOUBLE,\r\n        translucent: false,\r\n\r\n    });\r\n    var materialY = new MeshMaterial({\r\n        defaultColor: \"rgba(0,255,0,1)\",\r\n        wireframe: false,\r\n        side: MeshMaterial.Sides.DOUBLE,\r\n        translucent: true,\r\n\r\n    });\r\n    var materialX = new MeshMaterial({\r\n        defaultColor: \"rgba(0,0,255,1)\",\r\n        wireframe: false,\r\n        side: MeshMaterial.Sides.DOUBLE,\r\n        translucent: false,\r\n\r\n    });\r\n\r\n    var axisLine = ArrowGeometry.createGeometry(new ArrowGeometry(this._axisParameter));\r\n    var axisLineY = ArrowGeometry.createGeometry(new ArrowGeometry(this._axisParameterY));\r\n\r\n    var meshZ = new Mesh(axisLine, materialZ);\r\n    var meshY = new Mesh(axisLineY, materialY);\r\n    var meshX = new Mesh(axisLine, materialX);\r\n    meshZ.position.z = this._axisParameter.length / 2;\r\n\r\n    meshY.position.y = -this._axisParameter.length / 2;\r\n    meshY.rotation.axis.y = 1;\r\n    meshY.rotation.angle = -180;\r\n\r\n    meshX.position.x = this._axisParameter.length / 2;\r\n    meshX.rotation.axis.x = 1;\r\n    meshX.rotation.angle = -180;\r\n\r\n    meshX.parent = this;\r\n    meshY.parent = this;\r\n    meshZ.parent = this;\r\n\r\n    this._children = [meshX, meshY, meshZ];\r\n    this.x = meshX;\r\n    this.y = meshY;\r\n    this.z = meshZ;\r\n\r\n    this.uuid = Cesium.createGuid();\r\n    this.show = defaultValue(options.show, true);\r\n    this._position = defaultValue(options.position, new Cesium.Cartesian3(0, 0, 0));\r\n    this._scale = defaultValue(options.scale, new Cesium.Cartesian3(1, 1, 1));\r\n    this._rotation = defaultValue(options.rotation, { axis: new Cesium.Cartesian3(0, 0, 1), angle: 0 });\r\n    this._rotation = new Rotation(this._rotation.axis, this._rotation.angle);\r\n    this._needsUpdate = true;\r\n    this._modelMatrixNeedsUpdate = true;\r\n    this._modelMatrix = new Cesium.Matrix4();\r\n    Cesium.Matrix4.clone(Cesium.Matrix4.IDENTITY, this._modelMatrix);\r\n\r\n    this._onNeedUpdateChanged = function () {\r\n        this._modelMatrixNeedsUpdate = true;\r\n    };\r\n    this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n    this._parent = null;\r\n\r\n}\r\nfunction removeByValue(arr, val) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i] == val) {\r\n            arr.splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n}\r\nObject.defineProperties(ReferenceMesh.prototype, {\r\n    modelMatrix: {\r\n        get: function () {\r\n            return this._modelMatrix;\r\n        }\r\n    },\r\n    parent: {\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        set: function (val) {\r\n            if (val && ((val._children && Array.isArray(val._children)) || (val.children && Array.isArray(val.children)))) {\r\n\r\n                if (this._parent && this._parent != val) {\r\n                    var children = this._parent._children ? this._parent._children : this._parent.children;\r\n                    if (Array.isArray(children)) {\r\n                        removeByValue(children, this);\r\n                    }\r\n                }\r\n                this._parent = val;\r\n                if (typeof this._parent.add === 'function') {\r\n                    this._parent.add(this);\r\n                } else {\r\n                    var children = val._children ? val._children : val.children;\r\n                    children.push(this);\r\n                }\r\n            }\r\n            this.modelMatrixNeedsUpdate = true;\r\n        }\r\n    },\r\n    modelMatrixNeedsUpdate: {\r\n        get: function () {\r\n            return this._modelMatrixNeedsUpdate;\r\n        },\r\n        set: function (val) {\r\n            this._modelMatrixNeedsUpdate = val;\r\n            if (this._modelMatrixNeedsUpdate) {\r\n                Mesh.traverse(this, function (mesh) {\r\n                    mesh._modelMatrixNeedsUpdate = val;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    children: {\r\n        get: function () {\r\n            return this._children;\r\n        }\r\n    },\r\n    needsUpdate: {\r\n        get: function () {\r\n            return this._needsUpdate;\r\n        },\r\n        set: function (val) {\r\n            this._needsUpdate = val;\r\n        }\r\n    },\r\n    rotation: {\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        set: function (val) {\r\n            if (val != this._rotation) {\r\n                this._rotation = val;\r\n                this.modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._rotation.paramChanged.removeEventListener(this._onNeedUpdateChanged);\r\n            this._rotation = val;\r\n            this._rotation.paramChanged.addEventListener(this._onNeedUpdateChanged);\r\n        }\r\n    },\r\n    position: {\r\n        get: function () {\r\n            return this._position;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._position.x || val.y != this._position.y || val.z != this._position.z) {\r\n                this._position = val;\r\n                this.modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._position = val;\r\n        }\r\n    },\r\n    scale: {\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        set: function (val) {\r\n            if (val.x != this._scale.x || val.y != this._scale.y || val.z != this._scale.z) {\r\n                this._scale = val;\r\n                this.modelMatrixNeedsUpdate = true;\r\n            }\r\n            this._scale = val;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n*\r\n*@param {Cesium.Matrix4}meshVisulizerModelMatrix\r\n*@param {Cesium.FrameState}frameState\r\n*/\r\nReferenceMesh.prototype.update = function (parentModelMatrix, frameState) {\r\n\r\n    if (this._modelMatrixNeedsUpdate || this._needsUpdate) {\r\n\r\n        RendererUtils.computeModelMatrix(\r\n            parentModelMatrix,\r\n            this.position,\r\n            this.rotation,\r\n            this.scale,\r\n            this.modelMatrix\r\n        );\r\n\r\n        this._modelMatrixNeedsUpdate = false;\r\n    }\r\n}\r\n\r\nexport default ReferenceMesh;","﻿\r\n\r\nvar yUpToZUp, scratchTranslation, scratchQuaternion, scratchScale, scratchTranslationQuaternionRotationScale, clearCommandScratch;\r\n\r\n/**\r\n*\r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction RendererUtils() { }\r\n/**\r\n*使用帧缓冲技术，执行渲染命令，渲染到纹理  \r\n*@param {Cesium.DrawCommand|Array<Cesium.DrawCommand>}drawCommand 渲染命令（集合）\r\n*@param {Cesium.FrameState}frameState 帧状态对象，可以从Cesium.Scene中获取\r\n*@param {Cesium.Texture}outpuTexture 将渲染到的目标纹理对象\r\n*@param {Cesium.Texture}[outputDepthTexture] 可选，输出的深度纹理\r\n*/\r\nRendererUtils.renderToTexture = function (drawCommand, frameState, outputTexture, outputDepthTexture) {\r\n    var drawCommands = Array.isArray(drawCommand) ? drawCommand : [drawCommand];\r\n    var context = frameState.context;\r\n\r\n    var framebuffer = null, destroy = false;\r\n    if (outputTexture instanceof Cesium.Framebuffer) {\r\n        framebuffer = outputTexture;\r\n    }\r\n    if (!framebuffer) {\r\n        if (!outputDepthTexture\r\n            || outputDepthTexture.width != outputTexture.width\r\n            || outputDepthTexture.height != outputTexture.height) {\r\n            outputDepthTexture = new Cesium.Texture({\r\n                context: context,\r\n                width: outputTexture.width,\r\n                height: outputTexture.height,\r\n                pixelFormat: Cesium.PixelFormat.DEPTH_COMPONENT,\r\n                pixelDatatype: Cesium.PixelDatatype.UNSIGNED_SHORT\r\n            })\r\n\r\n        }\r\n        framebuffer = new Cesium.Framebuffer({\r\n            context: context,\r\n            colorTextures: [outputTexture],\r\n            destroyAttachments: false,\r\n            depthTexture: outputDepthTexture\r\n        });\r\n        destroy = true;\r\n    }\r\n    if (!clearCommandScratch) {\r\n        clearCommandScratch = new Cesium.ClearCommand({\r\n            color: new Cesium.Color(0.0, 0.0, 0.0, 0.0)\r\n        });\r\n    }\r\n    var clearCommand = clearCommandScratch;\r\n    clearCommand.framebuffer = framebuffer;\r\n    clearCommand.renderState = frameState.renderState;\r\n    clearCommand.execute(context);\r\n\r\n    drawCommands.forEach(function (drawCommand) {\r\n        drawCommand.framebuffer = framebuffer;\r\n        drawCommand.execute(context);\r\n    });\r\n    if (destroy) {\r\n        framebuffer.destroy();\r\n    }\r\n}\r\n\r\n/**\r\n*使用帧缓冲技术，执行渲染命令，渲染到纹理并读取像素值，可以用于实现并行计算  \r\n*@param {Cesium.DrawCommand|Array<Cesium.DrawCommand>}drawCommand 渲染命令（集合）\r\n*@param {Cesium.FrameState}frameState 帧状态对象，可以从Cesium.Scene中获取\r\n*@param {Cesium.Texture}outpuTexture 将渲染到的目标纹理对象\r\n*@param {Object}[options] \r\n*@param {Array.<Number>}outputPixels \r\n*@return {Array.<Number>}outputPixels  输出的像素\r\n*/\r\nRendererUtils.renderToPixels = function (drawCommand, frameState, outputTexture, options, pixels) {\r\n    var drawCommands = Array.isArray(drawCommand) ? drawCommand : [drawCommand];\r\n    var context = frameState.context;\r\n\r\n    var framebuffer = null, destroy = false;\r\n    if (outputTexture instanceof Cesium.Framebuffer) {\r\n        framebuffer = outputTexture;\r\n    }\r\n\r\n    if (!framebuffer) {\r\n\r\n        var outputDepthTexture = new Cesium.Texture({\r\n            context: context,\r\n            width: outputTexture.width,\r\n            height: outputTexture.height,\r\n            pixelFormat: Cesium.PixelFormat.DEPTH_COMPONENT,\r\n            pixelDatatype: Cesium.PixelDatatype.UNSIGNED_SHORT\r\n        })\r\n\r\n        framebuffer = new Cesium.Framebuffer({\r\n            context: context,\r\n            colorTextures: [outputTexture],\r\n            depthTexture: context.depthTexture ? outputDepthTexture : undefined,\r\n            destroyAttachments: false\r\n        });\r\n        destroy = true;\r\n    }\r\n    if (!clearCommandScratch) {\r\n        clearCommandScratch = new Cesium.ClearCommand({\r\n            color: new Cesium.Color(0.0, 0.0, 0.0, 0.0)\r\n        });\r\n    }\r\n    var clearCommand = clearCommandScratch;\r\n    clearCommand.framebuffer = framebuffer;\r\n    clearCommand.renderState = frameState.renderState;\r\n    clearCommand.execute(context);\r\n\r\n    drawCommands.forEach(function (drawCommand) {\r\n        drawCommand.framebuffer = framebuffer;\r\n        drawCommand.execute(context);\r\n    });\r\n    options = options ? options : {};\r\n\r\n    pixels = RendererUtils.readPixels(frameState, Object.assign(options, {\r\n        framebuffer: framebuffer\r\n    }), pixels);\r\n    delete options.framebuffer;\r\n    if (destroy) {\r\n        framebuffer.destroy();\r\n    }\r\n    return pixels;\r\n}\r\n\r\nvar scratchBackBufferArray;\r\n\r\n/**\r\n * Validates a framebuffer.\r\n * Available in debug builds only.\r\n * @private\r\n */\r\nfunction validateFramebuffer(context) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (context.validateFramebuffer) {\r\n        var gl = context._gl;\r\n        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n\r\n        if (status !== gl.FRAMEBUFFER_COMPLETE) {\r\n            var message;\r\n\r\n            switch (status) {\r\n                case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                    message = 'Framebuffer is not complete.  Incomplete attachment: at least one attachment point with a renderbuffer or texture attached has its attached object no longer in existence or has an attached image with a width or height of zero, or the color attachment point has a non-color-renderable image attached, or the depth attachment point has a non-depth-renderable image attached, or the stencil attachment point has a non-stencil-renderable image attached.  Color-renderable formats include GL_RGBA4, GL_RGB5_A1, and GL_RGB565. GL_DEPTH_COMPONENT16 is the only depth-renderable format. GL_STENCIL_INDEX8 is the only stencil-renderable format.';\r\n                    break;\r\n                case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                    message = 'Framebuffer is not complete.  Incomplete dimensions: not all attached images have the same width and height.';\r\n                    break;\r\n                case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                    message = 'Framebuffer is not complete.  Missing attachment: no images are attached to the framebuffer.';\r\n                    break;\r\n                case gl.FRAMEBUFFER_UNSUPPORTED:\r\n                    message = 'Framebuffer is not complete.  Unsupported: the combination of internal formats of the attached images violates an implementation-dependent set of restrictions.';\r\n                    break;\r\n            }\r\n\r\n            throw new DeveloperError(message);\r\n        }\r\n    }\r\n    //>>includeEnd('debug');\r\n}\r\nfunction bindFramebuffer(context, framebuffer) {\r\n    if (framebuffer !== context._currentFramebuffer) {\r\n        // this check must use typeof, not defined, because defined doesn't work with undeclared variables.\r\n        if (typeof WebGLRenderingContext !== 'undefined') {\r\n            scratchBackBufferArray = [Cesium.WebGLConstants.BACK];\r\n        }\r\n        context._currentFramebuffer = framebuffer;\r\n        var buffers = scratchBackBufferArray;\r\n\r\n        if (Cesium.defined(framebuffer)) {\r\n            framebuffer._bind();\r\n            validateFramebuffer(context);\r\n\r\n            // TODO: Need a way for a command to give what draw buffers are active.\r\n            buffers = framebuffer._getActiveColorAttachments();\r\n        } else {\r\n            var gl = context._gl;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n\r\n        if (context.drawBuffers) {\r\n            context.glDrawBuffers(buffers);\r\n        }\r\n    }\r\n}\r\n//var pixels;\r\nvar scratchPixelFormat;\r\nvar scratchPixelDatatype;\r\n/**\r\n * @param {Cesium.FrameState}frameState\r\n * @param {Object}[readState]\r\n * @param {number}readState.x\r\n * @param {number}readState.y\r\n * @param {number}readState.width\r\n * @param {number}readState.height\r\n * @param {Cesium.PixelDatatype}readState.pixelDatatype\r\n * @param {Cesium.PixelFormat}readState.pixelFormat\r\n * @param {ArrayBufferView}pixels\r\n * @return {ArrayBufferView}\r\n */\r\nRendererUtils.readPixels = function (frameState, readState, pixels) {\r\n    var gl = frameState.context._gl;\r\n\r\n    readState = readState || {};\r\n    var x = Math.max(readState.x || 0, 0);\r\n    var y = Math.max(readState.y || 0, 0);\r\n    var width = readState.width || gl.drawingBufferWidth;\r\n    var height = readState.height || gl.drawingBufferHeight;\r\n    var pixelDatatype = readState.pixelDatatype || Cesium.PixelDatatype.UNSIGNED_BYTE;\r\n    var pixelFormat = readState.pixelFormat || Cesium.PixelFormat.RGBA;\r\n    var framebuffer = readState.framebuffer;\r\n\r\n    if (width <= 0) {\r\n        throw new Cesium.DeveloperError('readState.width must be greater than zero.');\r\n    }\r\n\r\n    if (height <= 0) {\r\n        throw new Cesium.DeveloperError('readState.height must be greater than zero.');\r\n    }\r\n\r\n    bindFramebuffer(this, framebuffer);\r\n    var size = 4;\r\n    if (pixelFormat == Cesium.PixelFormat.RGB) {\r\n        size = 3;\r\n    } else if (pixelFormat == Cesium.PixelFormat.ALPHA) {\r\n        size = 1;\r\n    }\r\n\r\n    if (!pixels) {//|| pixels.length !== size * width * height\r\n        //|| scratchPixelFormat != pixelFormat || scratchPixelDatatype != pixelDatatype) {\r\n\r\n        if (pixelDatatype == Cesium.PixelDatatype.FLOAT) {\r\n            pixelDatatype = gl.FLOAT;\r\n            pixels = new Float32Array(size * width * height);\r\n        } else if (pixelDatatype == Cesium.PixelDatatype.UNSIGNED_BYTE) {\r\n            pixels = new Uint8Array(size * width * height);\r\n        } else {\r\n            pixels = new Uint16Array(size * width * height);\r\n        }\r\n    }\r\n    gl.readPixels(x, y, width, height, pixelFormat, pixelDatatype, pixels);\r\n    scratchPixelFormat = pixelFormat;\r\n    scratchPixelDatatype = pixelDatatype;\r\n    return pixels;\r\n};\r\n\r\n/**\r\n*\r\n*@param {Cesium.Matrix4}srcMatrix\r\n*@param {Cesium.Matrix4}dstMatrix\r\n*@return {Cesium.Matrix4}\r\n*/\r\nRendererUtils.yUp2Zup = function (srcMatrix, dstMatrix) {\r\n    if (!yUpToZUp) {\r\n        yUpToZUp = Cesium.Matrix4.fromRotationTranslation(Cesium.Matrix3.fromRotationX(Cesium.Math.PI_OVER_TWO));\r\n    }\r\n    return Cesium.Matrix4.multiplyTransformation(srcMatrix, yUpToZUp, dstMatrix);\r\n}\r\n/**\r\n*平移、旋转或缩放，返回计算之后的模型转换矩阵\r\n*@param {Cesium.Cartesian3}[translation=undefined]\r\n*@param {Object}[rotation=undefined] 旋转参数\r\n*@param {Cesium.Cartesian3}[rotation.axis] 旋转轴\r\n*@param {Number}[rotation.angle] 旋转角度\r\n*@param {Cesium.Cartesian3}[rotation.scale] 缩放\r\n*@param {Cesium.Matrix4}[outModelMatrix] 计算结果矩阵，和返回值一样，但是传递此参数时则返回值不是新创建的Cesium.Matrix4实例\r\n*@return {Cesium.Matrix4}\r\n*/\r\nRendererUtils.computeModelMatrix = function (srcModelMatrix, translation, rotation, scale, outModelMatrix) {\r\n    if (arguments.length == 0) {\r\n        return srcModelMatrix;\r\n    }\r\n    if (!scratchTranslation) scratchTranslation = new Cesium.Cartesian3();\r\n    if (!scratchQuaternion) scratchQuaternion = new Cesium.Quaternion();\r\n    if (!scratchScale) scratchScale = new Cesium.Cartesian3();\r\n    if (!scratchTranslationQuaternionRotationScale) scratchTranslationQuaternionRotationScale = new Cesium.Matrix4()\r\n\r\n    var Matrix4 = Cesium.Matrix4;\r\n    if (!outModelMatrix) {\r\n        outModelMatrix = new Matrix4();\r\n    }\r\n    Matrix4.clone(srcModelMatrix, outModelMatrix);\r\n\r\n    if (!translation) {\r\n        scratchTranslation.x = 0;\r\n        scratchTranslation.y = 0;\r\n        scratchTranslation.z = 0;\r\n    }\r\n    scratchTranslation.x = translation.x;\r\n    scratchTranslation.y = translation.y;\r\n    scratchTranslation.z = translation.z;\r\n\r\n    if (!scale) {\r\n        scratchScale.x = 0;\r\n        scratchScale.y = 0;\r\n        scratchScale.z = 0;\r\n    }\r\n    scratchScale.x = scale.x;\r\n    scratchScale.y = scale.y;\r\n    scratchScale.z = scale.z;\r\n\r\n    if (rotation instanceof Cesium.Quaternion) {\r\n        Cesium.Quaternion.clone(rotation, scratchQuaternion);\r\n    } else {\r\n        var axis = rotation.axis;\r\n        var angle = rotation.angle;\r\n        Cesium.Quaternion.fromAxisAngle(\r\n            new Cesium.Cartesian3(axis.x, axis.y, axis.z),//axis.y=1 y是旋转轴\r\n            Cesium.Math.toRadians(angle),\r\n            scratchQuaternion\r\n        );\r\n    }\r\n\r\n    //translate,rotate,scale\r\n\r\n    Matrix4.fromTranslationQuaternionRotationScale(\r\n        scratchTranslation, scratchQuaternion,\r\n        scratchScale, scratchTranslationQuaternionRotationScale);\r\n\r\n    Matrix4.multiplyTransformation(\r\n        outModelMatrix,\r\n        scratchTranslationQuaternionRotationScale,\r\n        outModelMatrix);\r\n    return outModelMatrix;\r\n}\r\n\r\nexport default RendererUtils; ","﻿ \r\n/**\r\n*\r\n*@param {Cesium.Cartesian3}axis 旋转轴\r\n*@param {Number}angle 旋转角度\r\n*\r\n*@property {Cesium.Cartesian3}axis 旋转轴\r\n*@property {Number}angle 旋转角度\r\n*@property {Cesium.Event}paramChanged  \r\n*@constructor\r\n*@memberof Cesium\r\n*/\r\nfunction Rotation(axis, angle) {\r\n    this._axis = axis;\r\n    this._angle = angle;\r\n    this.paramChanged = new Cesium.Event();\r\n}\r\nObject.defineProperties(Rotation.prototype, {\r\n    axis: {\r\n        set: function (val) {\r\n            if (val.x != this._axis.x\r\n                || val.y != this._axis.y\r\n                || val.z != this._axis.z) {\r\n                this._axis = val;\r\n                this.paramChanged.raiseEvent();\r\n            }\r\n            this._axis = val;\r\n        },\r\n        get: function () {\r\n            return this._axis;\r\n        }\r\n    },\r\n    angle: {\r\n        set: function (val) {\r\n            if (val != this._angle) {\r\n                this._angle = val;\r\n                this.paramChanged.raiseEvent();\r\n            }\r\n            this._angle = val;\r\n        },\r\n        get: function () {\r\n            return this._angle;\r\n        }\r\n    }\r\n})\r\n\r\nexport default Rotation;","﻿\n/**\n*\n*@memberof Cesium\n*@constructor\n*/\nfunction ShaderUtils() {\n\n}\n\n/**\n*\n*\n*/\nShaderUtils.processShader3js = function (material3js, shader) {\n    var program = new WebGLProgram(material3js, shader);\n    return program;\n\n}\n\nif (typeof THREE != 'undefined') {\n \n    var shaderIDs = {\n        MeshDepthMaterial: 'depth',\n        MeshNormalMaterial: 'normal',\n        MeshBasicMaterial: 'basic',\n        MeshLambertMaterial: 'lambert',\n        MeshPhongMaterial: 'phong',\n        MeshToonMaterial: 'phong',\n        MeshStandardMaterial: 'physical',\n        MeshPhysicalMaterial: 'physical',\n        LineBasicMaterial: 'basic',\n        LineDashedMaterial: 'dashed',\n        PointsMaterial: 'points'\n    };\n\n    var parameterNames = [\n        \"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n        \"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n        \"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n        \"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n        \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n        \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n        \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n        \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n        \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n        \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\"\n    ];\n    var ShaderChunk = THREE.ShaderChunk;\n    var ShaderLib = THREE.ShaderLib;\n    var BackSide = THREE.BackSide,\n        DoubleSide = THREE.DoubleSide,\n        FlatShading = THREE.FlatShading,\n        CubeUVRefractionMapping = THREE.CubeUVRefractionMapping,\n        CubeUVReflectionMapping = THREE.CubeUVReflectionMapping,\n        GammaEncoding = THREE.GammaEncoding,\n        LinearEncoding = THREE.LinearEncoding,\n        NoToneMapping = THREE.NoToneMapping,\n        AddOperation = THREE.AddOperation,\n        MixOperation = THREE.MixOperation,\n        MultiplyOperation = THREE.MultiplyOperation,\n        EquirectangularRefractionMapping = THREE.EquirectangularRefractionMapping,\n        CubeRefractionMapping = THREE.CubeRefractionMapping,\n        SphericalReflectionMapping = THREE.SphericalReflectionMapping,\n        EquirectangularReflectionMapping = THREE.EquirectangularReflectionMapping,\n        CubeReflectionMapping = THREE.CubeReflectionMapping,\n        PCFSoftShadowMap = THREE.PCFSoftShadowMap,\n        PCFShadowMap = THREE.PCFShadowMap,\n        CineonToneMapping = THREE.CineonToneMapping,\n        Uncharted2ToneMapping = THREE.Uncharted2ToneMapping,\n        ReinhardToneMapping = THREE.ReinhardToneMapping,\n        LinearToneMapping = THREE.LinearToneMapping,\n        GammaEncoding = THREE.GammaEncoding,\n        RGBDEncoding = THREE.RGBDEncoding,\n        RGBM16Encoding = THREE.RGBM16Encoding,\n        RGBM7Encoding = THREE.RGBM7Encoding,\n        RGBEEncoding = THREE.RGBEEncoding,\n        sRGBEncoding = THREE.sRGBEncoding;\n\n    function getTextureEncodingFromMap(map, gammaOverrideLinear) {\n\n        var encoding;\n\n        if (!map) {\n\n            encoding = LinearEncoding;\n\n        } else if (map.isTexture) {\n\n            encoding = map.encoding;\n\n        } else if (map.isWebGLRenderTarget) {\n\n            console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n            encoding = map.texture.encoding;\n\n        }\n\n        // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n        if (encoding === LinearEncoding && gammaOverrideLinear) {\n\n            encoding = GammaEncoding;\n\n        }\n\n        return encoding;\n\n    }\n\n    function getParameters(material) {//, lights, fog, nClipPlanes, nClipIntersection, object) {\n\n        var shaderID = shaderIDs[material.type];\n\n        // heuristics to create shader parameters according to lights in the scene\n        // (not to blow over maxLights budget)\n\n        //var maxBones = allocateBones(object);\n        //var precision = renderer.getPrecision();\n\n        //if (material.precision !== null) {\n\n        //    precision = capabilities.getMaxPrecision(material.precision);\n\n        //    if (precision !== material.precision) {\n\n        //        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\n        //    }\n\n        //}\n\n        var currentRenderTarget = null;// renderer.getCurrentRenderTarget();\n        var renderer = {};\n        var parameters = {\n\n            shaderID: shaderID,\n\n            precision: \"high\",//precision,\n            supportsVertexTextures: true,// capabilities.vertexTextures,\n            outputEncoding: getTextureEncodingFromMap((!currentRenderTarget) ? null : currentRenderTarget.texture, renderer.gammaOutput),\n            map: !!material.map,\n            mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),\n            envMap: !!material.envMap,\n            envMapMode: material.envMap && material.envMap.mapping,\n            envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),\n            envMapCubeUV: (!!material.envMap) && ((material.envMap.mapping === CubeUVReflectionMapping) || (material.envMap.mapping === CubeUVRefractionMapping)),\n            lightMap: !!material.lightMap,\n            aoMap: !!material.aoMap,\n            emissiveMap: !!material.emissiveMap,\n            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),\n            bumpMap: !!material.bumpMap,\n            normalMap: !!material.normalMap,\n            displacementMap: !!material.displacementMap,\n            roughnessMap: !!material.roughnessMap,\n            metalnessMap: !!material.metalnessMap,\n            specularMap: !!material.specularMap,\n            alphaMap: !!material.alphaMap,\n\n            gradientMap: !!material.gradientMap,\n\n            combine: material.combine,\n\n            vertexColors: material.vertexColors,\n\n            fog: false,//!!fog,\n            useFog: material.fog,\n            fogExp: false,//(fog && fog.isFogExp2),\n\n            flatShading: material.shading === FlatShading,\n\n            sizeAttenuation: material.sizeAttenuation,\n            logarithmicDepthBuffer: false,// capabilities.logarithmicDepthBuffer,\n\n            skinning: material.skinning,\n            //maxBones: maxBones,\n            //useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n            morphTargets: material.morphTargets,\n            morphNormals: material.morphNormals,\n            //maxMorphTargets: renderer.maxMorphTargets,\n            //maxMorphNormals: renderer.maxMorphNormals,\n\n            numDirLights: 0,// lights.directional.length,\n            numPointLights: 0,// lights.point.length,\n            numSpotLights: 0,// lights.spot.length,\n            numRectAreaLights: 0,// lights.rectArea.length,\n            numHemiLights: 0,// lights.hemi.length,\n\n            numClippingPlanes: 0,//nClipPlanes,\n            numClipIntersection: 0,//nClipIntersection,\n\n            //shadowMapEnabled:  renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n            //shadowMapType: renderer.shadowMap.type,\n\n            //toneMapping: renderer.toneMapping,\n            //physicallyCorrectLights: renderer.physicallyCorrectLights,\n\n            premultipliedAlpha: material.premultipliedAlpha,\n\n            alphaTest: material.alphaTest,\n            doubleSided: material.side === DoubleSide,\n            flipSided: material.side === BackSide,\n\n            depthPacking: (material.depthPacking !== undefined) ? material.depthPacking : false\n\n        };\n\n        return parameters;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    var programIdCount = 0;\n\n    function getEncodingComponents(encoding) {\n\n        switch (encoding) {\n\n            case LinearEncoding:\n                return ['Linear', '( value )'];\n            case sRGBEncoding:\n                return ['sRGB', '( value )'];\n            case RGBEEncoding:\n                return ['RGBE', '( value )'];\n            case RGBM7Encoding:\n                return ['RGBM', '( value, 7.0 )'];\n            case RGBM16Encoding:\n                return ['RGBM', '( value, 16.0 )'];\n            case RGBDEncoding:\n                return ['RGBD', '( value, 256.0 )'];\n            case GammaEncoding:\n                return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n            default:\n                throw new Error('unsupported encoding: ' + encoding);\n\n        }\n\n    }\n\n    function getTexelDecodingFunction(functionName, encoding) {\n\n        var components = getEncodingComponents(encoding);\n        return \"vec4 \" + functionName + \"( vec4 value ) {  return \" + components[0] + \"ToLinear\" + components[1] + \" ; }\";\n\n    }\n\n    function getTexelEncodingFunction(functionName, encoding) {\n\n        var components = getEncodingComponents(encoding);\n        return \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[0] + components[1] + \" ; }\";\n\n    }\n\n    function getToneMappingFunction(functionName, toneMapping) {\n\n        var toneMappingName;\n\n        switch (toneMapping) {\n\n            case LinearToneMapping:\n                toneMappingName = \"Linear\";\n                break;\n\n            case ReinhardToneMapping:\n                toneMappingName = \"Reinhard\";\n                break;\n\n            case Uncharted2ToneMapping:\n                toneMappingName = \"Uncharted2\";\n                break;\n\n            case CineonToneMapping:\n                toneMappingName = \"OptimizedCineon\";\n                break;\n\n            default:\n                throw new Error('unsupported toneMapping: ' + toneMapping);\n\n        }\n\n        return \"vec3 \" + functionName + \"( vec3 color ) {  return \" + toneMappingName + \"ToneMapping( color );  }\";\n\n    }\n\n    function generateExtensions(extensions, parameters, rendererExtensions) {\n\n        extensions = extensions || {};\n\n        var chunks = [\n            (extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading) ? '#extension GL_OES_standard_derivatives : enable' : '',\n            (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get('EXT_frag_depth') ? '#extension GL_EXT_frag_depth : enable' : '',\n            (extensions.drawBuffers) && rendererExtensions.get('WEBGL_draw_buffers') ? '#extension GL_EXT_draw_buffers : require' : '',\n            (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get('EXT_shader_texture_lod') ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n        ];\n\n        return chunks.filter(filterEmptyLine).join('\\n');\n\n    }\n\n    function generateDefines(defines) {\n\n        var chunks = [];\n\n        for (var name in defines) {\n\n            var value = defines[name];\n\n            if (value === false) continue;\n\n            chunks.push('#define ' + name + ' ' + value);\n\n        }\n\n        return chunks.join('\\n');\n\n    }\n\n    function filterEmptyLine(string) {\n\n        return string !== '';\n\n    }\n\n    function replaceLightNums(string, parameters) {\n\n        return string\n            .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights)\n            .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights)\n            .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights)\n            .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights)\n            .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);\n\n    }\n\n    function parseIncludes(string) {\n\n        var pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n        function replace(match, include) {\n\n            var replace = ShaderChunk[include];\n\n            if (replace === undefined) {\n\n                throw new Error('Can not resolve #include <' + include + '>');\n\n            }\n\n            return parseIncludes(replace);\n\n        }\n\n        return string.replace(pattern, replace);\n\n    }\n\n    function unrollLoops(string) {\n\n        var pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n        function replace(match, start, end, snippet) {\n\n            var unroll = '';\n\n            for (var i = parseInt(start); i < parseInt(end); i++) {\n\n                unroll += snippet.replace(/\\[ i \\]/g, '[ ' + i + ' ]');\n\n            }\n\n            return unroll;\n\n        }\n\n        return string.replace(pattern, replace);\n\n    }\n\n    function WebGLProgram(material, shader) {//, parameters) {\n\n        var parameters = getParameters(material);\n        //var shader = ShaderLib[parameters.shaderID];\n\n        //var extensions = material.extensions;\n        var defines = material.defines;\n\n        var vertexShader = shader.vertexShader;\n        var fragmentShader = shader.fragmentShader;\n\n        var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n        if (parameters.shadowMapType === THREE.PCFShadowMap) {\n\n            shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n        } else if (parameters.shadowMapType === THREE.PCFSoftShadowMap) {\n\n            shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n        }\n\n        var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n        var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n        var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n        if (parameters.envMap) {\n\n            switch (material.envMap.mapping) {\n\n                case CubeReflectionMapping:\n                case CubeRefractionMapping:\n                    envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n                    break;\n\n                case CubeUVReflectionMapping:\n                case CubeUVRefractionMapping:\n                    envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n                    break;\n\n                case EquirectangularReflectionMapping:\n                case EquirectangularRefractionMapping:\n                    envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n                    break;\n\n                case SphericalReflectionMapping:\n                    envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n                    break;\n\n            }\n\n            switch (material.envMap.mapping) {\n\n                case CubeRefractionMapping:\n                case EquirectangularRefractionMapping:\n                    envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n                    break;\n\n            }\n\n            switch (material.combine) {\n\n                case MultiplyOperation:\n                    envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n                    break;\n\n                case MixOperation:\n                    envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n                    break;\n\n                case AddOperation:\n                    envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n                    break;\n\n            }\n\n        }\n\n        var gammaFactorDefine = 1.0;// (renderer.gammaFactor > 0) ? renderer.gammaFactor : 1.0;\n\n\n        // var customExtensions = generateExtensions(extensions, parameters, renderer.extensions);\n\n        var customDefines = generateDefines(defines);\n\n\n        var prefixVertex, prefixFragment;\n\n        if (material.isRawShaderMaterial) {\n\n            prefixVertex = [\n\n                customDefines,\n\n                '\\n'\n\n            ].filter(filterEmptyLine).join('\\n');\n\n            prefixFragment = [\n\n                //customExtensions,\n                customDefines,\n\n                '\\n'\n\n            ].filter(filterEmptyLine).join('\\n');\n\n        } else {\n\n            prefixVertex = [\n\n                //'precision ' + parameters.precision + ' float;',\n                //'precision ' + parameters.precision + ' int;',\n\n                '#define SHADER_NAME ' + shader.name,\n\n                //customDefines,\n\n                parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n                '#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n                '#define MAX_BONES ' + parameters.maxBones,\n                //(parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',\n                //(parameters.useFog && parameters.fogExp) ? '#define FOG_EXP2' : '',\n\n                parameters.map ? '#define USE_MAP' : '',\n                parameters.envMap ? '#define USE_ENVMAP' : '',\n                parameters.envMap ? '#define ' + envMapModeDefine : '',\n                parameters.lightMap ? '#define USE_LIGHTMAP' : '',\n                parameters.aoMap ? '#define USE_AOMAP' : '',\n                parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n                parameters.bumpMap ? '#define USE_BUMPMAP' : '',\n                parameters.normalMap ? '#define USE_NORMALMAP' : '',\n                parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n                parameters.specularMap ? '#define USE_SPECULARMAP' : '',\n                parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n                parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n                parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n                parameters.vertexColors ? '#define USE_COLOR' : '',\n\n                parameters.flatShading ? '#define FLAT_SHADED' : '',\n\n                parameters.skinning ? '#define USE_SKINNING' : '',\n                parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n                parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n                parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n                parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n                parameters.flipSided ? '#define FLIP_SIDED' : '',\n\n                '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n                parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n                parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n                parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n                parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n                //parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n                //'uniform mat4 modelMatrix;',\n                //'uniform mat4 modelViewMatrix;',\n                //'uniform mat4 projectionMatrix;',\n                //'uniform mat4 viewMatrix;',\n                //'uniform mat3 normalMatrix;',\n                //'uniform vec3 cameraPosition;',\n\n                //'attribute vec3 position;',\n                //'attribute vec3 normal;',\n                //'attribute vec2 uv;',\n\n                '#ifdef USE_COLOR',\n\n                '\tattribute vec3 color;',\n\n                '#endif',\n\n                '#ifdef USE_MORPHTARGETS',\n\n                '\tattribute vec3 morphTarget0;',\n                '\tattribute vec3 morphTarget1;',\n                '\tattribute vec3 morphTarget2;',\n                '\tattribute vec3 morphTarget3;',\n\n                '\t#ifdef USE_MORPHNORMALS',\n\n                '\t\tattribute vec3 morphNormal0;',\n                '\t\tattribute vec3 morphNormal1;',\n                '\t\tattribute vec3 morphNormal2;',\n                '\t\tattribute vec3 morphNormal3;',\n\n                '\t#else',\n\n                '\t\tattribute vec3 morphTarget4;',\n                '\t\tattribute vec3 morphTarget5;',\n                '\t\tattribute vec3 morphTarget6;',\n                '\t\tattribute vec3 morphTarget7;',\n\n                '\t#endif',\n\n                '#endif',\n\n                '#ifdef USE_SKINNING',\n\n                '\tattribute vec4 skinIndex;',\n                '\tattribute vec4 skinWeight;',\n\n                '#endif',\n\n                '\\n'\n\n            ].filter(filterEmptyLine).join('\\n');\n\n            prefixFragment = [\n\n                //customExtensions,\n\n                //'precision ' + parameters.precision + ' float;',\n                //'precision ' + parameters.precision + ' int;',\n\n                '#define SHADER_NAME ' + shader.name,\n\n                customDefines,\n\n                parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n                '#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n                (parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',\n                (parameters.useFog && parameters.fogExp) ? '#define FOG_EXP2' : '',\n\n                parameters.map ? '#define USE_MAP' : '',\n                parameters.envMap ? '#define USE_ENVMAP' : '',\n                parameters.envMap ? '#define ' + envMapTypeDefine : '',\n                parameters.envMap ? '#define ' + envMapModeDefine : '',\n                parameters.envMap ? '#define ' + envMapBlendingDefine : '',\n                parameters.lightMap ? '#define USE_LIGHTMAP' : '',\n                parameters.aoMap ? '#define USE_AOMAP' : '',\n                parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n                parameters.bumpMap ? '#define USE_BUMPMAP' : '',\n                parameters.normalMap ? '#define USE_NORMALMAP' : '',\n                parameters.specularMap ? '#define USE_SPECULARMAP' : '',\n                parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n                parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n                parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n                parameters.vertexColors ? '#define USE_COLOR' : '',\n\n                parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n                parameters.flatShading ? '#define FLAT_SHADED' : '',\n\n                parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n                parameters.flipSided ? '#define FLIP_SIDED' : '',\n\n                '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n                '#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),\n\n                parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n                parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n                parameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n                parameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n                parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n                //parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n                //parameters.envMap && renderer.extensions.get('EXT_shader_texture_lod') ? '#define TEXTURE_LOD_EXT' : '',\n\n                'uniform mat4 viewMatrix;',\n                'uniform vec3 cameraPosition;',\n\n                //(parameters.toneMapping !== THREE.NoToneMapping) ? \"#define TONE_MAPPING\" : '',\n                //(parameters.toneMapping !== THREE.NoToneMapping) ? ShaderChunk['tonemapping_pars_fragment'] : '',  // this code is required here because it is used by the toneMapping() function defined below\n                //(parameters.toneMapping !== THREE.NoToneMapping) ? getToneMappingFunction(\"toneMapping\", parameters.toneMapping) : '',\n\n                parameters.dithering ? '#define DITHERING' : '',\n\n                (parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding) ? ShaderChunk['encodings_pars_fragment'] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n                parameters.mapEncoding ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',\n                parameters.envMapEncoding ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '',\n                parameters.emissiveMapEncoding ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '',\n                parameters.outputEncoding ? getTexelEncodingFunction(\"linearToOutputTexel\", parameters.outputEncoding) : '',\n\n                parameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n                '\\n'\n\n            ].filter(filterEmptyLine).join('\\n');\n\n        }\n\n        vertexShader = parseIncludes(vertexShader);\n        vertexShader = replaceLightNums(vertexShader, parameters);\n\n        fragmentShader = parseIncludes(fragmentShader);\n        fragmentShader = replaceLightNums(fragmentShader, parameters);\n\n        if (!material.isShaderMaterial) {\n\n            vertexShader = unrollLoops(vertexShader);\n            fragmentShader = unrollLoops(fragmentShader);\n\n        }\n\n        var vertexGlsl = prefixVertex + vertexShader;\n        var fragmentGlsl = prefixFragment + fragmentShader;\n\n\n        this.id = programIdCount++;\n        this.usedTimes = 1;\n        this.vertexShader = vertexGlsl;\n        this.fragmentShader = fragmentGlsl;\n\n        return this;\n\n    }\n\n}\nexport default ShaderUtils;","﻿\nimport none_frag from './none_frag.js';\nimport none_vert from './none_vert.js';\nimport normals_frag from './normals_frag.js';\nimport normals_vert from './normals_vert.js';\nimport texture_frag from './texture_frag.js';\nimport texture_vert from './texture_vert.js';\nimport texture_normals_frag from './texture_normals_frag.js';\nimport texture_normals_vert from './texture_normals_vert.js';\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\nvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\nvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\nvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat theta = acos( dot( N, V ) );\\n\\tvec2 uv = vec2(\\n\\t\\tsqrt( saturate( roughness ) ),\\n\\t\\tsaturate( theta / ( 0.5 * PI ) ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\n\\tfloat b = 3.45068 + (4.18814 + y) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\n\\treturn result;\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\nvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\nvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transpose( const in mat3 v ) {\\n\\tmat3 tmp;\\n\\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\\n\\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\\n\\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\\n\\treturn tmp;\\n}\\n\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\nvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = asin( flipNormal * reflectVec.y ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\nvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\nvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltcMat;\\tuniform sampler2D ltcMag;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tfloat norm = texture2D( ltcMag, uv ).a;\\n\\t\\tvec4 t = texture2D( ltcMat, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3(   1,   0, t.y ),\\n\\t\\t\\tvec3(   0, t.z,   0 ),\\n\\t\\t\\tvec3( t.w,   0, t.x )\\n\\t\\t);\\n\\t\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\nvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\nvar logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\nvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\nvar normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\nvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\nvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\nvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\nvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\nvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\nvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\nvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\nvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\nvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\nvar distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\nvar distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\nvar equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\nvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\nvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\nvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\nvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\\n}\\n\";\n\nvar shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\nvar ShaderChunk = {\n    alphamap_fragment: alphamap_fragment,\n    alphamap_pars_fragment: alphamap_pars_fragment,\n    alphatest_fragment: alphatest_fragment,\n    aomap_fragment: aomap_fragment,\n    aomap_pars_fragment: aomap_pars_fragment,\n    begin_vertex: begin_vertex,\n    beginnormal_vertex: beginnormal_vertex,\n    bsdfs: bsdfs,\n    bumpmap_pars_fragment: bumpmap_pars_fragment,\n    clipping_planes_fragment: clipping_planes_fragment,\n    clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    clipping_planes_vertex: clipping_planes_vertex,\n    color_fragment: color_fragment,\n    color_pars_fragment: color_pars_fragment,\n    color_pars_vertex: color_pars_vertex,\n    color_vertex: color_vertex,\n    common: common,\n    cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    defaultnormal_vertex: defaultnormal_vertex,\n    displacementmap_pars_vertex: displacementmap_pars_vertex,\n    displacementmap_vertex: displacementmap_vertex,\n    emissivemap_fragment: emissivemap_fragment,\n    emissivemap_pars_fragment: emissivemap_pars_fragment,\n    encodings_fragment: encodings_fragment,\n    encodings_pars_fragment: encodings_pars_fragment,\n    envmap_fragment: envmap_fragment,\n    envmap_pars_fragment: envmap_pars_fragment,\n    envmap_pars_vertex: envmap_pars_vertex,\n    envmap_vertex: envmap_vertex,\n    fog_vertex: fog_vertex,\n    fog_pars_vertex: fog_pars_vertex,\n    fog_fragment: fog_fragment,\n    fog_pars_fragment: fog_pars_fragment,\n    gradientmap_pars_fragment: gradientmap_pars_fragment,\n    lightmap_fragment: lightmap_fragment,\n    lightmap_pars_fragment: lightmap_pars_fragment,\n    lights_lambert_vertex: lights_lambert_vertex,\n    lights_pars: lights_pars,\n    lights_phong_fragment: lights_phong_fragment,\n    lights_phong_pars_fragment: lights_phong_pars_fragment,\n    lights_physical_fragment: lights_physical_fragment,\n    lights_physical_pars_fragment: lights_physical_pars_fragment,\n    lights_template: lights_template,\n    logdepthbuf_fragment: logdepthbuf_fragment,\n    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    logdepthbuf_vertex: logdepthbuf_vertex,\n    map_fragment: map_fragment,\n    map_pars_fragment: map_pars_fragment,\n    map_particle_fragment: map_particle_fragment,\n    map_particle_pars_fragment: map_particle_pars_fragment,\n    metalnessmap_fragment: metalnessmap_fragment,\n    metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    morphnormal_vertex: morphnormal_vertex,\n    morphtarget_pars_vertex: morphtarget_pars_vertex,\n    morphtarget_vertex: morphtarget_vertex,\n    normal_flip: normal_flip,\n    normal_fragment: normal_fragment,\n    normalmap_pars_fragment: normalmap_pars_fragment,\n    packing: packing,\n    premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    project_vertex: project_vertex,\n    dithering_fragment: dithering_fragment,\n    dithering_pars_fragment: dithering_pars_fragment,\n    roughnessmap_fragment: roughnessmap_fragment,\n    roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    shadowmap_pars_fragment: shadowmap_pars_fragment,\n    shadowmap_pars_vertex: shadowmap_pars_vertex,\n    shadowmap_vertex: shadowmap_vertex,\n    shadowmask_pars_fragment: shadowmask_pars_fragment,\n    skinbase_vertex: skinbase_vertex,\n    skinning_pars_vertex: skinning_pars_vertex,\n    skinning_vertex: skinning_vertex,\n    skinnormal_vertex: skinnormal_vertex,\n    specularmap_fragment: specularmap_fragment,\n    specularmap_pars_fragment: specularmap_pars_fragment,\n    tonemapping_fragment: tonemapping_fragment,\n    tonemapping_pars_fragment: tonemapping_pars_fragment,\n    uv_pars_fragment: uv_pars_fragment,\n    uv_pars_vertex: uv_pars_vertex,\n    uv_vertex: uv_vertex,\n    uv2_pars_fragment: uv2_pars_fragment,\n    uv2_pars_vertex: uv2_pars_vertex,\n    uv2_vertex: uv2_vertex,\n    worldpos_vertex: worldpos_vertex,\n\n    cube_frag: cube_frag,\n    cube_vert: cube_vert,\n    depth_frag: depth_frag,\n    depth_vert: depth_vert,\n    distanceRGBA_frag: distanceRGBA_frag,\n    distanceRGBA_vert: distanceRGBA_vert,\n    equirect_frag: equirect_frag,\n    equirect_vert: equirect_vert,\n    linedashed_frag: linedashed_frag,\n    linedashed_vert: linedashed_vert,\n    meshbasic_frag: meshbasic_frag,\n    meshbasic_vert: meshbasic_vert,\n    meshlambert_frag: meshlambert_frag,\n    meshlambert_vert: meshlambert_vert,\n    meshphong_frag: meshphong_frag,\n    meshphong_vert: meshphong_vert,\n    meshphysical_frag: meshphysical_frag,\n    meshphysical_vert: meshphysical_vert,\n    normal_frag: normal_frag,\n    normal_vert: normal_vert,\n    points_frag: points_frag,\n    points_vert: points_vert,\n    shadow_frag: shadow_frag,\n    shadow_vert: shadow_vert,\n\n    none_frag: none_frag,\n    none_vert: none_vert,\n    normals_frag: normals_frag,\n    normals_vert: normals_vert,\n    texture_frag: texture_frag,\n    texture_vert: texture_vert,\n    texture_normals_frag: texture_normals_frag,\n    texture_normals_vert: texture_normals_vert\n};\n\nShaderChunk.parseIncludes = function (string) {\n\n    var pattern = /#include +<([\\w\\d.]+)>/g;\n\n    function replace(match, include) {\n\n        var replace = ShaderChunk[include];\n\n        if (replace === undefined) {\n\n            throw new Error('Can not resolve #include <' + include + '>');\n\n        }\n\n        return ShaderChunk.parseIncludes(replace);\n\n    }\n\n    return string.replace(pattern, replace);\n\n}\nexport default ShaderChunk; ","﻿\nimport ShaderChunk from './ShaderChunk.js';\n\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nvar UniformsLib = {\n\n    common: {\n\n        diffuse: {\n            value: {\n                isColor: true,\n                red: 1, green: 1, blue: 1, alpha: 1\n            }\n            // new Cesium.Color(0xeeeeee)\n        },\n        opacity: { value: 1.0 },\n\n        map: { value: null },\n        offsetRepeat: {\n            value: {\n                isCartesian4: true,\n                x: 0, y: 0, z: 1, w: 1\n            }\n            //new Cesium.Cartesian4(0, 0, 1, 1) \n        },\n\n        specularMap: { value: null },\n        alphaMap: { value: null },\n\n        envMap: { value: null },\n        flipEnvMap: { value: -1 },\n        reflectivity: { value: 1.0 },\n        refractionRatio: { value: 0.98 }\n\n    },\n\n    aomap: {\n\n        aoMap: { value: null },\n        aoMapIntensity: { value: 1 }\n\n    },\n\n    lightmap: {\n\n        lightMap: { value: null },\n        lightMapIntensity: { value: 1 }\n\n    },\n\n    emissivemap: {\n\n        emissiveMap: { value: null }\n\n    },\n\n    bumpmap: {\n\n        bumpMap: { value: null },\n        bumpScale: { value: 1 }\n\n    },\n\n    normalmap: {\n\n        normalMap: { value: null },\n        normalScale: {\n            value: {\n                isCartesian2: true,\n                x: 1, y: 1\n            }\n            //new Cesium.Cartesian2(1, 1) \n        }\n\n    },\n\n    displacementmap: {\n\n        displacementMap: { value: null },\n        displacementScale: { value: 1 },\n        displacementBias: { value: 0 }\n\n    },\n\n    roughnessmap: {\n\n        roughnessMap: { value: null }\n\n    },\n\n    metalnessmap: {\n\n        metalnessMap: { value: null }\n\n    },\n\n    gradientmap: {\n\n        gradientMap: { value: null }\n\n    },\n\n    fog: {\n\n        fogDensity: { value: 0.00025 },\n        fogNear: { value: 1 },\n        fogFar: { value: 2000 },\n        fogColor: {\n            value: {\n                isColor: true,\n                red: 0, green: 0, blue: 1, alpha: 1\n            }\n            // new Cesium.Color(0xffffff) \n        }\n\n    },\n\n    lights: {\n\n        ambientLightColor: { value: [] },\n\n        directionalLights: {\n            value: [], properties: {\n                direction: {},\n                color: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {}\n            }\n        },\n\n        directionalShadowMap: { value: [] },\n        directionalShadowMatrix: { value: [] },\n\n        spotLights: {\n            value: [], properties: {\n                color: {},\n                position: {},\n                direction: {},\n                distance: {},\n                coneCos: {},\n                penumbraCos: {},\n                decay: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {}\n            }\n        },\n\n        spotShadowMap: { value: [] },\n        spotShadowMatrix: { value: [] },\n\n        pointLights: {\n            value: [], properties: {\n                color: {},\n                position: {},\n                decay: {},\n                distance: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {}\n            }\n        },\n\n        pointShadowMap: { value: [] },\n        pointShadowMatrix: { value: [] },\n\n        hemisphereLights: {\n            value: [], properties: {\n                direction: {},\n                skyColor: {},\n                groundColor: {}\n            }\n        },\n\n        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n        rectAreaLights: {\n            value: [], properties: {\n                color: {},\n                position: {},\n                width: {},\n                height: {}\n            }\n        }\n\n    },\n\n    points: {\n\n        diffuse: {\n            value: {\n                isColor: true,\n                red: 1, green: 1, blue: 1, alpha: 1\n            }\n            // new Cesium.Color(0xeeeeee) \n        },\n        opacity: { value: 1.0 },\n        size: { value: 1.0 },\n        scale: { value: 1.0 },\n        map: { value: null },\n        offsetRepeat: {\n            value: {\n                isCartesian4: true,\n                x: 0, y: 0, z: 1, w: 1\n            }\n            // new Cesium.Cartesian4(0, 0, 1, 1) \n        }\n\n    }\n\n};\n\n/**\n * Uniform Utilities\n */\n\nvar UniformsUtils = {\n\n    merge: function (uniforms) {\n\n        var merged = {};\n\n        for (var u = 0; u < uniforms.length; u++) {\n\n            var tmp = this.clone(uniforms[u]);\n\n            for (var p in tmp) {\n\n                merged[p] = tmp[p];\n\n            }\n\n        }\n\n        return merged;\n\n    },\n\n    clone: function (uniforms_src) {\n\n        var uniforms_dst = {};\n\n        for (var u in uniforms_src) {\n\n            uniforms_dst[u] = {};\n\n            for (var p in uniforms_src[u]) {\n\n                var parameter_src = uniforms_src[u][p];\n\n                if (typeof Cesium != 'undefined' && parameter_src && (parameter_src instanceof Cesium.Color ||\n                    parameter_src instanceof Cesium.Matrix3 || parameter_src instanceof Cesium.Matrix4 ||\n                    parameter_src instanceof Cesium.Cartesian2 || parameter_src instanceof Cesium.Cartesian3\n                    || parameter_src instanceof Cesium.Cartesian4\n                    //||parameter_src.isTexture\n                )) {\n\n                    uniforms_dst[u][p] = parameter_src.constructor.clone(parameter_src);//.clone();\n\n                } else if (Array.isArray(parameter_src)) {\n\n                    uniforms_dst[u][p] = parameter_src.slice();\n\n                } else if (typeof Cesium != 'undefined' && parameter_src) {\n                    if (parameter_src.isColor) {\n                        uniforms_dst[u][p] = Cesium.Color.clone(parameter_src);\n\n                    } else if (parameter_src.isCartesian2) {\n                        uniforms_dst[u][p] = Cesium.Cartesian2.clone(parameter_src);\n\n                    } else if (parameter_src.isCartesian3) {\n                        uniforms_dst[u][p] = Cesium.Cartesian3.clone(parameter_src);\n\n                    } else if (parameter_src.isCartesian4) {\n                        uniforms_dst[u][p] = Cesium.Cartesian4.clone(parameter_src);\n\n                    } else {\n\n                        uniforms_dst[u][p] = parameter_src;\n\n                    }\n                } else {\n\n                    uniforms_dst[u][p] = parameter_src;\n\n                }\n\n            }\n\n        }\n\n        return uniforms_dst;\n\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\nvar ShaderLib = {\n\n    basic: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.fog\n        ]),\n\n        vertexShader: ShaderChunk.meshbasic_vert,\n        fragmentShader: ShaderChunk.meshbasic_frag\n\n    },\n\n    lambert: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: {\n                    value: {\n                        isColor: true,\n                        red: 1, green: 1, blue: 1, alpha: 1\n                    }\n                    // new Cesium.Color(0x000000) \n                }\n            }\n        ]),\n\n        vertexShader: ShaderChunk.meshlambert_vert,\n        fragmentShader: ShaderChunk.meshlambert_frag\n\n    },\n\n    phong: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.gradientmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: {\n                    value: {\n                        isColor: true,\n                        red: 1, green: 1, blue: 1, alpha: 1\n                    }\n                    // new Cesium.Color(0x000000) \n                },\n                specular: {\n                    value:\n                    {\n                        isColor: true,\n                        red: 1, green: 1, blue: 1, alpha: 1\n                    }\n                    // new Cesium.Color(0x111111) \n                },\n                shininess: { value: 30 }\n            }\n        ]),\n\n        vertexShader: ShaderChunk.meshphong_vert,\n        fragmentShader: ShaderChunk.meshphong_frag\n\n    },\n\n    standard: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.roughnessmap,\n            UniformsLib.metalnessmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: {\n                    value: {\n                        isColor: true,\n                        red: 0, green: 0, blue: 0, alpha: 1\n                    }\n                    // new Cesium.Color(0x000000) \n                },\n                roughness: { value: 0.5 },\n                metalness: { value: 0.5 },\n                envMapIntensity: { value: 1 } // temporary\n            }\n        ]),\n\n        vertexShader: ShaderChunk.meshphysical_vert,\n        fragmentShader: ShaderChunk.meshphysical_frag\n\n    },\n\n    points: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.points,\n            UniformsLib.fog\n        ]),\n\n        vertexShader: ShaderChunk.points_vert,\n        fragmentShader: ShaderChunk.points_frag\n\n    },\n\n    dashed: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 }\n            }\n        ]),\n\n        vertexShader: ShaderChunk.linedashed_vert,\n        fragmentShader: ShaderChunk.linedashed_frag\n\n    },\n\n    depth: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap\n        ]),\n\n        vertexShader: ShaderChunk.depth_vert,\n        fragmentShader: ShaderChunk.depth_frag\n\n    },\n\n    normal: {\n\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            {\n                opacity: { value: 1.0 }\n            }\n        ]),\n\n        vertexShader: ShaderChunk.normal_vert,\n        fragmentShader: ShaderChunk.normal_frag\n\n    },\n\n    /* -------------------------------------------------------------------------\n    //\tCube map shader\n     ------------------------------------------------------------------------- */\n\n    cube: {\n\n        uniforms: {\n            tCube: { value: null },\n            tFlip: { value: -1 },\n            opacity: { value: 1.0 }\n        },\n\n        vertexShader: ShaderChunk.cube_vert,\n        fragmentShader: ShaderChunk.cube_frag\n\n    },\n\n    /* -------------------------------------------------------------------------\n    //\tCube map shader\n     ------------------------------------------------------------------------- */\n\n    equirect: {\n\n        uniforms: {\n            tEquirect: { value: null },\n            tFlip: { value: -1 }\n        },\n\n        vertexShader: ShaderChunk.equirect_vert,\n        fragmentShader: ShaderChunk.equirect_frag\n\n    },\n\n    distanceRGBA: {\n\n        uniforms: {\n            lightPos: { value: {\n                isCartesian3:true,\n                x:0,y:0,z:0\n            }\n                //new Cesium.Cartesian3() \n            }\n        },\n\n        vertexShader: ShaderChunk.distanceRGBA_vert,\n        fragmentShader: ShaderChunk.distanceRGBA_frag\n\n    }\n\n};\n\nShaderLib.physical = {\n\n    uniforms: UniformsUtils.merge([\n        ShaderLib.standard.uniforms,\n        {\n            clearCoat: { value: 0 },\n            clearCoatRoughness: { value: 0 }\n        }\n    ]),\n\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nexport default ShaderLib;","\nvar texture_frag = \"\\n\\\n#ifdef GL_ES\\n\\\n    precision highp float;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec3 v_position;\\n\\\nvarying vec2 v_texcoord0;\\n\\\n\\n\\\nuniform vec4 ambientColor;\\n\\\nuniform sampler2D diffuseColorMap;\\n\\\nuniform vec4 specularColor;\\n\\\nuniform float specularShininess;\\n\\\nuniform float picked;\\n\\\nuniform vec4  pickedColor;\\n\\\n\\n\\\nuniform float alpha;\\n\\\n\\n\\\nvoid main(void) \\n\\\n{\\n\\\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\\n\\\n    vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 lightColor = vec3(1.0,1.0,1.0);\\n\\\n    vec4 ambient = ambientColor;\\n\\\n    vec4 diffuse = texture2D(diffuseColorMap, v_texcoord0);\\n\\\n    vec4 specular = specularColor;\\n\\\n    color.xyz += ambient.xyz;\\n\\\n    color.xyz += diffuse.xyz;\\n\\\n    color.xyz += specular.xyz;\\n\\\n    color = vec4(diffuse.rgb * diffuse.a, diffuse.a*alpha);\\n\\\n    gl_FragColor = color;\\n\\\n    if(picked!=0.0){\\n\\\n        gl_FragColor =mix(color, pickedColor*0.5,1.0);\\n\\\n    }\\n\\\n}\";\nexport default texture_frag; \n","\nvar texture_vert = \"\\n\\\n#ifdef GL_ES\\n\\\n    precision highp float;\\n\\\n#endif\\n\\\n\\n\\\n\\n\\\n\\n\\\nvarying vec3 v_position;\\n\\\nvarying vec2 v_texcoord0;\\n\\\n\\n\\\nvoid main(void) \\n\\\n{\\n\\\n    vec4 pos =  modelViewMatrix * vec4( position,1.0);\\n\\\n    v_texcoord0 =  uv;\\n\\\n    v_position = pos.xyz;\\n\\\n    gl_Position =  projectionMatrix * pos;\\n\\\n}\";\n\nexport default texture_vert; ","﻿\r\nimport RendererUtils from './Core/RendererUtils.js';\r\nimport Mesh from './Core/Mesh.js';\r\nimport MeshMaterial from './Core/MeshMaterial.js';\r\nimport ShaderChunk from './Core/Shaders/ShaderChunk.js';\r\nimport MeshVisualizer from './Core/MeshVisualizer.js';\r\nimport FramebufferTexture from './Core/FramebufferTexture.js';\r\nimport GeometryUtils from './Core/GeometryUtils.js';\r\nimport LOD from './Core/LOD.js';\r\nimport PlaneGeometry from './Core/PlaneGeometry.js';\r\nimport Rotation from './Core/Rotation.js';\r\nimport ReferenceMesh from './Core/ReferenceMesh.js';\r\nimport BasicMeshMaterial from './Core/BasicMeshMaterial.js';\r\nimport BasicGeometry from './Core/BasicGeometry.js';\r\nimport ShaderLib from './Core/Shaders/ShaderLib.js';\r\nimport PlaneBufferGeometry from './Core/PlaneBufferGeometry.js';\r\nimport CSG from './Util/CSG.js';\r\nimport MeshPhongMaterial from './Core/MeshPhongMaterial.js';\r\nimport MaterialUtils from './Core/MaterialUtils.js';\r\nimport ShaderUtils from './Core/ShaderUtils.js';\r\nimport defineProperty from './Util/defineProperty.js';\r\n\r\n// var g = typeof window != 'undefined' ? window : (typeof global != 'undefined' ? global : globalThis);\r\nvar CesiumMeshVisualizer = {};\r\nif (typeof Cesium !== 'undefined') {\r\n    //     g.Cesium = {};\r\n    // } else {\r\n    CesiumMeshVisualizer = Cesium;\r\n}\r\n\r\nCesiumMeshVisualizer.defineProperty = defineProperty;\r\nCesiumMeshVisualizer.RendererUtils = RendererUtils;\r\nCesiumMeshVisualizer.MaterialUtils = MaterialUtils;\r\nCesiumMeshVisualizer.ShaderUtils = ShaderUtils;\r\nCesiumMeshVisualizer.GeometryUtils = GeometryUtils;\r\n\r\nCesiumMeshVisualizer.Mesh = Mesh;\r\nCesiumMeshVisualizer.MeshMaterial = MeshMaterial;\r\nCesiumMeshVisualizer.ShaderChunk = ShaderChunk;\r\nCesiumMeshVisualizer.ShaderLib = ShaderLib;\r\nCesiumMeshVisualizer.MeshVisualizer = MeshVisualizer;\r\nCesiumMeshVisualizer.FramebufferTexture = FramebufferTexture;\r\nCesiumMeshVisualizer.LOD = LOD;\r\nCesiumMeshVisualizer.PlaneGeometry = PlaneGeometry;\r\nCesiumMeshVisualizer.Rotation = Rotation;\r\nCesiumMeshVisualizer.ReferenceMesh = ReferenceMesh;\r\nCesiumMeshVisualizer.BasicMeshMaterial = BasicMeshMaterial;\r\nCesiumMeshVisualizer.BasicGeometry = BasicGeometry;\r\nCesiumMeshVisualizer.PlaneBufferGeometry = PlaneBufferGeometry;\r\nCesiumMeshVisualizer.CSG = CSG;\r\nCesiumMeshVisualizer.MeshPhongMaterial = MeshPhongMaterial;\r\nCesiumMeshVisualizer.MeshVisualizerVERSION = '1.0.1';\r\n\r\n\r\nexport {\r\n    RendererUtils, Mesh, MeshMaterial, ShaderChunk, ShaderLib, MeshVisualizer,\r\n    FramebufferTexture, GeometryUtils, LOD, PlaneGeometry, Rotation, ReferenceMesh,\r\n    BasicMeshMaterial, BasicGeometry, PlaneBufferGeometry, CSG,\r\n    MeshPhongMaterial, MaterialUtils, ShaderUtils,defineProperty\r\n}\r\n\r\nexport default CesiumMeshVisualizer;\r\nif (typeof module != 'undefined') {\r\n    module.exports = CesiumMeshVisualizer;\r\n}","// Constructive Solid Geometry (CSG) is a modeling technique that uses Boolean\n// operations like union and intersection to combine 3D solids. This library\n// implements CSG operations on meshes elegantly and concisely using BSP trees,\n// and is meant to serve as an easily understandable implementation of the\n// algorithm. All edge cases involving overlapping coplanar polygons in both\n// solids are correctly handled.\n// \n// Example usage:\n// \n//     var cube = CSG.cube();\n//     var sphere = CSG.sphere({ radius: 1.3 });\n//     var polygons = cube.subtract(sphere).toPolygons();\n// \n// ## Implementation Details\n// \n// All CSG operations are implemented in terms of two functions, `clipTo()` and\n// `invert()`, which remove parts of a BSP tree inside another BSP tree and swap\n// solid and empty space, respectively. To find the union of `a` and `b`, we\n// want to remove everything in `a` inside `b` and everything in `b` inside `a`,\n// then combine polygons from `a` and `b` into one solid:\n// \n//     a.clipTo(b);\n//     b.clipTo(a);\n//     a.build(b.allPolygons());\n// \n// The only tricky part is handling overlapping coplanar polygons in both trees.\n// The code above keeps both copies, but we need to keep them in one tree and\n// remove them in the other tree. To remove them from `b` we can clip the\n// inverse of `b` against `a`. The code for union now looks like this:\n// \n//     a.clipTo(b);\n//     b.clipTo(a);\n//     b.invert();\n//     b.clipTo(a);\n//     b.invert();\n//     a.build(b.allPolygons());\n// \n// Subtraction and intersection naturally follow from set operations. If\n// union is `A | B`, subtraction is `A - B = ~(~A | B)` and intersection is\n// `A & B = ~(~A | ~B)` where `~` is the complement operator.\n// \n// ## License\n// \n// Copyright (c) 2011 Evan Wallace (http://madebyevan.com/), under the MIT license.\n\n// # class CSG\n\n// Holds a binary space partition tree representing a 3D solid. Two solids can\n// be combined using the `union()`, `subtract()`, and `intersect()` methods.\n\nfunction CSG() {\n  this.polygons = [];\n};\n\n// Construct a CSG solid from a list of `CSG.Polygon` instances.\nCSG.fromPolygons = function (polygons) {\n  var csg = new CSG();\n  csg.polygons = polygons;\n  return csg;\n};\n\nCSG.prototype = {\n  clone: function () {\n    var csg = new CSG();\n    csg.polygons = this.polygons.map(function (p) { return p.clone(); });\n    return csg;\n  },\n\n  toPolygons: function () {\n    return this.polygons;\n  },\n\n  // Return a new CSG solid representing space in either this solid or in the\n  // solid `csg`. Neither this solid nor the solid `csg` are modified.\n  // \n  //     A.union(B)\n  // \n  //     +-------+            +-------+\n  //     |       |            |       |\n  //     |   A   |            |       |\n  //     |    +--+----+   =   |       +----+\n  //     +----+--+    |       +----+       |\n  //          |   B   |            |       |\n  //          |       |            |       |\n  //          +-------+            +-------+\n  // \n  union: function (csg) {\n    var a = new CSG.Node(this.clone().polygons);\n    var b = new CSG.Node(csg.clone().polygons);\n    a.clipTo(b);\n    b.clipTo(a);\n    b.invert();\n    b.clipTo(a);\n    b.invert();\n    a.build(b.allPolygons());\n    return CSG.fromPolygons(a.allPolygons());\n  },\n\n  // Return a new CSG solid representing space in this solid but not in the\n  // solid `csg`. Neither this solid nor the solid `csg` are modified.\n  // \n  //     A.subtract(B)\n  // \n  //     +-------+            +-------+\n  //     |       |            |       |\n  //     |   A   |            |       |\n  //     |    +--+----+   =   |    +--+\n  //     +----+--+    |       +----+\n  //          |   B   |\n  //          |       |\n  //          +-------+\n  // \n  subtract: function (csg) {\n    var a = new CSG.Node(this.clone().polygons);\n    var b = new CSG.Node(csg.clone().polygons);\n    a.invert();\n    a.clipTo(b);\n    b.clipTo(a);\n    b.invert();\n    b.clipTo(a);\n    b.invert();\n    a.build(b.allPolygons());\n    a.invert();\n    return CSG.fromPolygons(a.allPolygons());\n  },\n\n  // Return a new CSG solid representing space both this solid and in the\n  // solid `csg`. Neither this solid nor the solid `csg` are modified.\n  // \n  //     A.intersect(B)\n  // \n  //     +-------+\n  //     |       |\n  //     |   A   |\n  //     |    +--+----+   =   +--+\n  //     +----+--+    |       +--+\n  //          |   B   |\n  //          |       |\n  //          +-------+\n  // \n  intersect: function (csg) {\n    var a = new CSG.Node(this.clone().polygons);\n    var b = new CSG.Node(csg.clone().polygons);\n    a.invert();\n    b.clipTo(a);\n    b.invert();\n    a.clipTo(b);\n    b.clipTo(a);\n    a.build(b.allPolygons());\n    a.invert();\n    return CSG.fromPolygons(a.allPolygons());\n  },\n\n  // Return a new CSG solid with solid and empty space switched. This solid is\n  // not modified.\n  inverse: function () {\n    var csg = this.clone();\n    csg.polygons.map(function (p) { p.flip(); });\n    return csg;\n  }\n};\n\n// Construct an axis-aligned solid cuboid. Optional parameters are `center` and\n// `radius`, which default to `[0, 0, 0]` and `[1, 1, 1]`. The radius can be\n// specified using a single number or a list of three numbers, one for each axis.\n// \n// Example code:\n// \n//     var cube = CSG.cube({\n//       center: [0, 0, 0],\n//       radius: 1\n//     });\nCSG.cube = function (options) {\n  options = options || {};\n  var c = new CSG.Vector(options.center || [0, 0, 0]);\n  var r = !options.radius ? [1, 1, 1] : options.radius.length ?\n    options.radius : [options.radius, options.radius, options.radius];\n  return CSG.fromPolygons([\n    [[0, 4, 6, 2], [-1, 0, 0]],\n    [[1, 3, 7, 5], [+1, 0, 0]],\n    [[0, 1, 5, 4], [0, -1, 0]],\n    [[2, 6, 7, 3], [0, +1, 0]],\n    [[0, 2, 3, 1], [0, 0, -1]],\n    [[4, 5, 7, 6], [0, 0, +1]]\n  ].map(function (info) {\n    return new CSG.Polygon(info[0].map(function (i) {\n      var pos = new CSG.Vector(\n        c.x + r[0] * (2 * !!(i & 1) - 1),\n        c.y + r[1] * (2 * !!(i & 2) - 1),\n        c.z + r[2] * (2 * !!(i & 4) - 1)\n      );\n      return new CSG.Vertex(pos, new CSG.Vector(info[1]));\n    }));\n  }));\n};\n\n// Construct a solid sphere. Optional parameters are `center`, `radius`,\n// `slices`, and `stacks`, which default to `[0, 0, 0]`, `1`, `16`, and `8`.\n// The `slices` and `stacks` parameters control the tessellation along the\n// longitude and latitude directions.\n// \n// Example usage:\n// \n//     var sphere = CSG.sphere({\n//       center: [0, 0, 0],\n//       radius: 1,\n//       slices: 16,\n//       stacks: 8\n//     });\nCSG.sphere = function (options) {\n  options = options || {};\n  var c = new CSG.Vector(options.center || [0, 0, 0]);\n  var r = options.radius || 1;\n  var slices = options.slices || 16;\n  var stacks = options.stacks || 8;\n  var polygons = [], vertices;\n  function vertex(theta, phi) {\n    theta *= Math.PI * 2;\n    phi *= Math.PI;\n    var dir = new CSG.Vector(\n      Math.cos(theta) * Math.sin(phi),\n      Math.cos(phi),\n      Math.sin(theta) * Math.sin(phi)\n    );\n    vertices.push(new CSG.Vertex(c.plus(dir.times(r)), dir));\n  }\n  for (var i = 0; i < slices; i++) {\n    for (var j = 0; j < stacks; j++) {\n      vertices = [];\n      vertex(i / slices, j / stacks);\n      if (j > 0) vertex((i + 1) / slices, j / stacks);\n      if (j < stacks - 1) vertex((i + 1) / slices, (j + 1) / stacks);\n      vertex(i / slices, (j + 1) / stacks);\n      polygons.push(new CSG.Polygon(vertices));\n    }\n  }\n  return CSG.fromPolygons(polygons);\n};\n\n// Construct a solid cylinder. Optional parameters are `start`, `end`,\n// `radius`, and `slices`, which default to `[0, -1, 0]`, `[0, 1, 0]`, `1`, and\n// `16`. The `slices` parameter controls the tessellation.\n// \n// Example usage:\n// \n//     var cylinder = CSG.cylinder({\n//       start: [0, -1, 0],\n//       end: [0, 1, 0],\n//       radius: 1,\n//       slices: 16\n//     });\nCSG.cylinder = function (options) {\n  options = options || {};\n  var s = new CSG.Vector(options.start || [0, -1, 0]);\n  var e = new CSG.Vector(options.end || [0, 1, 0]);\n  var ray = e.minus(s);\n  var r = options.radius || 1;\n  var slices = options.slices || 16;\n  var axisZ = ray.unit(), isY = (Math.abs(axisZ.y) > 0.5);\n  var axisX = new CSG.Vector(isY, !isY, 0).cross(axisZ).unit();\n  var axisY = axisX.cross(axisZ).unit();\n  var start = new CSG.Vertex(s, axisZ.negated());\n  var end = new CSG.Vertex(e, axisZ.unit());\n  var polygons = [];\n  function point(stack, slice, normalBlend) {\n    var angle = slice * Math.PI * 2;\n    var out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)));\n    var pos = s.plus(ray.times(stack)).plus(out.times(r));\n    var normal = out.times(1 - Math.abs(normalBlend)).plus(axisZ.times(normalBlend));\n    return new CSG.Vertex(pos, normal);\n  }\n  for (var i = 0; i < slices; i++) {\n    var t0 = i / slices, t1 = (i + 1) / slices;\n    polygons.push(new CSG.Polygon([start, point(0, t0, -1), point(0, t1, -1)]));\n    polygons.push(new CSG.Polygon([point(0, t1, 0), point(0, t0, 0), point(1, t0, 0), point(1, t1, 0)]));\n    polygons.push(new CSG.Polygon([end, point(1, t1, 1), point(1, t0, 1)]));\n  }\n  return CSG.fromPolygons(polygons);\n};\n\n// # class Vector\n\n// Represents a 3D vector.\n// \n// Example usage:\n// \n//     new CSG.Vector(1, 2, 3);\n//     new CSG.Vector([1, 2, 3]);\n//     new CSG.Vector({ x: 1, y: 2, z: 3 });\n\nCSG.Vector = function (x, y, z) {\n  if (arguments.length == 3) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  } else if ('x' in x) {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z;\n  } else {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2];\n  }\n};\n\nCSG.Vector.prototype = {\n  clone: function () {\n    return new CSG.Vector(this.x, this.y, this.z);\n  },\n\n  negated: function () {\n    return new CSG.Vector(-this.x, -this.y, -this.z);\n  },\n\n  plus: function (a) {\n    return new CSG.Vector(this.x + a.x, this.y + a.y, this.z + a.z);\n  },\n\n  minus: function (a) {\n    return new CSG.Vector(this.x - a.x, this.y - a.y, this.z - a.z);\n  },\n\n  times: function (a) {\n    return new CSG.Vector(this.x * a, this.y * a, this.z * a);\n  },\n\n  dividedBy: function (a) {\n    return new CSG.Vector(this.x / a, this.y / a, this.z / a);\n  },\n\n  dot: function (a) {\n    return this.x * a.x + this.y * a.y + this.z * a.z;\n  },\n\n  lerp: function (a, t) {\n    return this.plus(a.minus(this).times(t));\n  },\n\n  length: function () {\n    return Math.sqrt(this.dot(this));\n  },\n\n  unit: function () {\n    return this.dividedBy(this.length());\n  },\n\n  cross: function (a) {\n    return new CSG.Vector(\n      this.y * a.z - this.z * a.y,\n      this.z * a.x - this.x * a.z,\n      this.x * a.y - this.y * a.x\n    );\n  }\n};\n\n// # class Vertex\n\n// Represents a vertex of a polygon. Use your own vertex class instead of this\n// one to provide additional features like texture coordinates and vertex\n// colors. Custom vertex classes need to provide a `pos` property and `clone()`,\n// `flip()`, and `interpolate()` methods that behave analogous to the ones\n// defined by `CSG.Vertex`. This class provides `normal` so convenience\n// functions like `CSG.sphere()` can return a smooth vertex normal, but `normal`\n// is not used anywhere else.\n\nCSG.Vertex = function (pos, normal) {\n  this.pos = new CSG.Vector(pos);\n  this.normal = new CSG.Vector(normal);\n};\n\nCSG.Vertex.prototype = {\n  clone: function () {\n    return new CSG.Vertex(this.pos.clone(), this.normal.clone());\n  },\n\n  // Invert all orientation-specific data (e.g. vertex normal). Called when the\n  // orientation of a polygon is flipped.\n  flip: function () {\n    this.normal = this.normal.negated();\n  },\n\n  // Create a new vertex between this vertex and `other` by linearly\n  // interpolating all properties using a parameter of `t`. Subclasses should\n  // override this to interpolate additional properties.\n  interpolate: function (other, t) {\n    return new CSG.Vertex(\n      this.pos.lerp(other.pos, t),\n      this.normal.lerp(other.normal, t)\n    );\n  }\n};\n\n// # class Plane\n\n// Represents a plane in 3D space.\n\nCSG.Plane = function (normal, w) {\n  this.normal = normal;\n  this.w = w;\n};\n\n// `CSG.Plane.EPSILON` is the tolerance used by `splitPolygon()` to decide if a\n// point is on the plane.\nCSG.Plane.EPSILON = 1e-5;\n\nCSG.Plane.fromPoints = function (a, b, c) {\n  var n = b.minus(a).cross(c.minus(a)).unit();\n  return new CSG.Plane(n, n.dot(a));\n};\n\nCSG.Plane.prototype = {\n  clone: function () {\n    return new CSG.Plane(this.normal.clone(), this.w);\n  },\n\n  flip: function () {\n    this.normal = this.normal.negated();\n    this.w = -this.w;\n  },\n\n  // Split `polygon` by this plane if needed, then put the polygon or polygon\n  // fragments in the appropriate lists. Coplanar polygons go into either\n  // `coplanarFront` or `coplanarBack` depending on their orientation with\n  // respect to this plane. Polygons in front or in back of this plane go into\n  // either `front` or `back`.\n  splitPolygon: function (polygon, coplanarFront, coplanarBack, front, back) {\n    var COPLANAR = 0;\n    var FRONT = 1;\n    var BACK = 2;\n    var SPANNING = 3;\n\n    // Classify each point as well as the entire polygon into one of the above\n    // four classes.\n    var polygonType = 0;\n    var types = [];\n    for (var i = 0; i < polygon.vertices.length; i++) {\n      var t = this.normal.dot(polygon.vertices[i].pos) - this.w;\n      var type = (t < -CSG.Plane.EPSILON) ? BACK : (t > CSG.Plane.EPSILON) ? FRONT : COPLANAR;\n      polygonType |= type;\n      types.push(type);\n    }\n\n    // Put the polygon in the correct list, splitting it when necessary.\n    switch (polygonType) {\n      case COPLANAR:\n        (this.normal.dot(polygon.plane.normal) > 0 ? coplanarFront : coplanarBack).push(polygon);\n        break;\n      case FRONT:\n        front.push(polygon);\n        break;\n      case BACK:\n        back.push(polygon);\n        break;\n      case SPANNING:\n        var f = [], b = [];\n        for (var i = 0; i < polygon.vertices.length; i++) {\n          var j = (i + 1) % polygon.vertices.length;\n          var ti = types[i], tj = types[j];\n          var vi = polygon.vertices[i], vj = polygon.vertices[j];\n          if (ti != BACK) f.push(vi);\n          if (ti != FRONT) b.push(ti != BACK ? vi.clone() : vi);\n          if ((ti | tj) == SPANNING) {\n            var t = (this.w - this.normal.dot(vi.pos)) / this.normal.dot(vj.pos.minus(vi.pos));\n            var v = vi.interpolate(vj, t);\n            f.push(v);\n            b.push(v.clone());\n          }\n        }\n        if (f.length >= 3) front.push(new CSG.Polygon(f, polygon.shared));\n        if (b.length >= 3) back.push(new CSG.Polygon(b, polygon.shared));\n        break;\n    }\n  }\n};\n\n// # class Polygon\n\n// Represents a convex polygon. The vertices used to initialize a polygon must\n// be coplanar and form a convex loop. They do not have to be `CSG.Vertex`\n// instances but they must behave similarly (duck typing can be used for\n// customization).\n// \n// Each convex polygon has a `shared` property, which is shared between all\n// polygons that are clones of each other or were split from the same polygon.\n// This can be used to define per-polygon properties (such as surface color).\n\nCSG.Polygon = function (vertices, shared) {\n  this.vertices = vertices;\n  this.shared = shared;\n  this.plane = CSG.Plane.fromPoints(vertices[0].pos, vertices[1].pos, vertices[2].pos);\n};\n\nCSG.Polygon.prototype = {\n  clone: function () {\n    var vertices = this.vertices.map(function (v) { return v.clone(); });\n    return new CSG.Polygon(vertices, this.shared);\n  },\n\n  flip: function () {\n    this.vertices.reverse().map(function (v) { v.flip(); });\n    this.plane.flip();\n  }\n};\n\n// # class Node\n\n// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\n// by picking a polygon to split along. That polygon (and all other coplanar\n// polygons) are added directly to that node and the other polygons are added to\n// the front and/or back subtrees. This is not a leafy BSP tree since there is\n// no distinction between internal and leaf nodes.\n\nCSG.Node = function (polygons) {\n  this.plane = null;\n  this.front = null;\n  this.back = null;\n  this.polygons = [];\n  if (polygons) this.build(polygons);\n};\n\nCSG.Node.prototype = {\n  clone: function () {\n    var node = new CSG.Node();\n    node.plane = this.plane && this.plane.clone();\n    node.front = this.front && this.front.clone();\n    node.back = this.back && this.back.clone();\n    node.polygons = this.polygons.map(function (p) { return p.clone(); });\n    return node;\n  },\n\n  // Convert solid space to empty space and empty space to solid space.\n  invert: function () {\n    for (var i = 0; i < this.polygons.length; i++) {\n      this.polygons[i].flip();\n    }\n    this.plane.flip();\n    if (this.front) this.front.invert();\n    if (this.back) this.back.invert();\n    var temp = this.front;\n    this.front = this.back;\n    this.back = temp;\n  },\n\n  // Recursively remove all polygons in `polygons` that are inside this BSP\n  // tree.\n  clipPolygons: function (polygons) {\n    if (!this.plane) return polygons.slice();\n    var front = [], back = [];\n    for (var i = 0; i < polygons.length; i++) {\n      this.plane.splitPolygon(polygons[i], front, back, front, back);\n    }\n    if (this.front) front = this.front.clipPolygons(front);\n    if (this.back) back = this.back.clipPolygons(back);\n    else back = [];\n    return front.concat(back);\n  },\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `bsp`.\n  clipTo: function (bsp) {\n    this.polygons = bsp.clipPolygons(this.polygons);\n    if (this.front) this.front.clipTo(bsp);\n    if (this.back) this.back.clipTo(bsp);\n  },\n\n  // Return a list of all polygons in this BSP tree.\n  allPolygons: function () {\n    var polygons = this.polygons.slice();\n    if (this.front) polygons = polygons.concat(this.front.allPolygons());\n    if (this.back) polygons = polygons.concat(this.back.allPolygons());\n    return polygons;\n  },\n\n  // Build a BSP tree out of `polygons`. When called on an existing tree, the\n  // new polygons are filtered down to the bottom of the tree and become new\n  // nodes there. Each set of polygons is partitioned using the first polygon\n  // (no heuristic is used to pick a good split).\n  build: function (polygons) {\n    if (!polygons.length) return;\n    if (!this.plane) this.plane = polygons[0].plane.clone();\n    var front = [], back = [];\n    for (var i = 0; i < polygons.length; i++) {\n      this.plane.splitPolygon(polygons[i], this.polygons, this.polygons, front, back);\n    }\n    if (front.length) {\n      if (!this.front) this.front = new CSG.Node();\n      this.front.build(front);\n    }\n    if (back.length) {\n      if (!this.back) this.back = new CSG.Node();\n      this.back.build(back);\n    }\n  }\n};\n\nexport default CSG;","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\"use strict\";\n\nfunction TIFFParser() {\n\tthis.tiffDataView = undefined;\n\tthis.littleEndian = undefined;\n\tthis.fileDirectories = [];\n};\n\nTIFFParser.prototype = {\n\tisLittleEndian: function () {\n\t\t// Get byte order mark.\n\t\tvar BOM = this.getBytes(2, 0);\n\n\t\t// Find out the endianness.\n\t\tif (BOM === 0x4949) {\n\t\t\tthis.littleEndian = true;\n\t\t} else if (BOM === 0x4D4D) {\n\t\t\tthis.littleEndian = false;\n\t\t} else {\n\t\t\tconsole.log( BOM );\n\t\t\tthrow TypeError(\"Invalid byte order value.\");\n\t\t}\n\n\t\treturn this.littleEndian;\n\t},\n\n\thasTowel: function () {\n\t\t// Check for towel.\n\t\tif (this.getBytes(2, 2) !== 42) {\n\t\t\tthrow RangeError(\"You forgot your towel!\");\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tgetFieldTagName: function (fieldTag) {\n\t\t// See: http://www.digitizationguidelines.gov/guidelines/TIFF_Metadata_Final.pdf\n\t\t// See: http://www.digitalpreservation.gov/formats/content/tiff_tags.shtml\n\t\tvar fieldTagNames = {\n\t\t\t// TIFF Baseline\n\t\t\t0x013B: 'Artist',\n\t\t\t0x0102: 'BitsPerSample',\n\t\t\t0x0109: 'CellLength',\n\t\t\t0x0108: 'CellWidth',\n\t\t\t0x0140: 'ColorMap',\n\t\t\t0x0103: 'Compression',\n\t\t\t0x8298: 'Copyright',\n\t\t\t0x0132: 'DateTime',\n\t\t\t0x0152: 'ExtraSamples',\n\t\t\t0x010A: 'FillOrder',\n\t\t\t0x0121: 'FreeByteCounts',\n\t\t\t0x0120: 'FreeOffsets',\n\t\t\t0x0123: 'GrayResponseCurve',\n\t\t\t0x0122: 'GrayResponseUnit',\n\t\t\t0x013C: 'HostComputer',\n\t\t\t0x010E: 'ImageDescription',\n\t\t\t0x0101: 'ImageLength',\n\t\t\t0x0100: 'ImageWidth',\n\t\t\t0x010F: 'Make',\n\t\t\t0x0119: 'MaxSampleValue',\n\t\t\t0x0118: 'MinSampleValue',\n\t\t\t0x0110: 'Model',\n\t\t\t0x00FE: 'NewSubfileType',\n\t\t\t0x0112: 'Orientation',\n\t\t\t0x0106: 'PhotometricInterpretation',\n\t\t\t0x011C: 'PlanarConfiguration',\n\t\t\t0x0128: 'ResolutionUnit',\n\t\t\t0x0116: 'RowsPerStrip',\n\t\t\t0x0115: 'SamplesPerPixel',\n\t\t\t0x0131: 'Software',\n\t\t\t0x0117: 'StripByteCounts',\n\t\t\t0x0111: 'StripOffsets',\n\t\t\t0x00FF: 'SubfileType',\n\t\t\t0x0107: 'Threshholding',\n\t\t\t0x011A: 'XResolution',\n\t\t\t0x011B: 'YResolution',\n\n\t\t\t// TIFF Extended\n\t\t\t0x0146: 'BadFaxLines',\n\t\t\t0x0147: 'CleanFaxData',\n\t\t\t0x0157: 'ClipPath',\n\t\t\t0x0148: 'ConsecutiveBadFaxLines',\n\t\t\t0x01B1: 'Decode',\n\t\t\t0x01B2: 'DefaultImageColor',\n\t\t\t0x010D: 'DocumentName',\n\t\t\t0x0150: 'DotRange',\n\t\t\t0x0141: 'HalftoneHints',\n\t\t\t0x015A: 'Indexed',\n\t\t\t0x015B: 'JPEGTables',\n\t\t\t0x011D: 'PageName',\n\t\t\t0x0129: 'PageNumber',\n\t\t\t0x013D: 'Predictor',\n\t\t\t0x013F: 'PrimaryChromaticities',\n\t\t\t0x0214: 'ReferenceBlackWhite',\n\t\t\t0x0153: 'SampleFormat',\n\t\t\t0x022F: 'StripRowCounts',\n\t\t\t0x014A: 'SubIFDs',\n\t\t\t0x0124: 'T4Options',\n\t\t\t0x0125: 'T6Options',\n\t\t\t0x0145: 'TileByteCounts',\n\t\t\t0x0143: 'TileLength',\n\t\t\t0x0144: 'TileOffsets',\n\t\t\t0x0142: 'TileWidth',\n\t\t\t0x012D: 'TransferFunction',\n\t\t\t0x013E: 'WhitePoint',\n\t\t\t0x0158: 'XClipPathUnits',\n\t\t\t0x011E: 'XPosition',\n\t\t\t0x0211: 'YCbCrCoefficients',\n\t\t\t0x0213: 'YCbCrPositioning',\n\t\t\t0x0212: 'YCbCrSubSampling',\n\t\t\t0x0159: 'YClipPathUnits',\n\t\t\t0x011F: 'YPosition',\n\n\t\t\t// EXIF\n\t\t\t0x9202: 'ApertureValue',\n\t\t\t0xA001: 'ColorSpace',\n\t\t\t0x9004: 'DateTimeDigitized',\n\t\t\t0x9003: 'DateTimeOriginal',\n\t\t\t0x8769: 'Exif IFD',\n\t\t\t0x9000: 'ExifVersion',\n\t\t\t0x829A: 'ExposureTime',\n\t\t\t0xA300: 'FileSource',\n\t\t\t0x9209: 'Flash',\n\t\t\t0xA000: 'FlashpixVersion',\n\t\t\t0x829D: 'FNumber',\n\t\t\t0xA420: 'ImageUniqueID',\n\t\t\t0x9208: 'LightSource',\n\t\t\t0x927C: 'MakerNote',\n\t\t\t0x9201: 'ShutterSpeedValue',\n\t\t\t0x9286: 'UserComment',\n\n\t\t\t// IPTC\n\t\t\t0x83BB: 'IPTC',\n\n\t\t\t// ICC\n\t\t\t0x8773: 'ICC Profile',\n\n\t\t\t// XMP\n\t\t\t0x02BC: 'XMP',\n\n\t\t\t// GDAL\n\t\t\t0xA480: 'GDAL_METADATA',\n\t\t\t0xA481: 'GDAL_NODATA',\n\n\t\t\t// Photoshop\n\t\t\t0x8649: 'Photoshop',\n\t\t};\n\n\t\tvar fieldTagName;\n\n\t\tif (fieldTag in fieldTagNames) {\n\t\t\tfieldTagName = fieldTagNames[fieldTag];\n\t\t} else {\n\t\t\t//console.log( \"Unknown Field Tag:\", fieldTag);\n\t\t\tfieldTagName = \"Tag\" + fieldTag;\n\t\t}\n\n\t\treturn fieldTagName;\n\t},\n\n\tgetFieldTypeName: function (fieldType) {\n\t\tvar fieldTypeNames = {\n\t\t\t0x0001: 'BYTE',\n\t\t\t0x0002: 'ASCII',\n\t\t\t0x0003: 'SHORT',\n\t\t\t0x0004: 'LONG',\n\t\t\t0x0005: 'RATIONAL',\n\t\t\t0x0006: 'SBYTE',\n\t\t\t0x0007: 'UNDEFINED',\n\t\t\t0x0008: 'SSHORT',\n\t\t\t0x0009: 'SLONG',\n\t\t\t0x000A: 'SRATIONAL',\n\t\t\t0x000B: 'FLOAT',\n\t\t\t0x000C: 'DOUBLE',\n\t\t};\n\n\t\tvar fieldTypeName;\n\n\t\tif (fieldType in fieldTypeNames) {\n\t\t\tfieldTypeName = fieldTypeNames[fieldType];\n\t\t}\n\n\t\treturn fieldTypeName;\n\t},\n\n\tgetFieldTypeLength: function (fieldTypeName) {\n\t\tvar fieldTypeLength;\n\n\t\tif (['BYTE', 'ASCII', 'SBYTE', 'UNDEFINED'].indexOf(fieldTypeName) !== -1) {\n\t\t\tfieldTypeLength = 1;\n\t\t} else if (['SHORT', 'SSHORT'].indexOf(fieldTypeName) !== -1) {\n\t\t\tfieldTypeLength = 2;\n\t\t} else if (['LONG', 'SLONG', 'FLOAT'].indexOf(fieldTypeName) !== -1) {\n\t\t\tfieldTypeLength = 4;\n\t\t} else if (['RATIONAL', 'SRATIONAL', 'DOUBLE'].indexOf(fieldTypeName) !== -1) {\n\t\t\tfieldTypeLength = 8;\n\t\t}\n\n\t\treturn fieldTypeLength;\n\t},\n\n\tgetBits: function (numBits, byteOffset, bitOffset) {\n\t\tbitOffset = bitOffset || 0;\n\t\tvar extraBytes = Math.floor(bitOffset / 8);\n\t\tvar newByteOffset = byteOffset + extraBytes;\n\t\tvar totalBits = bitOffset + numBits;\n\t\tvar shiftRight = 32 - numBits;\n\n\t\tif (totalBits <= 0) {\n\t\t\tconsole.log( numBits, byteOffset, bitOffset );\n\t\t\tthrow RangeError(\"No bits requested\");\n\t\t} else if (totalBits <= 8) {\n\t\t\tvar shiftLeft = 24 + bitOffset;\n\t\t\tvar rawBits = this.tiffDataView.getUint8(newByteOffset, this.littleEndian);\n\t\t} else if (totalBits <= 16) {\n\t\t\tvar shiftLeft = 16 + bitOffset;\n\t\t\tvar rawBits = this.tiffDataView.getUint16(newByteOffset, this.littleEndian);\n\t\t} else if (totalBits <= 32) {\n\t\t\tvar shiftLeft = bitOffset;\n\t\t\tvar rawBits = this.tiffDataView.getUint32(newByteOffset, this.littleEndian);\n\t\t} else {\n\t\t\tconsole.log( numBits, byteOffset, bitOffset );\n\t\t\tthrow RangeError(\"Too many bits requested\");\n\t\t}\n\n\t\tvar chunkInfo = {\n\t\t\t'bits': ((rawBits << shiftLeft) >>> shiftRight),\n\t\t\t'byteOffset': newByteOffset + Math.floor(totalBits / 8),\n\t\t\t'bitOffset': totalBits % 8,\n\t\t};\n\n\t\treturn chunkInfo;\n\t},\n\n\tgetBytes: function (numBytes, offset) {\n\t\tif (numBytes <= 0) {\n\t\t\tconsole.log( numBytes, offset );\n\t\t\tthrow RangeError(\"No bytes requested\");\n\t\t} else if (numBytes <= 1) {\n\t\t\treturn this.tiffDataView.getUint8(offset, this.littleEndian);\n\t\t} else if (numBytes <= 2) {\n\t\t\treturn this.tiffDataView.getUint16(offset, this.littleEndian);\n\t\t} else if (numBytes <= 3) {\n\t\t\treturn this.tiffDataView.getUint32(offset, this.littleEndian) >>> 8;\n\t\t} else if (numBytes <= 4) {\n\t\t\treturn this.tiffDataView.getUint32(offset, this.littleEndian);\n\t\t} else {\n\t\t\tconsole.log( numBytes, offset );\n\t\t\tthrow RangeError(\"Too many bytes requested\");\n\t\t}\n\t},\n\n\tgetFieldValues: function (fieldTagName, fieldTypeName, typeCount, valueOffset) {\n\t\tvar fieldValues = [];\n\n\t\tvar fieldTypeLength = this.getFieldTypeLength(fieldTypeName);\n\t\tvar fieldValueSize = fieldTypeLength * typeCount;\n\n\t\tif (fieldValueSize <= 4) {\n\t\t\t// The value is stored at the big end of the valueOffset.\n\t\t\tif (this.littleEndian === false) {\n\t\t\t\tvar value = valueOffset >>> ((4 - fieldTypeLength) * 8);\n\t\t\t} else {\n\t\t\t\tvar value = valueOffset;\n\t\t\t}\n\n\t\t\tfieldValues.push(value);\n\t\t} else {\n\t\t\tfor (var i = 0; i < typeCount; i++) {\n\t\t\t\tvar indexOffset = fieldTypeLength * i;\n\n\t\t\t\tif (fieldTypeLength >= 8) {\n\t\t\t\t\tif (['RATIONAL', 'SRATIONAL'].indexOf(fieldTypeName) !== -1) {\n\t\t\t\t\t\t// Numerator\n\t\t\t\t\t\tfieldValues.push(this.getBytes(4, valueOffset + indexOffset));\n\t\t\t\t\t\t// Denominator\n\t\t\t\t\t\tfieldValues.push(this.getBytes(4, valueOffset + indexOffset + 4));\n//\t\t\t\t\t} else if (['DOUBLE'].indexOf(fieldTypeName) !== -1) {\n//\t\t\t\t\t\tfieldValues.push(this.getBytes(4, valueOffset + indexOffset) + this.getBytes(4, valueOffset + indexOffset + 4));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log( fieldTypeName, typeCount, fieldValueSize );\n\t\t\t\t\t\tthrow TypeError(\"Can't handle this field type or size\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfieldValues.push(this.getBytes(fieldTypeLength, valueOffset + indexOffset));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (fieldTypeName === 'ASCII') {\n\t\t\tfieldValues.forEach(function(e, i, a) { a[i] = String.fromCharCode(e); });\n\t\t}\n\n\t\treturn fieldValues;\n\t},\n\n\tclampColorSample: function(colorSample, bitsPerSample) {\n\t\tvar multiplier = Math.pow(2, 8 - bitsPerSample);\n\n\t\treturn Math.floor((colorSample * multiplier) + (multiplier - 1));\n\t},\n\n\tmakeRGBAFillValue: function(r, g, b, a) {\n\t\tif(typeof a === 'undefined') {\n\t\t\ta = 1.0;\n\t\t}\n\t\treturn \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n\t},\n\n\tparseFileDirectory: function (byteOffset) {\n\t\tvar numDirEntries = this.getBytes(2, byteOffset);\n\n\t\tvar tiffFields = [];\n\n\t\tfor (var i = byteOffset + 2, entryCount = 0; entryCount < numDirEntries; i += 12, entryCount++) {\n\t\t\tvar fieldTag = this.getBytes(2, i);\n\t\t\tvar fieldType = this.getBytes(2, i + 2);\n\t\t\tvar typeCount = this.getBytes(4, i + 4);\n\t\t\tvar valueOffset = this.getBytes(4, i + 8);\n\n\t\t\tvar fieldTagName = this.getFieldTagName( fieldTag );\n\t\t\tvar fieldTypeName = this.getFieldTypeName( fieldType );\n\n\t\t\tvar fieldValues = this.getFieldValues(fieldTagName, fieldTypeName, typeCount, valueOffset);\n\n\t\t\ttiffFields[fieldTagName] = { 'type': fieldTypeName, 'values': fieldValues };\n\t\t}\n\n\t\tthis.fileDirectories.push( tiffFields );\n\n\t\tvar nextIFDByteOffset = this.getBytes(4, i);\n\n\t\tif (nextIFDByteOffset === 0x00000000) {\n\t\t\treturn this.fileDirectories;\n\t\t} else {\n\t\t\treturn this.parseFileDirectory(nextIFDByteOffset);\n\t\t}\n\t},\n\n\tparseTIFF: function (tiffArrayBuffer, canvas) {\n\t\tcanvas = canvas || document.createElement('canvas');\n\n\t\tthis.tiffDataView = new DataView(tiffArrayBuffer);\n\t\tthis.canvas = canvas;\n\n\t\tthis.littleEndian = this.isLittleEndian(this.tiffDataView);\n\n\t\tif (!this.hasTowel(this.tiffDataView, this.littleEndian)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar firstIFDByteOffset = this.getBytes(4, 4);\n\n\t\tthis.fileDirectories = this.parseFileDirectory(firstIFDByteOffset);\n\n\t\tvar fileDirectory = this.fileDirectories[0];\n\n\t\t//console.log( fileDirectory );\n\n\t\tvar imageWidth = fileDirectory.ImageWidth.values[0];\n\t\tvar imageLength = fileDirectory.ImageLength.values[0];\n\n\t\tthis.canvas.width = imageWidth;\n\t\tthis.canvas.height = imageLength;\n\n\t\tvar strips = [];\n\n\t\tvar compression = (fileDirectory.Compression) ? fileDirectory.Compression.values[0] : 1;\n\n\t\tvar samplesPerPixel = fileDirectory.SamplesPerPixel.values[0];\n\n\t\tvar sampleProperties = [];\n\n\t\tvar bitsPerPixel = 0;\n\t\tvar hasBytesPerPixel = false;\n\n\t\tfileDirectory.BitsPerSample.values.forEach(function(bitsPerSample, i, bitsPerSampleValues) {\n\t\t\tsampleProperties[i] = {\n\t\t\t\t'bitsPerSample': bitsPerSample,\n\t\t\t\t'hasBytesPerSample': false,\n\t\t\t\t'bytesPerSample': undefined,\n\t\t\t};\n\n\t\t\tif ((bitsPerSample % 8) === 0) {\n\t\t\t\tsampleProperties[i].hasBytesPerSample = true;\n\t\t\t\tsampleProperties[i].bytesPerSample = bitsPerSample / 8;\n\t\t\t}\n\n\t\t\tbitsPerPixel += bitsPerSample;\n\t\t}, this);\n\n\t\tif ((bitsPerPixel % 8) === 0) {\n\t\t\thasBytesPerPixel = true;\n\t\t\tvar bytesPerPixel = bitsPerPixel / 8;\n\t\t}\n\n\t\tvar stripOffsetValues = fileDirectory.StripOffsets.values;\n\t\tvar numStripOffsetValues = stripOffsetValues.length;\n\n\t\t// StripByteCounts is supposed to be required, but see if we can recover anyway.\n\t\tif (fileDirectory.StripByteCounts) {\n\t\t\tvar stripByteCountValues = fileDirectory.StripByteCounts.values;\n\t\t} else {\n\t\t\tconsole.log(\"Missing StripByteCounts!\");\n\n\t\t\t// Infer StripByteCounts, if possible.\n\t\t\tif (numStripOffsetValues === 1) {\n\t\t\t\tvar stripByteCountValues = [Math.ceil((imageWidth * imageLength * bitsPerPixel) / 8)];\n\t\t\t} else {\n\t\t\t\tthrow Error(\"Cannot recover from missing StripByteCounts\");\n\t\t\t}\n\t\t}\n\n\t\t// Loop through strips and decompress as necessary.\n\t\tfor (var i = 0; i < numStripOffsetValues; i++) {\n\t\t\tvar stripOffset = stripOffsetValues[i];\n\t\t\tstrips[i] = [];\n\n\t\t\tvar stripByteCount = stripByteCountValues[i];\n\n\t\t\t// Loop through pixels.\n\t\t\tfor (var byteOffset = 0, bitOffset = 0, jIncrement = 1, getHeader = true, pixel = [], numBytes = 0, sample = 0, currentSample = 0; byteOffset < stripByteCount; byteOffset += jIncrement) {\n\t\t\t\t// Decompress strip.\n\t\t\t\tswitch (compression) {\n\t\t\t\t\t// Uncompressed\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t// Loop through samples (sub-pixels).\n\t\t\t\t\t\tfor (var m = 0, pixel = []; m < samplesPerPixel; m++) {\n\t\t\t\t\t\t\tif (sampleProperties[m].hasBytesPerSample) {\n\t\t\t\t\t\t\t\t// XXX: This is wrong!\n\t\t\t\t\t\t\t\tvar sampleOffset = sampleProperties[m].bytesPerSample * m;\n\n\t\t\t\t\t\t\t\tpixel.push(this.getBytes(sampleProperties[m].bytesPerSample, stripOffset + byteOffset + sampleOffset));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar sampleInfo = this.getBits(sampleProperties[m].bitsPerSample, stripOffset + byteOffset, bitOffset);\n\n\t\t\t\t\t\t\t\tpixel.push(sampleInfo.bits);\n\n\t\t\t\t\t\t\t\tbyteOffset = sampleInfo.byteOffset - stripOffset;\n\t\t\t\t\t\t\t\tbitOffset = sampleInfo.bitOffset;\n\n\t\t\t\t\t\t\t\tthrow RangeError(\"Cannot handle sub-byte bits per sample\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstrips[i].push(pixel);\n\n\t\t\t\t\t\tif (hasBytesPerPixel) {\n\t\t\t\t\t\t\tjIncrement = bytesPerPixel;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjIncrement = 0;\n\n\t\t\t\t\t\t\tthrow RangeError(\"Cannot handle sub-byte bits per pixel\");\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// CITT Group 3 1-Dimensional Modified Huffman run-length encoding\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t// XXX: Use PDF.js code?\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Group 3 Fax\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\t// XXX: Use PDF.js code?\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Group 4 Fax\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\t// XXX: Use PDF.js code?\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// LZW\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\t// XXX: Use PDF.js code?\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Old-style JPEG (TIFF 6.0)\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\t// XXX: Use PDF.js code?\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// New-style JPEG (TIFF Specification Supplement 2)\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\t// XXX: Use PDF.js code?\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// PackBits\n\t\t\t\t\tcase 32773:\n\t\t\t\t\t\t// Are we ready for a new block?\n\t\t\t\t\t\tif (getHeader) {\n\t\t\t\t\t\t\tgetHeader = false;\n\n\t\t\t\t\t\t\tvar blockLength = 1;\n\t\t\t\t\t\t\tvar iterations = 1;\n\n\t\t\t\t\t\t\t// The header byte is signed.\n\t\t\t\t\t\t\tvar header = this.tiffDataView.getInt8(stripOffset + byteOffset, this.littleEndian);\n\n\t\t\t\t\t\t\tif ((header >= 0) && (header <= 127)) { // Normal pixels.\n\t\t\t\t\t\t\t\tblockLength = header + 1;\n\t\t\t\t\t\t\t} else if ((header >= -127) && (header <= -1)) { // Collapsed pixels.\n\t\t\t\t\t\t\t\titerations = -header + 1;\n\t\t\t\t\t\t\t} else /*if (header === -128)*/ { // Placeholder byte?\n\t\t\t\t\t\t\t\tgetHeader = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar currentByte = this.getBytes(1, stripOffset + byteOffset);\n\n\t\t\t\t\t\t\t// Duplicate bytes, if necessary.\n\t\t\t\t\t\t\tfor (var m = 0; m < iterations; m++) {\n\t\t\t\t\t\t\t\tif (sampleProperties[sample].hasBytesPerSample) {\n\t\t\t\t\t\t\t\t\t// We're reading one byte at a time, so we need to handle multi-byte samples.\n\t\t\t\t\t\t\t\t\tcurrentSample = (currentSample << (8 * numBytes)) | currentByte;\n\t\t\t\t\t\t\t\t\tnumBytes++;\n\n\t\t\t\t\t\t\t\t\t// Is our sample complete?\n\t\t\t\t\t\t\t\t\tif (numBytes === sampleProperties[sample].bytesPerSample) {\n\t\t\t\t\t\t\t\t\t\tpixel.push(currentSample);\n\t\t\t\t\t\t\t\t\t\tcurrentSample = numBytes = 0;\n\t\t\t\t\t\t\t\t\t\tsample++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthrow RangeError(\"Cannot handle sub-byte bits per sample\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Is our pixel complete?\n\t\t\t\t\t\t\t\tif (sample === samplesPerPixel)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrips[i].push(pixel);\n\n\t\t\t\t\t\t\t\t\tpixel = [];\n\t\t\t\t\t\t\t\t\tsample = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tblockLength--;\n\n\t\t\t\t\t\t\t// Is our block complete?\n\t\t\t\t\t\t\tif (blockLength === 0) {\n\t\t\t\t\t\t\t\tgetHeader = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjIncrement = 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Unknown compression algorithm\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Do not attempt to parse the image data.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n//\t\t\tconsole.log( strips[i] );\n\t\t}\n\n//\t\tconsole.log( strips );\n\n\t\tif (canvas.getContext) {\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\n\t\t\t// Set a default fill style.\n\t\t\tctx.fillStyle = this.makeRGBAFillValue(255, 255, 255, 0);\n\n\t\t\t// If RowsPerStrip is missing, the whole image is in one strip.\n\t\t\tif (fileDirectory.RowsPerStrip) {\n\t\t\t\tvar rowsPerStrip = fileDirectory.RowsPerStrip.values[0];\n\t\t\t} else {\n\t\t\t\tvar rowsPerStrip = imageLength;\n\t\t\t}\n\n\t\t\tvar numStrips = strips.length;\n\n\t\t\tvar imageLengthModRowsPerStrip = imageLength % rowsPerStrip;\n\t\t\tvar rowsInLastStrip = (imageLengthModRowsPerStrip === 0) ? rowsPerStrip : imageLengthModRowsPerStrip;\n\n\t\t\tvar numRowsInStrip = rowsPerStrip;\n\t\t\tvar numRowsInPreviousStrip = 0;\n\n\t\t\tvar photometricInterpretation = fileDirectory.PhotometricInterpretation.values[0];\n\n\t\t\tvar extraSamplesValues = [];\n\t\t\tvar numExtraSamples = 0;\n\n\t\t\tif (fileDirectory.ExtraSamples) {\n\t\t\t\textraSamplesValues = fileDirectory.ExtraSamples.values;\n\t\t\t\tnumExtraSamples = extraSamplesValues.length;\n\t\t\t}\n\n\t\t\tif (fileDirectory.ColorMap) {\n\t\t\t\tvar colorMapValues = fileDirectory.ColorMap.values;\n\t\t\t\tvar colorMapSampleSize = Math.pow(2, sampleProperties[0].bitsPerSample);\n\t\t\t}\n\n\t\t\t// Loop through the strips in the image.\n\t\t\tfor (var i = 0; i < numStrips; i++) {\n\t\t\t\t// The last strip may be short.\n\t\t\t\tif ((i + 1) === numStrips) {\n\t\t\t\t\tnumRowsInStrip = rowsInLastStrip;\n\t\t\t\t}\n\n\t\t\t\tvar numPixels = strips[i].length;\n\t\t\t\tvar yPadding = numRowsInPreviousStrip * i;\n\n\t\t\t\t// Loop through the rows in the strip.\n\t\t\t\tfor (var y = 0, j = 0; y < numRowsInStrip, j < numPixels; y++) {\n\t\t\t\t\t// Loop through the pixels in the row.\n\t\t\t\t\tfor (var x = 0; x < imageWidth; x++, j++) {\n\t\t\t\t\t\tvar pixelSamples = strips[i][j];\n\n\t\t\t\t\t\tvar red = 0;\n\t\t\t\t\t\tvar green = 0;\n\t\t\t\t\t\tvar blue = 0;\n\t\t\t\t\t\tvar opacity = 1.0;\n\n\t\t\t\t\t\tif (numExtraSamples > 0) {\n\t\t\t\t\t\t\tfor (var k = 0; k < numExtraSamples; k++) {\n\t\t\t\t\t\t\t\tif (extraSamplesValues[k] === 1 || extraSamplesValues[k] === 2) {\n\t\t\t\t\t\t\t\t\t// Clamp opacity to the range [0,1].\n\t\t\t\t\t\t\t\t\topacity = pixelSamples[3 + k] / 256;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (photometricInterpretation) {\n\t\t\t\t\t\t\t// Bilevel or Grayscale\n\t\t\t\t\t\t\t// WhiteIsZero\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tif (sampleProperties[0].hasBytesPerSample) {\n\t\t\t\t\t\t\t\t\tvar invertValue = Math.pow(0x10, sampleProperties[0].bytesPerSample * 2);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Invert samples.\n\t\t\t\t\t\t\t\tpixelSamples.forEach(function(sample, index, samples) { samples[index] = invertValue - sample; });\n\n\t\t\t\t\t\t\t// Bilevel or Grayscale\n\t\t\t\t\t\t\t// BlackIsZero\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tred = green = blue = this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// RGB Full Color\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tred = this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);\n\t\t\t\t\t\t\t\tgreen = this.clampColorSample(pixelSamples[1], sampleProperties[1].bitsPerSample);\n\t\t\t\t\t\t\t\tblue = this.clampColorSample(pixelSamples[2], sampleProperties[2].bitsPerSample);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// RGB Color Palette\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tif (colorMapValues === undefined) {\n\t\t\t\t\t\t\t\t\tthrow Error(\"Palette image missing color map\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar colorMapIndex = pixelSamples[0];\n\n\t\t\t\t\t\t\t\tred = this.clampColorSample(colorMapValues[colorMapIndex], 16);\n\t\t\t\t\t\t\t\tgreen = this.clampColorSample(colorMapValues[colorMapSampleSize + colorMapIndex], 16);\n\t\t\t\t\t\t\t\tblue = this.clampColorSample(colorMapValues[(2 * colorMapSampleSize) + colorMapIndex], 16);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// Transparency mask\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tthrow RangeError( 'Not Yet Implemented: Transparency mask' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// CMYK\n\t\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\t\tthrow RangeError( 'Not Yet Implemented: CMYK' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// YCbCr\n\t\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\t\tthrow RangeError( 'Not Yet Implemented: YCbCr' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// CIELab\n\t\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\t\tthrow RangeError( 'Not Yet Implemented: CIELab' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// Unknown Photometric Interpretation\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow RangeError( 'Unknown Photometric Interpretation:', photometricInterpretation );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.fillStyle = this.makeRGBAFillValue(red, green, blue, opacity);\n\t\t\t\t\t\tctx.fillRect(x, yPadding + y, 1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnumRowsInPreviousStrip = numRowsInStrip;\n\t\t\t}\n\t\t}\n\n/*\t\tfor (var i = 0, numFileDirectories = this.fileDirectories.length; i < numFileDirectories; i++) {\n\t\t\t// Stuff\n\t\t}*/\n\n\t\treturn this.canvas;\n\t},\n}\n// if (typeof module === \"undefined\") {\n//     this.TIFFParser = TIFFParser;\n// } else {\n//     module.exports = TIFFParser;\n// }\n// if (typeof define === \"function\") {\n//     define(function () { return TIFFParser; });\n// }\nexport default TIFFParser;\n","﻿import CSG from '../ThirdParty/csg/csg.js';\n\n/**\n*@param {Cesium.Geometry}\n*@param {Cesium.Cartesian3}[offset]\n*@return {CSG}\n*/\nCSG.toCSG = function (geometry, offset) {\n    if (!offset) {\n        offset = { x: 0, y: 0, z: 0 };\n    }\n    if (!geometry.attributes.normal) {\n        geometry = Cesium.GeometryPipeline.computeNormal(geometry);\n    }\n    if (geometry.primitiveType !== Cesium.PrimitiveType.TRIANGLES) {\n        throw new Error(\"暂不支持此类几何体\");\n    }\n     \n    var polygons = [], vertices = [];\n    var positions = geometry.attributes.position.values;\n    var normals = geometry.attributes.normal.values;\n    var normalIdx = 0, positionIdx = 0;\n\n    for (var i = 0; i < geometry.indices.length; i += 3) {\n        vertices = [];\n\n        var idx1 = geometry.indices[i];\n        var idx2 = geometry.indices[i + 1];\n        var idx3 = geometry.indices[i + 2];\n\n        positionIdx = idx1 * 3;\n        normalIdx = idx1 * 3;\n\n        vertices.push(new CSG.Vertex(\n            [positions[positionIdx++] + offset.x, positions[positionIdx++] + offset.y, positions[positionIdx++] + offset.z],\n            [normals[normalIdx++], normals[normalIdx++], normals[normalIdx++]]\n        ));\n\n        positionIdx = idx2 * 3;\n        normalIdx = idx2 * 3;\n        vertices.push(new CSG.Vertex(\n            [positions[positionIdx++] + offset.x, positions[positionIdx++] + offset.y, positions[positionIdx++] + offset.z],\n            [normals[normalIdx++], normals[normalIdx++], normals[normalIdx++]]\n        ));\n\n        positionIdx = idx3 * 3;\n        normalIdx = idx3 * 3;\n        vertices.push(new CSG.Vertex(\n            [positions[positionIdx++] + offset.x, positions[positionIdx++] + offset.y, positions[positionIdx++] + offset.z],\n            [normals[normalIdx++], normals[normalIdx++], normals[normalIdx++]]\n        ));\n        polygons.push(new CSG.Polygon(vertices));\n    }\n    return CSG.fromPolygons(polygons);\n}\n/**\n*@param {CSG}csg_model\n*@return {Cesium.Geometry}\n*/\nCSG.fromCSG = function (csg_model) {\n    var i, j, vertices,\n        polygons = csg_model.toPolygons();\n\n    if (!CSG) {\n        throw new Error('CSG 库未加载。请从 https://github.com/evanw/csg.js 获取');\n    }\n\n    var positions = [];\n    var normals = [];\n    var indices = [];\n\n    for (i = 0; i < polygons.length; i++) {\n\n        // Vertices\n        vertices = [];\n        for (j = 0; j < polygons[i].vertices.length; j++) {\n            vertices.push(this.getGeometryVertice(positions, normals, polygons[i].vertices[j].pos, polygons[i].plane.normal));\n        }\n        if (vertices[0] === vertices[vertices.length - 1]) {\n            vertices.pop();\n        }\n\n        for (var j = 2; j < vertices.length; j++) {\n            indices.push(vertices[0], vertices[j - 1], vertices[j]);\n        }\n    }\n\n    positions = new Float32Array(positions);\n    normals = new Float32Array(normals);\n\n    indices = new Int32Array(indices);\n    var attributes = {};\n    attributes.position = new Cesium.GeometryAttribute({\n        componentDatatype: Cesium.ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: positions\n    });\n    attributes.normal = new Cesium.GeometryAttribute({\n        componentDatatype: Cesium.ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals\n    });\n\n    var cesGeometry = new Cesium.Geometry({\n        attributes: attributes,\n        indices: indices,\n        primitiveType: Cesium.PrimitiveType.TRIANGLES\n    });\n\n    return cesGeometry;\n}\n/**\n*@param {Array<Number>}positions\n*@param {Array<Number>}normals\n*@param {Cesium.CSG.Vector}vertice_position\n*@param {Cesium.CSG.Vector}plane_normal\n*@return {Number}\n*@private\n*/\nCSG.getGeometryVertice = function (positions, normals, vertice_position, plane_normal) {\n    var i, idx = 0;\n    for (i = 0; i < positions.length; i += 3) {\n        if (positions[i] === vertice_position.x\n            && positions[i + 1] === vertice_position.y\n            && positions[i + 2] === vertice_position.z) {\n            // Vertice already exists\n            return idx;\n        }\n        idx++;\n    };\n\n    positions.push(vertice_position.x, vertice_position.y, vertice_position.z);\n    normals.push(plane_normal.x, plane_normal.y, plane_normal.z);\n    return idx;\n}\n\nexport default CSG;"," \n/**\n*@class\n*@memberof Cesium\n*/\nfunction Path() { }\n/**\n*\n*获取文件扩展名（后缀）\n*@param {String}fname 文件名\n*/\nPath.GetExtension = function (fname) {\n    var start = fname.lastIndexOf(\".\");\n    if (start >= 0) {\n        return fname.substring(start, fname.length);\n    }\n    return \"\";\n}\n\n/**\n*\n*获取文件扩展名（后缀）\n*@param {String}fname 文件名\n*/\nPath.GetFileName = function (fname) {\n    var start = fname.lastIndexOf(\"/\");\n    if (start < 0) {\n        return fname;\n    }\n    return fname.substring(start + 1, fname.length);\n}\n/**\n*\n*获取文件夹\n*@param {String}fname 文件名\n*/\nPath.GetDirectoryName = function (fname) {\n    var start = fname.lastIndexOf(\"/\");\n    if (start < 0) {\n        return \"\";\n    }\n    return fname.substring(0, start);\n}\n/**\n*\n*获取文件夹\n*@param {String}fname 文件名\n*/\nPath.Combine = function (dir, fname) {\n    return dir + fname;\n}\nPath.ChangeExtension = function (fname, newExt) {\n    return fname.replace(Path.GetExtension(fname), newExt);\n}\n \nexport default Path;","﻿\r\n/**\r\n*定义属性，并监听属性变化事件,属性值的数据类型可以实现equals接口用于进行更进一步的比较\r\n*@param {Object}owner\r\n*@param {String}name\r\n*@param {Any}defaultVal\r\n*@param {(\r\n        changed: string, owner: object, newVal: *, oldVal: *\r\n        ) => void}onChanged\r\n*@memberof Cesium\r\n*/\r\nfunction defineProperty(owner, name, defaultVal, onChanged) {\r\n    owner[\"_\" + name] = defaultVal;\r\n    var value = {\r\n        get: function () {\r\n            return this[\"_\" + name];\r\n        },\r\n        set: function (val) {\r\n            var changed = val != this[\"_\" + name];\r\n            if (this[\"_\" + name] && this[\"_\" + name].equals && val) {\r\n                changed = this[\"_\" + name].equals(val);\r\n            }\r\n            var oldVal = this[\"_\" + name];\r\n            this[\"_\" + name] = val;\r\n            if (typeof onChanged == 'function' && changed) {\r\n                onChanged(changed, owner, val, oldVal);\r\n            }\r\n        }\r\n    };\r\n    var properties = {};\r\n    properties[name] = value;\r\n    Object.defineProperties(owner, properties)\r\n}\r\n\r\nexport default defineProperty;"]}